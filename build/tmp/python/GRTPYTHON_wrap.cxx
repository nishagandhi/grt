/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *val = NULL, *type = NULL, *tb = NULL;
      PyErr_Fetch(&val, &type, &tb);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(val, type, tb);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Clusterer swig_types[0]
#define SWIGTYPE_p_Context swig_types[1]
#define SWIGTYPE_p_DataType swig_types[2]
#define SWIGTYPE_p_FeatureExtraction swig_types[3]
#define SWIGTYPE_p_GRT__ANBC swig_types[4]
#define SWIGTYPE_p_GRT__ANBC_Model swig_types[5]
#define SWIGTYPE_p_GRT__AdaBoost swig_types[6]
#define SWIGTYPE_p_GRT__BAG swig_types[7]
#define SWIGTYPE_p_GRT__ClassificationData swig_types[8]
#define SWIGTYPE_p_GRT__ClassificationDataStream swig_types[9]
#define SWIGTYPE_p_GRT__ClassificationSample swig_types[10]
#define SWIGTYPE_p_GRT__Classifier swig_types[11]
#define SWIGTYPE_p_GRT__ClusterInfo swig_types[12]
#define SWIGTYPE_p_GRT__ClusterLevel swig_types[13]
#define SWIGTYPE_p_GRT__ClusterTree swig_types[14]
#define SWIGTYPE_p_GRT__ClusterTreeNode swig_types[15]
#define SWIGTYPE_p_GRT__Clusterer swig_types[16]
#define SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel swig_types[17]
#define SWIGTYPE_p_GRT__DTW swig_types[18]
#define SWIGTYPE_p_GRT__DTWTemplate swig_types[19]
#define SWIGTYPE_p_GRT__DecisionStump swig_types[20]
#define SWIGTYPE_p_GRT__DecisionTree swig_types[21]
#define SWIGTYPE_p_GRT__DecisionTreeClusterNode swig_types[22]
#define SWIGTYPE_p_GRT__DecisionTreeNode swig_types[23]
#define SWIGTYPE_p_GRT__DecisionTreeThresholdNode swig_types[24]
#define SWIGTYPE_p_GRT__DecisionTreeTripleFeatureNode swig_types[25]
#define SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel swig_types[26]
#define SWIGTYPE_p_GRT__FSMParticle swig_types[27]
#define SWIGTYPE_p_GRT__FeatureExtraction swig_types[28]
#define SWIGTYPE_p_GRT__FiniteStateMachine swig_types[29]
#define SWIGTYPE_p_GRT__GMM swig_types[30]
#define SWIGTYPE_p_GRT__GRTBase swig_types[31]
#define SWIGTYPE_p_GRT__GaussNeuron swig_types[32]
#define SWIGTYPE_p_GRT__GaussianMixtureModels swig_types[33]
#define SWIGTYPE_p_GRT__GestureRecognitionPipeline swig_types[34]
#define SWIGTYPE_p_GRT__GuassModel swig_types[35]
#define SWIGTYPE_p_GRT__HMM swig_types[36]
#define SWIGTYPE_p_GRT__HMMTrainingObject swig_types[37]
#define SWIGTYPE_p_GRT__HierarchicalClustering swig_types[38]
#define SWIGTYPE_p_GRT__IndexDist swig_types[39]
#define SWIGTYPE_p_GRT__KMeans swig_types[40]
#define SWIGTYPE_p_GRT__KMeansQuantizer swig_types[41]
#define SWIGTYPE_p_GRT__KNN swig_types[42]
#define SWIGTYPE_p_GRT__LinearRegression swig_types[43]
#define SWIGTYPE_p_GRT__MLBase swig_types[44]
#define SWIGTYPE_p_GRT__MatrixFloat swig_types[45]
#define SWIGTYPE_p_GRT__MatrixT_GRT__Float_t swig_types[46]
#define SWIGTYPE_p_GRT__MatrixT_GRT__GaussNeuron_t swig_types[47]
#define SWIGTYPE_p_GRT__MatrixT_GRT__VectorFloat_t swig_types[48]
#define SWIGTYPE_p_GRT__MatrixT_double_t swig_types[49]
#define SWIGTYPE_p_GRT__MinDist swig_types[50]
#define SWIGTYPE_p_GRT__MinDistModel swig_types[51]
#define SWIGTYPE_p_GRT__MixtureModel swig_types[52]
#define SWIGTYPE_p_GRT__ParticleClassifier swig_types[53]
#define SWIGTYPE_p_GRT__ParticleClassifierGestureTemplate swig_types[54]
#define SWIGTYPE_p_GRT__ParticleClassifierParticleFilter swig_types[55]
#define SWIGTYPE_p_GRT__RadialBasisFunction swig_types[56]
#define SWIGTYPE_p_GRT__RandomForests swig_types[57]
#define SWIGTYPE_p_GRT__RegressionData swig_types[58]
#define SWIGTYPE_p_GRT__SVM swig_types[59]
#define SWIGTYPE_p_GRT__SelfOrganizingMap swig_types[60]
#define SWIGTYPE_p_GRT__Softmax swig_types[61]
#define SWIGTYPE_p_GRT__SoftmaxModel swig_types[62]
#define SWIGTYPE_p_GRT__SwipeDetector swig_types[63]
#define SWIGTYPE_p_GRT__TestResultsObserverManager swig_types[64]
#define SWIGTYPE_p_GRT__TimeSeriesClassificationData swig_types[65]
#define SWIGTYPE_p_GRT__TimeSeriesClassificationSample swig_types[66]
#define SWIGTYPE_p_GRT__TrainingResultsObserverManager swig_types[67]
#define SWIGTYPE_p_GRT__UnlabelledData swig_types[68]
#define SWIGTYPE_p_GRT__Util swig_types[69]
#define SWIGTYPE_p_GRT__VectorFloat swig_types[70]
#define SWIGTYPE_p_GRT__VectorT_AdaBoostClassModel_t swig_types[71]
#define SWIGTYPE_p_GRT__VectorT_ClassTracker_t swig_types[72]
#define SWIGTYPE_p_GRT__VectorT_GRT__ANBC_Model_t swig_types[73]
#define SWIGTYPE_p_GRT__VectorT_GRT__ClassificationSample_t swig_types[74]
#define SWIGTYPE_p_GRT__VectorT_GRT__Classifier_p_t swig_types[75]
#define SWIGTYPE_p_GRT__VectorT_GRT__ClusterInfo_t swig_types[76]
#define SWIGTYPE_p_GRT__VectorT_GRT__ClusterLevel_t swig_types[77]
#define SWIGTYPE_p_GRT__VectorT_GRT__ContinuousHiddenMarkovModel_t swig_types[78]
#define SWIGTYPE_p_GRT__VectorT_GRT__DTWTemplate_t swig_types[79]
#define SWIGTYPE_p_GRT__VectorT_GRT__DecisionTreeNode_p_t swig_types[80]
#define SWIGTYPE_p_GRT__VectorT_GRT__DiscreteHiddenMarkovModel_t swig_types[81]
#define SWIGTYPE_p_GRT__VectorT_GRT__Float_t swig_types[82]
#define SWIGTYPE_p_GRT__VectorT_GRT__MatrixFloat_t swig_types[83]
#define SWIGTYPE_p_GRT__VectorT_GRT__MinDistModel_t swig_types[84]
#define SWIGTYPE_p_GRT__VectorT_GRT__MixtureModel_t swig_types[85]
#define SWIGTYPE_p_GRT__VectorT_GRT__ParticleClassifierGestureTemplate_t swig_types[86]
#define SWIGTYPE_p_GRT__VectorT_GRT__SoftmaxModel_t swig_types[87]
#define SWIGTYPE_p_GRT__VectorT_GRT__TimeSeriesClassificationSample_t swig_types[88]
#define SWIGTYPE_p_GRT__VectorT_GRT__VectorFloat_t swig_types[89]
#define SWIGTYPE_p_GRT__VectorT_GRT__VectorT_GRT__Float_t_t swig_types[90]
#define SWIGTYPE_p_GRT__VectorT_GRT__VectorT_GRT__IndexDist_t_t swig_types[91]
#define SWIGTYPE_p_GRT__VectorT_GRT__VectorT_UINT_t_t swig_types[92]
#define SWIGTYPE_p_GRT__VectorT_MinMax_t swig_types[93]
#define SWIGTYPE_p_GRT__VectorT_TestInstanceResult_t swig_types[94]
#define SWIGTYPE_p_GRT__VectorT_TestResult_t swig_types[95]
#define SWIGTYPE_p_GRT__VectorT_TrainingResult_t swig_types[96]
#define SWIGTYPE_p_GRT__VectorT_UINT_t swig_types[97]
#define SWIGTYPE_p_GRT__VectorT_double_t swig_types[98]
#define SWIGTYPE_p_GRT__VectorT_std__string_t swig_types[99]
#define SWIGTYPE_p_GRT__WeakClassifier swig_types[100]
#define SWIGTYPE_p_LIBSVM__svm_model swig_types[101]
#define SWIGTYPE_p_MinMax swig_types[102]
#define SWIGTYPE_p_Node swig_types[103]
#define SWIGTYPE_p_ObserverT_TestInstanceResult_t swig_types[104]
#define SWIGTYPE_p_ObserverT_TrainingResult_t swig_types[105]
#define SWIGTYPE_p_Particle swig_types[106]
#define SWIGTYPE_p_PostProcessing swig_types[107]
#define SWIGTYPE_p_PreProcessing swig_types[108]
#define SWIGTYPE_p_Regressifier swig_types[109]
#define SWIGTYPE_p_StringClassifierMap swig_types[110]
#define SWIGTYPE_p_StringClustererMap swig_types[111]
#define SWIGTYPE_p_StringFeatureExtractionMap swig_types[112]
#define SWIGTYPE_p_StringWeakClassifierMap swig_types[113]
#define SWIGTYPE_p_TestInstanceResult swig_types[114]
#define SWIGTYPE_p_TestResult swig_types[115]
#define SWIGTYPE_p_TrainingResult swig_types[116]
#define SWIGTYPE_p_Tree__TrainingMode swig_types[117]
#define SWIGTYPE_p_UINT swig_types[118]
#define SWIGTYPE_p_allocator_type swig_types[119]
#define SWIGTYPE_p_char swig_types[120]
#define SWIGTYPE_p_difference_type swig_types[121]
#define SWIGTYPE_p_double swig_types[122]
#define SWIGTYPE_p_long_double swig_types[123]
#define SWIGTYPE_p_p_PyObject swig_types[124]
#define SWIGTYPE_p_p_double swig_types[125]
#define SWIGTYPE_p_size_type swig_types[126]
#define SWIGTYPE_p_std__allocatorT_UINT_t swig_types[127]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[128]
#define SWIGTYPE_p_std__allocatorT_float_t swig_types[129]
#define SWIGTYPE_p_std__allocatorT_int_t swig_types[130]
#define SWIGTYPE_p_std__fstream swig_types[131]
#define SWIGTYPE_p_std__invalid_argument swig_types[132]
#define SWIGTYPE_p_std__ostream swig_types[133]
#define SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t swig_types[134]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[135]
#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[136]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[137]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[138]
#define SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t swig_types[139]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[140]
#define SWIGTYPE_p_value_type swig_types[141]
static swig_type_info *swig_types[143];
static swig_module_info swig_module = {swig_types, 142, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _GRT.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__GRT

#else
#  define SWIG_init    init_GRT

#endif
#define SWIG_name    "_GRT"

#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


/* Includes the header in the wrapper code */
#include "../GRT/GRT.h"
#include "../GRT/Util/GRTTypedefs.h"
#include "../GRT/DataStructures/Vector.h"

#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include "numpy/npy_common.h"
#include "numpy/ndarrayobject.h"
#include "numpy/arrayobject.h"

#include <stdio.h>

using namespace GRT;


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      swig_type_info *descriptor = type_info<Type>();
      int res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", (int)i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


namespace swig {
  template <> struct traits< int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };
  template <>  struct traits_asval< int > {
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from< int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_int_Sg__iterator(std::vector< int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_int_Sg____nonzero__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_int_Sg____bool__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< int >::size_type std_vector_Sl_int_Sg____len__(std::vector< int > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< int,std::allocator< int > >());
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice____SWIG_1(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j,std::vector< int,std::allocator< int > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getitem____SWIG_0(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_0(std::vector< int > *self,PySliceObject *slice,std::vector< int,std::allocator< int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg____getitem____SWIG_1(std::vector< int > const *self,std::vector< int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_2(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__pop(std::vector< int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< int,std::allocator< int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_int_Sg__append(std::vector< int > *self,std::vector< int >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__erase__SWIG_0(std::vector< int > *self,std::vector< int >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__erase__SWIG_1(std::vector< int > *self,std::vector< int >::iterator first,std::vector< int >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__insert__SWIG_0(std::vector< int > *self,std::vector< int >::iterator pos,std::vector< int >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_int_Sg__insert__SWIG_1(std::vector< int > *self,std::vector< int >::iterator pos,std::vector< int >::size_type n,std::vector< int >::value_type const &x){ self->insert(pos, n, x); }

  #define SWIG_From_double   PyFloat_FromDouble 


namespace swig {
  template <> struct traits< double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };
  template <>  struct traits_asval< double > {
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from< double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_double_Sg__iterator(std::vector< double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_double_Sg____bool__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< double,std::allocator< double > >());
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_1(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getitem____SWIG_0(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_0(std::vector< double > *self,PySliceObject *slice,std::vector< double,std::allocator< double > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem____SWIG_1(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_2(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,std::vector< double >::iterator first,std::vector< double >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__insert__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_double_Sg__insert__SWIG_1(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::size_type n,std::vector< double >::value_type const &x){ self->insert(pos, n, x); }

/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined __cplusplus && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


namespace swig {
  template <> struct traits< float > {
    typedef value_category category;
    static const char* type_name() { return"float"; }
  };
  template <>  struct traits_asval< float > {
    typedef float value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_float (obj, val);
    }
  };
  template <>  struct traits_from< float > {
    typedef float value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_float  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< float, std::allocator< float > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "float" "," "std::allocator< float >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_float_Sg__iterator(std::vector< float > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_float_Sg____nonzero__(std::vector< float > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_float_Sg____bool__(std::vector< float > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< float >::size_type std_vector_Sl_float_Sg____len__(std::vector< float > const *self){
      return self->size();
    }
SWIGINTERN std::vector< float,std::allocator< float > > *std_vector_Sl_float_Sg____getslice__(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_float_Sg____setslice____SWIG_0(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< float,std::allocator< float > >());
    }
SWIGINTERN void std_vector_Sl_float_Sg____setslice____SWIG_1(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j,std::vector< float,std::allocator< float > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_float_Sg____delslice__(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_float_Sg____delitem____SWIG_0(std::vector< float > *self,std::vector< float >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< float,std::allocator< float > > *std_vector_Sl_float_Sg____getitem____SWIG_0(std::vector< float > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< float,std::allocator< float > >::difference_type id = i;
      std::vector< float,std::allocator< float > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_float_Sg____setitem____SWIG_0(std::vector< float > *self,PySliceObject *slice,std::vector< float,std::allocator< float > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< float,std::allocator< float > >::difference_type id = i;
      std::vector< float,std::allocator< float > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_float_Sg____setitem____SWIG_1(std::vector< float > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< float,std::allocator< float > >::difference_type id = i;
      std::vector< float,std::allocator< float > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_float_Sg____delitem____SWIG_1(std::vector< float > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< float,std::allocator< float > >::difference_type id = i;
      std::vector< float,std::allocator< float > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< float >::value_type const &std_vector_Sl_float_Sg____getitem____SWIG_1(std::vector< float > const *self,std::vector< float >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_float_Sg____setitem____SWIG_2(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< float >::value_type std_vector_Sl_float_Sg__pop(std::vector< float > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< float,std::allocator< float > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_float_Sg__append(std::vector< float > *self,std::vector< float >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< float >::iterator std_vector_Sl_float_Sg__erase__SWIG_0(std::vector< float > *self,std::vector< float >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< float >::iterator std_vector_Sl_float_Sg__erase__SWIG_1(std::vector< float > *self,std::vector< float >::iterator first,std::vector< float >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< float >::iterator std_vector_Sl_float_Sg__insert__SWIG_0(std::vector< float > *self,std::vector< float >::iterator pos,std::vector< float >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_float_Sg__insert__SWIG_1(std::vector< float > *self,std::vector< float >::iterator pos,std::vector< float >::size_type n,std::vector< float >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if(alloc) *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	{
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


  namespace swig {
    template <>  struct traits< UINT > {
      typedef pointer_category category;
      static const char* type_name() { return"UINT"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< UINT, std::allocator< UINT > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "UINT" "," "std::allocator< UINT >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_UINT_Sg__iterator(std::vector< UINT > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_UINT_Sg____nonzero__(std::vector< UINT > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_UINT_Sg____bool__(std::vector< UINT > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< UINT >::size_type std_vector_Sl_UINT_Sg____len__(std::vector< UINT > const *self){
      return self->size();
    }
SWIGINTERN std::vector< UINT,std::allocator< UINT > > *std_vector_Sl_UINT_Sg____getslice__(std::vector< UINT > *self,std::vector< UINT >::difference_type i,std::vector< UINT >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_UINT_Sg____setslice____SWIG_0(std::vector< UINT > *self,std::vector< UINT >::difference_type i,std::vector< UINT >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< UINT,std::allocator< UINT > >());
    }
SWIGINTERN void std_vector_Sl_UINT_Sg____setslice____SWIG_1(std::vector< UINT > *self,std::vector< UINT >::difference_type i,std::vector< UINT >::difference_type j,std::vector< UINT,std::allocator< UINT > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_UINT_Sg____delslice__(std::vector< UINT > *self,std::vector< UINT >::difference_type i,std::vector< UINT >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_UINT_Sg____delitem____SWIG_0(std::vector< UINT > *self,std::vector< UINT >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< UINT,std::allocator< UINT > > *std_vector_Sl_UINT_Sg____getitem____SWIG_0(std::vector< UINT > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< UINT,std::allocator< UINT > >::difference_type id = i;
      std::vector< UINT,std::allocator< UINT > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_UINT_Sg____setitem____SWIG_0(std::vector< UINT > *self,PySliceObject *slice,std::vector< UINT,std::allocator< UINT > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< UINT,std::allocator< UINT > >::difference_type id = i;
      std::vector< UINT,std::allocator< UINT > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_UINT_Sg____setitem____SWIG_1(std::vector< UINT > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< UINT,std::allocator< UINT > >::difference_type id = i;
      std::vector< UINT,std::allocator< UINT > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_UINT_Sg____delitem____SWIG_1(std::vector< UINT > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< UINT,std::allocator< UINT > >::difference_type id = i;
      std::vector< UINT,std::allocator< UINT > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< UINT >::value_type const &std_vector_Sl_UINT_Sg____getitem____SWIG_1(std::vector< UINT > const *self,std::vector< UINT >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_UINT_Sg____setitem____SWIG_2(std::vector< UINT > *self,std::vector< UINT >::difference_type i,std::vector< UINT >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< UINT >::value_type std_vector_Sl_UINT_Sg__pop(std::vector< UINT > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< UINT,std::allocator< UINT > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_UINT_Sg__append(std::vector< UINT > *self,std::vector< UINT >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< UINT >::iterator std_vector_Sl_UINT_Sg__erase__SWIG_0(std::vector< UINT > *self,std::vector< UINT >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< UINT >::iterator std_vector_Sl_UINT_Sg__erase__SWIG_1(std::vector< UINT > *self,std::vector< UINT >::iterator first,std::vector< UINT >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< UINT >::iterator std_vector_Sl_UINT_Sg__insert__SWIG_0(std::vector< UINT > *self,std::vector< UINT >::iterator pos,std::vector< UINT >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_UINT_Sg__insert__SWIG_1(std::vector< UINT > *self,std::vector< UINT >::iterator pos,std::vector< UINT >::size_type n,std::vector< UINT >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}

SWIGINTERN GRT::ClassificationSample &GRT_ClassificationData_get(GRT::ClassificationData *self,int const &i){
        return self->operator[](i);
    }
SWIGINTERN GRT::TimeSeriesClassificationSample &GRT_TimeSeriesClassificationData_get(GRT::TimeSeriesClassificationData *self,int const &i){
        return self->operator[](i);
    }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IntVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_iterator" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_int_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___nonzero__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____nonzero__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___bool__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____bool__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___len__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = std_vector_Sl_int_Sg____len__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___getslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___getslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___getslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    std_vector_Sl_int_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IntVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IntVector___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVector___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntVector___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IntVector___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setslice__(std::vector< int >::difference_type,std::vector< int >::difference_type)\n"
    "    std::vector< int >::__setslice__(std::vector< int >::difference_type,std::vector< int >::difference_type,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___delslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___delslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___delslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    std_vector_Sl_int_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___delitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___getitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IntVector___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVector___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__delitem__(std::vector< int >::difference_type)\n"
    "    std::vector< int >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___getitem__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___getitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg____getitem____SWIG_1((std::vector< int > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__getitem__(PySliceObject *)\n"
    "    std::vector< int >::__getitem__(std::vector< int >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___setitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___setitem__" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_2(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IntVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setitem__(PySliceObject *,std::vector< int,std::allocator< int > > const &)\n"
    "    std::vector< int >::__setitem__(PySliceObject *)\n"
    "    std::vector< int >::__setitem__(std::vector< int >::difference_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_append" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_append" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_int_Sg__append(arg1,(int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IntVector")) SWIG_fail;
  result = (std::vector< int > *)new std::vector< int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IntVector",&obj0)) SWIG_fail;
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_empty" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)((std::vector< int > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_size" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_swap" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntVector_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVector_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_begin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_end" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_rbegin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_rend" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_get_allocator" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< int >::allocator_type(static_cast< const std::vector< int >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IntVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_pop_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = std_vector_Sl_int_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = std_vector_Sl_int_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_IntVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_IntVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::erase(std::vector< int >::iterator)\n"
    "    std::vector< int >::erase(std::vector< int >::iterator,std::vector< int >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_IntVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  std::vector< int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IntVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IntVector" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< int > *)new std::vector< int >(arg1,(std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IntVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IntVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IntVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IntVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_IntVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::vector()\n"
    "    std::vector< int >::vector(std::vector< int > const &)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_push_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_push_back" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_front" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->front();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_back" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->back();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_assign" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_assign" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_assign" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_resize" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::resize(std::vector< int >::size_type)\n"
    "    std::vector< int >::resize(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_insert" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_int_Sg__insert__SWIG_0(arg1,arg2,(int const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::size_type arg3 ;
  std::vector< int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< int >::value_type temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IntVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IntVector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_insert" "', argument " "3"" of type '" "std::vector< int >::size_type""'");
  } 
  arg3 = static_cast< std::vector< int >::size_type >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IntVector_insert" "', argument " "4"" of type '" "std::vector< int >::value_type""'");
  } 
  temp4 = static_cast< std::vector< int >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_int_Sg__insert__SWIG_1(arg1,arg2,arg3,(int const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IntVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IntVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::value_type const &)\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_reserve" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_reserve" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_capacity" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IntVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntVector" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DoubleVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_iterator" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_double_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___bool__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____bool__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DoubleVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DoubleVector___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type)\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__delitem__(std::vector< double >::difference_type)\n"
    "    std::vector< double >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem____SWIG_1((std::vector< double > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__getitem__(PySliceObject *)\n"
    "    std::vector< double >::__getitem__(std::vector< double >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_2(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DoubleVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setitem__(PySliceObject *,std::vector< double,std::allocator< double > > const &)\n"
    "    std::vector< double >::__setitem__(PySliceObject *)\n"
    "    std::vector< double >::__setitem__(std::vector< double >::difference_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  try {
    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DoubleVector")) SWIG_fail;
  result = (std::vector< double > *)new std::vector< double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DoubleVector",&obj0)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)((std::vector< double > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_begin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_end" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_rbegin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_rend" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< double >::allocator_type(static_cast< const std::vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DoubleVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = std_vector_Sl_double_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = std_vector_Sl_double_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_DoubleVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_DoubleVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(std::vector< double >::iterator)\n"
    "    std::vector< double >::erase(std::vector< double >::iterator,std::vector< double >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DoubleVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleVector" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DoubleVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DoubleVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DoubleVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::resize(std::vector< double >::size_type)\n"
    "    std::vector< double >::resize(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_insert" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_double_Sg__insert__SWIG_0(arg1,arg2,(double const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DoubleVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_insert" "', argument " "3"" of type '" "std::vector< double >::size_type""'");
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DoubleVector_insert" "', argument " "4"" of type '" "std::vector< double >::value_type""'");
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_double_Sg__insert__SWIG_1(arg1,arg2,arg3,(double const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DoubleVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DoubleVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::value_type const &)\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DoubleVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DoubleVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleVector" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DoubleVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_FloatVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:FloatVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_iterator" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_float_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FloatVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___nonzero__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (bool)std_vector_Sl_float_Sg____nonzero__((std::vector< float > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FloatVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___bool__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (bool)std_vector_Sl_float_Sg____bool__((std::vector< float > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FloatVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___len__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = std_vector_Sl_float_Sg____len__((std::vector< float > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FloatVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___getslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector___getslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FloatVector___getslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< float >::difference_type >(val3);
  try {
    result = (std::vector< float,std::allocator< float > > *)std_vector_Sl_float_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FloatVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___setslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector___setslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FloatVector___setslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< float >::difference_type >(val3);
  try {
    std_vector_Sl_float_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::difference_type arg3 ;
  std::vector< float,std::allocator< float > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FloatVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___setslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector___setslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FloatVector___setslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< float >::difference_type >(val3);
  {
    std::vector< float,std::allocator< float > > *ptr = (std::vector< float,std::allocator< float > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FloatVector___setslice__" "', argument " "4"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FloatVector___setslice__" "', argument " "4"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_float_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< float,std::allocator< float > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FloatVector___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< float,std::allocator< float > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_FloatVector___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FloatVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::__setslice__(std::vector< float >::difference_type,std::vector< float >::difference_type)\n"
    "    std::vector< float >::__setslice__(std::vector< float >::difference_type,std::vector< float >::difference_type,std::vector< float,std::allocator< float > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FloatVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FloatVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___delslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector___delslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FloatVector___delslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< float >::difference_type >(val3);
  try {
    std_vector_Sl_float_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FloatVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___delitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector___delitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  try {
    std_vector_Sl_float_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FloatVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___getitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< float,std::allocator< float > > *)std_vector_Sl_float_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< float,std::allocator< float > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FloatVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___setitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< float,std::allocator< float > > *ptr = (std::vector< float,std::allocator< float > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FloatVector___setitem__" "', argument " "3"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FloatVector___setitem__" "', argument " "3"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_float_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< float,std::allocator< float > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FloatVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___setitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_float_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FloatVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___delitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_float_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_FloatVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FloatVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FloatVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::__delitem__(std::vector< float >::difference_type)\n"
    "    std::vector< float >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FloatVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FloatVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___getitem__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector___getitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg____getitem____SWIG_1((std::vector< float > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_float(static_cast< float >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_FloatVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FloatVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FloatVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::__getitem__(PySliceObject *)\n"
    "    std::vector< float >::__getitem__(std::vector< float >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FloatVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FloatVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___setitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector___setitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FloatVector___setitem__" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
  } 
  temp3 = static_cast< std::vector< float >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_float_Sg____setitem____SWIG_2(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_FloatVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< float,std::allocator< float > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FloatVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FloatVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FloatVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::__setitem__(PySliceObject *,std::vector< float,std::allocator< float > > const &)\n"
    "    std::vector< float >::__setitem__(PySliceObject *)\n"
    "    std::vector< float >::__setitem__(std::vector< float >::difference_type,std::vector< float >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FloatVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FloatVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_pop" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  try {
    result = (std::vector< float >::value_type)std_vector_Sl_float_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< float >::value_type temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FloatVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_append" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector_append" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
  } 
  temp2 = static_cast< std::vector< float >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_float_Sg__append(arg1,(float const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FloatVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FloatVector")) SWIG_fail;
  result = (std::vector< float > *)new std::vector< float >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FloatVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FloatVector",&obj0)) SWIG_fail;
  {
    std::vector< float,std::allocator< float > > *ptr = (std::vector< float,std::allocator< float > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FloatVector" "', argument " "1"" of type '" "std::vector< float > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FloatVector" "', argument " "1"" of type '" "std::vector< float > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FloatVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_empty" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (bool)((std::vector< float > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FloatVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_size" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = ((std::vector< float > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FloatVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_swap" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FloatVector_swap" "', argument " "2"" of type '" "std::vector< float > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FloatVector_swap" "', argument " "2"" of type '" "std::vector< float > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< float > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FloatVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_begin" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FloatVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_end" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FloatVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_rbegin" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FloatVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_rend" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FloatVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_clear" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< float > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FloatVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_get_allocator" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = ((std::vector< float > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< float >::allocator_type(static_cast< const std::vector< float >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FloatVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FloatVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FloatVector" "', argument " "1"" of type '" "std::vector< float >::size_type""'");
  } 
  arg1 = static_cast< std::vector< float >::size_type >(val1);
  result = (std::vector< float > *)new std::vector< float >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FloatVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_pop_back" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FloatVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_resize" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector_resize" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FloatVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_erase" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
    }
  }
  result = std_vector_Sl_float_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::iterator arg2 ;
  std::vector< float >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< float >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FloatVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_erase" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_erase" "', argument " "3"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_erase" "', argument " "3"" of type '" "std::vector< float >::iterator""'");
    }
  }
  result = std_vector_Sl_float_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_FloatVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_FloatVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FloatVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::erase(std::vector< float >::iterator)\n"
    "    std::vector< float >::erase(std::vector< float >::iterator,std::vector< float >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_FloatVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float >::size_type arg1 ;
  std::vector< float >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< float >::value_type temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_FloatVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FloatVector" "', argument " "1"" of type '" "std::vector< float >::size_type""'");
  } 
  arg1 = static_cast< std::vector< float >::size_type >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FloatVector" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
  } 
  temp2 = static_cast< std::vector< float >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< float > *)new std::vector< float >(arg1,(std::vector< float >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FloatVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FloatVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FloatVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FloatVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FloatVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FloatVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::vector()\n"
    "    std::vector< float >::vector(std::vector< float > const &)\n"
    "    std::vector< float >::vector(std::vector< float >::size_type)\n"
    "    std::vector< float >::vector(std::vector< float >::size_type,std::vector< float >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FloatVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< float >::value_type temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FloatVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_push_back" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector_push_back" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
  } 
  temp2 = static_cast< std::vector< float >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< float >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FloatVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_front" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (std::vector< float >::value_type *) &((std::vector< float > const *)arg1)->front();
  resultobj = SWIG_From_float(static_cast< float >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FloatVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_back" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (std::vector< float >::value_type *) &((std::vector< float > const *)arg1)->back();
  resultobj = SWIG_From_float(static_cast< float >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FloatVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_assign" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector_assign" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FloatVector_assign" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
  } 
  temp3 = static_cast< std::vector< float >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< float >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FloatVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_resize" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector_resize" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FloatVector_resize" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
  } 
  temp3 = static_cast< std::vector< float >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< float >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FloatVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FloatVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FloatVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::resize(std::vector< float >::size_type)\n"
    "    std::vector< float >::resize(std::vector< float >::size_type,std::vector< float >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FloatVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::iterator arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< float >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FloatVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_insert" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FloatVector_insert" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
  } 
  temp3 = static_cast< std::vector< float >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_float_Sg__insert__SWIG_0(arg1,arg2,(float const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::iterator arg2 ;
  std::vector< float >::size_type arg3 ;
  std::vector< float >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< float >::value_type temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:FloatVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_insert" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FloatVector_insert" "', argument " "3"" of type '" "std::vector< float >::size_type""'");
  } 
  arg3 = static_cast< std::vector< float >::size_type >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FloatVector_insert" "', argument " "4"" of type '" "std::vector< float >::value_type""'");
  } 
  temp4 = static_cast< std::vector< float >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_float_Sg__insert__SWIG_1(arg1,arg2,arg3,(float const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FloatVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FloatVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FloatVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::insert(std::vector< float >::iterator,std::vector< float >::value_type const &)\n"
    "    std::vector< float >::insert(std::vector< float >::iterator,std::vector< float >::size_type,std::vector< float >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FloatVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FloatVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_reserve" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector_reserve" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< float >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FloatVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_capacity" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = ((std::vector< float > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FloatVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FloatVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FloatVector" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FloatVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_grt_sqr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Float *arg1 = 0 ;
  GRT::Float temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grt_sqr",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grt_sqr" "', argument " "1"" of type '" "GRT::Float""'");
  } 
  temp1 = static_cast< GRT::Float >(val1);
  arg1 = &temp1;
  result = (GRT::Float)GRT::grt_sqr((double const &)*arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grt_sqrt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Float *arg1 = 0 ;
  GRT::Float temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grt_sqrt",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grt_sqrt" "', argument " "1"" of type '" "GRT::Float""'");
  } 
  temp1 = static_cast< GRT::Float >(val1);
  arg1 = &temp1;
  result = (GRT::Float)GRT::grt_sqrt((double const &)*arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grt_antilog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Float *arg1 = 0 ;
  GRT::Float temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grt_antilog",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grt_antilog" "', argument " "1"" of type '" "GRT::Float""'");
  } 
  temp1 = static_cast< GRT::Float >(val1);
  arg1 = &temp1;
  result = (GRT::Float)GRT::grt_antilog((double const &)*arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grt_exp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Float *arg1 = 0 ;
  GRT::Float temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grt_exp",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grt_exp" "', argument " "1"" of type '" "GRT::Float""'");
  } 
  temp1 = static_cast< GRT::Float >(val1);
  arg1 = &temp1;
  result = (GRT::Float)GRT::grt_exp((double const &)*arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grt_log(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Float *arg1 = 0 ;
  GRT::Float temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grt_log",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grt_log" "', argument " "1"" of type '" "GRT::Float""'");
  } 
  temp1 = static_cast< GRT::Float >(val1);
  arg1 = &temp1;
  result = (GRT::Float)GRT::grt_log((double const &)*arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grt_sigmoid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Float *arg1 = 0 ;
  GRT::Float temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:grt_sigmoid",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grt_sigmoid" "', argument " "1"" of type '" "GRT::Float""'");
  } 
  temp1 = static_cast< GRT::Float >(val1);
  arg1 = &temp1;
  result = (GRT::Float)GRT::grt_sigmoid((double const &)*arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Util(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Util *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Util")) SWIG_fail;
  result = (GRT::Util *)new GRT::Util();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Util, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Util(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Util *arg1 = (GRT::Util *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Util",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Util, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Util" "', argument " "1"" of type '" "GRT::Util *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Util * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_getCxx11Enabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":Util_getCxx11Enabled")) SWIG_fail;
  result = (bool)GRT::Util::getCxx11Enabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_sleep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int *arg1 = 0 ;
  unsigned int temp1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_sleep",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Util_sleep" "', argument " "1"" of type '" "unsigned int""'");
  } 
  temp1 = static_cast< unsigned int >(val1);
  arg1 = &temp1;
  result = (bool)GRT::Util::sleep((unsigned int const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_scale__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Float *arg1 = 0 ;
  GRT::Float *arg2 = 0 ;
  GRT::Float *arg3 = 0 ;
  GRT::Float *arg4 = 0 ;
  GRT::Float *arg5 = 0 ;
  bool arg6 ;
  GRT::Float temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  GRT::Float temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  GRT::Float temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  GRT::Float temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  GRT::Float temp5 ;
  double val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Util_scale",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Util_scale" "', argument " "1"" of type '" "GRT::Float""'");
  } 
  temp1 = static_cast< GRT::Float >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Util_scale" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  temp2 = static_cast< GRT::Float >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Util_scale" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  temp3 = static_cast< GRT::Float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Util_scale" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  temp4 = static_cast< GRT::Float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Util_scale" "', argument " "5"" of type '" "GRT::Float""'");
  } 
  temp5 = static_cast< GRT::Float >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Util_scale" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (GRT::Float)GRT::Util::scale((double const &)*arg1,(double const &)*arg2,(double const &)*arg3,(double const &)*arg4,(double const &)*arg5,arg6);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_scale__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Float *arg1 = 0 ;
  GRT::Float *arg2 = 0 ;
  GRT::Float *arg3 = 0 ;
  GRT::Float *arg4 = 0 ;
  GRT::Float *arg5 = 0 ;
  GRT::Float temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  GRT::Float temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  GRT::Float temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  GRT::Float temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  GRT::Float temp5 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Util_scale",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Util_scale" "', argument " "1"" of type '" "GRT::Float""'");
  } 
  temp1 = static_cast< GRT::Float >(val1);
  arg1 = &temp1;
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Util_scale" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  temp2 = static_cast< GRT::Float >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Util_scale" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  temp3 = static_cast< GRT::Float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Util_scale" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  temp4 = static_cast< GRT::Float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Util_scale" "', argument " "5"" of type '" "GRT::Float""'");
  } 
  temp5 = static_cast< GRT::Float >(val5);
  arg5 = &temp5;
  result = (GRT::Float)GRT::Util::scale((double const &)*arg1,(double const &)*arg2,(double const &)*arg3,(double const &)*arg4,(double const &)*arg5);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_timeAsString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_timeAsString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Util_timeAsString" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = GRT::Util::timeAsString(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_timeAsString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":Util_timeAsString")) SWIG_fail;
  result = GRT::Util::timeAsString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_timeAsString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_Util_timeAsString__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Util_timeAsString__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Util_timeAsString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Util::timeAsString(bool const)\n"
    "    GRT::Util::timeAsString()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Util_intToString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = 0 ;
  int temp1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_intToString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Util_intToString" "', argument " "1"" of type '" "int""'");
  } 
  temp1 = static_cast< int >(val1);
  arg1 = &temp1;
  result = GRT::Util::intToString((int const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_intToString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int *arg1 = 0 ;
  unsigned int temp1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_intToString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Util_intToString" "', argument " "1"" of type '" "unsigned int""'");
  } 
  temp1 = static_cast< unsigned int >(val1);
  arg1 = &temp1;
  result = GRT::Util::intToString((unsigned int const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_intToString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Util_intToString__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Util_intToString__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Util_intToString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Util::intToString(int const &)\n"
    "    GRT::Util::intToString(unsigned int const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Util_toString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = 0 ;
  int temp1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_toString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Util_toString" "', argument " "1"" of type '" "int""'");
  } 
  temp1 = static_cast< int >(val1);
  arg1 = &temp1;
  result = GRT::Util::toString((int const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_toString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int *arg1 = 0 ;
  unsigned int temp1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_toString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Util_toString" "', argument " "1"" of type '" "unsigned int""'");
  } 
  temp1 = static_cast< unsigned int >(val1);
  arg1 = &temp1;
  result = GRT::Util::toString((unsigned int const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_toString__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long *arg1 = 0 ;
  long temp1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_toString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Util_toString" "', argument " "1"" of type '" "long""'");
  } 
  temp1 = static_cast< long >(val1);
  arg1 = &temp1;
  result = GRT::Util::toString((long const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_toString__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned long *arg1 = 0 ;
  unsigned long temp1 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_toString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Util_toString" "', argument " "1"" of type '" "unsigned long""'");
  } 
  temp1 = static_cast< unsigned long >(val1);
  arg1 = &temp1;
  result = GRT::Util::toString((unsigned long const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_toString__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned long long *arg1 = 0 ;
  unsigned long long temp1 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_toString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Util_toString" "', argument " "1"" of type '" "unsigned long long""'");
  } 
  temp1 = static_cast< unsigned long long >(val1);
  arg1 = &temp1;
  result = GRT::Util::toString((unsigned long long const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_toString__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool *arg1 = 0 ;
  bool temp1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_toString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Util_toString" "', argument " "1"" of type '" "bool""'");
  } 
  temp1 = static_cast< bool >(val1);
  arg1 = &temp1;
  result = GRT::Util::toString((bool const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_toString__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_toString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Util_toString" "', argument " "1"" of type '" "float""'");
  } 
  temp1 = static_cast< float >(val1);
  arg1 = &temp1;
  result = GRT::Util::toString((float const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_toString__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_toString",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Util_toString" "', argument " "1"" of type '" "double""'");
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  result = GRT::Util::toString((double const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_toString__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long double *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_toString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_long_double,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_toString" "', argument " "1"" of type '" "long double const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_toString" "', argument " "1"" of type '" "long double const &""'"); 
  }
  arg1 = reinterpret_cast< long double * >(argp1);
  result = GRT::Util::toString((long double const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_toString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_long_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Util_toString__SWIG_8(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Util_toString__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Util_toString__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Util_toString__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Util_toString__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Util_toString__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Util_toString__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Util_toString__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Util_toString__SWIG_7(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Util_toString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Util::toString(int const &)\n"
    "    GRT::Util::toString(unsigned int const &)\n"
    "    GRT::Util::toString(long const &)\n"
    "    GRT::Util::toString(unsigned long const &)\n"
    "    GRT::Util::toString(unsigned long long const &)\n"
    "    GRT::Util::toString(bool const &)\n"
    "    GRT::Util::toString(float const &)\n"
    "    GRT::Util::toString(double const &)\n"
    "    GRT::Util::toString(long double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Util_stringToInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_stringToInt",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_stringToInt" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_stringToInt" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (int)GRT::Util::stringToInt((std::string const &)*arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_stringToDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_stringToDouble",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_stringToDouble" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_stringToDouble" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (double)GRT::Util::stringToDouble((std::string const &)*arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_stringToFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_stringToFloat",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_stringToFloat" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_stringToFloat" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (GRT::Float)GRT::Util::stringToFloat((std::string const &)*arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_stringToBool(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_stringToBool",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_stringToBool" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_stringToBool" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (bool)GRT::Util::stringToBool((std::string const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_stringEndsWith(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Util_stringEndsWith",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_stringEndsWith" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_stringEndsWith" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Util_stringEndsWith" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_stringEndsWith" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)GRT::Util::stringEndsWith((std::string const &)*arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_limit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Float arg1 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Util_limit",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Util_limit" "', argument " "1"" of type '" "GRT::Float""'");
  } 
  arg1 = static_cast< GRT::Float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Util_limit" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Util_limit" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  result = (GRT::Float)GRT::Util::limit(arg1,arg2,arg3);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_sum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_sum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_sum" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_sum" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  result = (GRT::Float)GRT::Util::sum((GRT::VectorFloat const &)*arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_dotProduct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Util_dotProduct",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_dotProduct" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_dotProduct" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Util_dotProduct" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_dotProduct" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (GRT::Float)GRT::Util::dotProduct((GRT::VectorFloat const &)*arg1,(GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_euclideanDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Util_euclideanDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_euclideanDistance" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_euclideanDistance" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Util_euclideanDistance" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_euclideanDistance" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (GRT::Float)GRT::Util::euclideanDistance((GRT::VectorFloat const &)*arg1,(GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_squaredEuclideanDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Util_squaredEuclideanDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_squaredEuclideanDistance" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_squaredEuclideanDistance" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Util_squaredEuclideanDistance" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_squaredEuclideanDistance" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (GRT::Float)GRT::Util::squaredEuclideanDistance((GRT::VectorFloat const &)*arg1,(GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_manhattanDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Util_manhattanDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_manhattanDistance" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_manhattanDistance" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Util_manhattanDistance" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_manhattanDistance" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (GRT::Float)GRT::Util::manhattanDistance((GRT::VectorFloat const &)*arg1,(GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_cosineDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Util_cosineDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_cosineDistance" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_cosineDistance" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Util_cosineDistance" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_cosineDistance" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (GRT::Float)GRT::Util::cosineDistance((GRT::VectorFloat const &)*arg1,(GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_scale__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = 0 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  GRT::Float arg4 ;
  GRT::Float arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Util_scale",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_scale" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_scale" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Util_scale" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Util_scale" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Util_scale" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Util_scale" "', argument " "5"" of type '" "GRT::Float""'");
  } 
  arg5 = static_cast< GRT::Float >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Util_scale" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = GRT::Util::scale((GRT::VectorFloat const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj((new GRT::VectorFloat(static_cast< const GRT::VectorFloat& >(result))), SWIGTYPE_p_GRT__VectorFloat, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_scale__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = 0 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  GRT::Float arg4 ;
  GRT::Float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Util_scale",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_scale" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_scale" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Util_scale" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Util_scale" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Util_scale" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Util_scale" "', argument " "5"" of type '" "GRT::Float""'");
  } 
  arg5 = static_cast< GRT::Float >(val5);
  result = GRT::Util::scale((GRT::VectorFloat const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new GRT::VectorFloat(static_cast< const GRT::VectorFloat& >(result))), SWIGTYPE_p_GRT__VectorFloat, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_scale__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = 0 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  GRT::Float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Util_scale",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_scale" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_scale" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Util_scale" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Util_scale" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Util_scale" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = GRT::Util::scale((GRT::VectorFloat const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new GRT::VectorFloat(static_cast< const GRT::VectorFloat& >(result))), SWIGTYPE_p_GRT__VectorFloat, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_scale__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = 0 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Util_scale",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_scale" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_scale" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Util_scale" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Util_scale" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  result = GRT::Util::scale((GRT::VectorFloat const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new GRT::VectorFloat(static_cast< const GRT::VectorFloat& >(result))), SWIGTYPE_p_GRT__VectorFloat, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_scale(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Util_scale__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Util_scale__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Util_scale__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Util_scale__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Util_scale__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Util_scale__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Util_scale'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Util::scale(GRT::Float const &,GRT::Float const &,GRT::Float const &,GRT::Float const &,GRT::Float const &,bool const)\n"
    "    GRT::Util::scale(GRT::Float const &,GRT::Float const &,GRT::Float const &,GRT::Float const &,GRT::Float const &)\n"
    "    GRT::Util::scale(GRT::VectorFloat const &,GRT::Float const,GRT::Float const,GRT::Float const,GRT::Float const,bool const)\n"
    "    GRT::Util::scale(GRT::VectorFloat const &,GRT::Float const,GRT::Float const,GRT::Float const,GRT::Float const)\n"
    "    GRT::Util::scale(GRT::VectorFloat const &,GRT::Float const,GRT::Float const,GRT::Float const)\n"
    "    GRT::Util::scale(GRT::VectorFloat const &,GRT::Float const,GRT::Float const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Util_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_normalize" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_normalize" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  result = GRT::Util::normalize((GRT::VectorFloat const &)*arg1);
  resultobj = SWIG_NewPointerObj((new GRT::VectorFloat(static_cast< const GRT::VectorFloat& >(result))), SWIGTYPE_p_GRT__VectorFloat, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_limit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = 0 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Util_limit",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_limit" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_limit" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Util_limit" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Util_limit" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  result = GRT::Util::limit((GRT::VectorFloat const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new GRT::VectorFloat(static_cast< const GRT::VectorFloat& >(result))), SWIGTYPE_p_GRT__VectorFloat, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_limit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Util_limit__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Util_limit__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Util_limit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Util::limit(GRT::Float const,GRT::Float const,GRT::Float const)\n"
    "    GRT::Util::limit(GRT::VectorFloat const &,GRT::Float const,GRT::Float const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Util_getMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_getMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_getMin" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_getMin" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  result = (GRT::Float)GRT::Util::getMin((GRT::VectorFloat const &)*arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_getMinIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_getMinIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_getMinIndex" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_getMinIndex" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  result = (unsigned int)GRT::Util::getMinIndex((GRT::VectorFloat const &)*arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_getMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_getMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_getMax" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_getMax" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  result = (GRT::Float)GRT::Util::getMax((GRT::VectorFloat const &)*arg1);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_getMaxIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_getMaxIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_getMaxIndex" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_getMaxIndex" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  result = (unsigned int)GRT::Util::getMaxIndex((GRT::VectorFloat const &)*arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_getMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_getMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_getMin" "', argument " "1"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_getMin" "', argument " "1"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int,std::allocator< unsigned int > > * >(argp1);
  result = (unsigned int)GRT::Util::getMin((std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_getMin(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Util_getMin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Util_getMin__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Util_getMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Util::getMin(GRT::VectorFloat const &)\n"
    "    GRT::Util::getMin(std::vector< unsigned int,std::allocator< unsigned int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Util_getMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Util_getMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Util_getMax" "', argument " "1"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_getMax" "', argument " "1"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int,std::allocator< unsigned int > > * >(argp1);
  result = (unsigned int)GRT::Util::getMax((std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_getMax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Util_getMax__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Util_getMax__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Util_getMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Util::getMax(GRT::VectorFloat const &)\n"
    "    GRT::Util::getMax(std::vector< unsigned int,std::allocator< unsigned int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Util_getOS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)":Util_getOS")) SWIG_fail;
  result = (unsigned int)GRT::Util::getOS();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_cartToPolar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Float arg1 ;
  GRT::Float arg2 ;
  GRT::Float *arg3 = 0 ;
  GRT::Float *arg4 = 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Util_cartToPolar",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Util_cartToPolar" "', argument " "1"" of type '" "GRT::Float""'");
  } 
  arg1 = static_cast< GRT::Float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Util_cartToPolar" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Util_cartToPolar" "', argument " "3"" of type '" "GRT::Float &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_cartToPolar" "', argument " "3"" of type '" "GRT::Float &""'"); 
  }
  arg3 = reinterpret_cast< GRT::Float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Util_cartToPolar" "', argument " "4"" of type '" "GRT::Float &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_cartToPolar" "', argument " "4"" of type '" "GRT::Float &""'"); 
  }
  arg4 = reinterpret_cast< GRT::Float * >(argp4);
  GRT::Util::cartToPolar(arg1,arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_polarToCart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Float arg1 ;
  GRT::Float arg2 ;
  GRT::Float *arg3 = 0 ;
  GRT::Float *arg4 = 0 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Util_polarToCart",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Util_polarToCart" "', argument " "1"" of type '" "GRT::Float""'");
  } 
  arg1 = static_cast< GRT::Float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Util_polarToCart" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Util_polarToCart" "', argument " "3"" of type '" "GRT::Float &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_polarToCart" "', argument " "3"" of type '" "GRT::Float &""'"); 
  }
  arg3 = reinterpret_cast< GRT::Float * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Util_polarToCart" "', argument " "4"" of type '" "GRT::Float &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_polarToCart" "', argument " "4"" of type '" "GRT::Float &""'"); 
  }
  arg4 = reinterpret_cast< GRT::Float * >(argp4);
  GRT::Util::polarToCart(arg1,arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Util_parseDirectory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Util_parseDirectory",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Util_parseDirectory" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Util_parseDirectory" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Util_parseDirectory" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Util_parseDirectory" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp3);
  result = (bool)GRT::Util::parseDirectory(arg1,arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Util_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__Util, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GRTBase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  GRT::GRTBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GRTBase",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GRTBase" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GRTBase" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (GRT::GRTBase *)new GRT::GRTBase((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GRTBase, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GRTBase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GRTBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GRTBase")) SWIG_fail;
  result = (GRT::GRTBase *)new GRT::GRTBase();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GRTBase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GRTBase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GRTBase__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GRTBase__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GRTBase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GRTBase::GRTBase(std::string const &)\n"
    "    GRT::GRTBase::GRTBase()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_GRTBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GRTBase *arg1 = (GRT::GRTBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GRTBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GRTBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GRTBase" "', argument " "1"" of type '" "GRT::GRTBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GRTBase * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GRTBase_copyGRTBaseVariables(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GRTBase *arg1 = (GRT::GRTBase *) 0 ;
  GRT::GRTBase *arg2 = (GRT::GRTBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GRTBase_copyGRTBaseVariables",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GRTBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GRTBase_copyGRTBaseVariables" "', argument " "1"" of type '" "GRT::GRTBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GRTBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__GRTBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GRTBase_copyGRTBaseVariables" "', argument " "2"" of type '" "GRT::GRTBase const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::GRTBase * >(argp2);
  result = (bool)(arg1)->copyGRTBaseVariables((GRT::GRTBase const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GRTBase_getClassType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GRTBase *arg1 = (GRT::GRTBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GRTBase_getClassType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GRTBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GRTBase_getClassType" "', argument " "1"" of type '" "GRT::GRTBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GRTBase * >(argp1);
  result = ((GRT::GRTBase const *)arg1)->getClassType();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GRTBase_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GRTBase *arg1 = (GRT::GRTBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GRTBase_getId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GRTBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GRTBase_getId" "', argument " "1"" of type '" "GRT::GRTBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GRTBase * >(argp1);
  result = ((GRT::GRTBase const *)arg1)->getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GRTBase_getLastWarningMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GRTBase *arg1 = (GRT::GRTBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GRTBase_getLastWarningMessage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GRTBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GRTBase_getLastWarningMessage" "', argument " "1"" of type '" "GRT::GRTBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GRTBase * >(argp1);
  result = ((GRT::GRTBase const *)arg1)->getLastWarningMessage();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GRTBase_getLastErrorMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GRTBase *arg1 = (GRT::GRTBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GRTBase_getLastErrorMessage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GRTBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GRTBase_getLastErrorMessage" "', argument " "1"" of type '" "GRT::GRTBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GRTBase * >(argp1);
  result = ((GRT::GRTBase const *)arg1)->getLastErrorMessage();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GRTBase_getLastInfoMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GRTBase *arg1 = (GRT::GRTBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GRTBase_getLastInfoMessage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GRTBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GRTBase_getLastInfoMessage" "', argument " "1"" of type '" "GRT::GRTBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GRTBase * >(argp1);
  result = ((GRT::GRTBase const *)arg1)->getLastInfoMessage();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GRTBase_setInfoLoggingEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GRTBase *arg1 = (GRT::GRTBase *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GRTBase_setInfoLoggingEnabled",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GRTBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GRTBase_setInfoLoggingEnabled" "', argument " "1"" of type '" "GRT::GRTBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GRTBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GRTBase_setInfoLoggingEnabled" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setInfoLoggingEnabled(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GRTBase_setWarningLoggingEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GRTBase *arg1 = (GRT::GRTBase *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GRTBase_setWarningLoggingEnabled",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GRTBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GRTBase_setWarningLoggingEnabled" "', argument " "1"" of type '" "GRT::GRTBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GRTBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GRTBase_setWarningLoggingEnabled" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setWarningLoggingEnabled(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GRTBase_setErrorLoggingEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GRTBase *arg1 = (GRT::GRTBase *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GRTBase_setErrorLoggingEnabled",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GRTBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GRTBase_setErrorLoggingEnabled" "', argument " "1"" of type '" "GRT::GRTBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GRTBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GRTBase_setErrorLoggingEnabled" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setErrorLoggingEnabled(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GRTBase_setDebugLoggingEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GRTBase *arg1 = (GRT::GRTBase *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GRTBase_setDebugLoggingEnabled",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GRTBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GRTBase_setDebugLoggingEnabled" "', argument " "1"" of type '" "GRT::GRTBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GRTBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GRTBase_setDebugLoggingEnabled" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setDebugLoggingEnabled(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GRTBase_getGRTVersion__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GRTBase_getGRTVersion",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GRTBase_getGRTVersion" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = GRT::GRTBase::getGRTVersion(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GRTBase_getGRTVersion__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":GRTBase_getGRTVersion")) SWIG_fail;
  result = GRT::GRTBase::getGRTVersion();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GRTBase_getGRTVersion(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_GRTBase_getGRTVersion__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_GRTBase_getGRTVersion__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GRTBase_getGRTVersion'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GRTBase::getGRTVersion(bool)\n"
    "    GRT::GRTBase::getGRTVersion()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GRTBase_getGRTRevison(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":GRTBase_getGRTRevison")) SWIG_fail;
  result = GRT::GRTBase::getGRTRevison();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GRTBase_getGRTBasePointer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GRTBase *arg1 = (GRT::GRTBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::GRTBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GRTBase_getGRTBasePointer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GRTBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GRTBase_getGRTBasePointer" "', argument " "1"" of type '" "GRT::GRTBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GRTBase * >(argp1);
  result = (GRT::GRTBase *)(arg1)->getGRTBasePointer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GRTBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GRTBase_getGRTBasePointer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GRTBase *arg1 = (GRT::GRTBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::GRTBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GRTBase_getGRTBasePointer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GRTBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GRTBase_getGRTBasePointer" "', argument " "1"" of type '" "GRT::GRTBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GRTBase * >(argp1);
  result = (GRT::GRTBase *)((GRT::GRTBase const *)arg1)->getGRTBasePointer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GRTBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GRTBase_getGRTBasePointer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GRTBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GRTBase_getGRTBasePointer__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GRTBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GRTBase_getGRTBasePointer__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GRTBase_getGRTBasePointer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GRTBase::getGRTBasePointer()\n"
    "    GRT::GRTBase::getGRTBasePointer() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GRTBase_scale__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GRTBase *arg1 = (GRT::GRTBase *) 0 ;
  GRT::Float *arg2 = 0 ;
  GRT::Float *arg3 = 0 ;
  GRT::Float *arg4 = 0 ;
  GRT::Float *arg5 = 0 ;
  GRT::Float *arg6 = 0 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GRT::Float temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  GRT::Float temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  GRT::Float temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  GRT::Float temp5 ;
  double val5 ;
  int ecode5 = 0 ;
  GRT::Float temp6 ;
  double val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:GRTBase_scale",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GRTBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GRTBase_scale" "', argument " "1"" of type '" "GRT::GRTBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GRTBase * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GRTBase_scale" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  temp2 = static_cast< GRT::Float >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GRTBase_scale" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  temp3 = static_cast< GRT::Float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GRTBase_scale" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  temp4 = static_cast< GRT::Float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GRTBase_scale" "', argument " "5"" of type '" "GRT::Float""'");
  } 
  temp5 = static_cast< GRT::Float >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "GRTBase_scale" "', argument " "6"" of type '" "GRT::Float""'");
  } 
  temp6 = static_cast< GRT::Float >(val6);
  arg6 = &temp6;
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "GRTBase_scale" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  result = (GRT::Float)(arg1)->scale((GRT::Float const &)*arg2,(GRT::Float const &)*arg3,(GRT::Float const &)*arg4,(GRT::Float const &)*arg5,(GRT::Float const &)*arg6,arg7);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GRTBase_scale__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GRTBase *arg1 = (GRT::GRTBase *) 0 ;
  GRT::Float *arg2 = 0 ;
  GRT::Float *arg3 = 0 ;
  GRT::Float *arg4 = 0 ;
  GRT::Float *arg5 = 0 ;
  GRT::Float *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GRT::Float temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  GRT::Float temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  GRT::Float temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  GRT::Float temp5 ;
  double val5 ;
  int ecode5 = 0 ;
  GRT::Float temp6 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:GRTBase_scale",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GRTBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GRTBase_scale" "', argument " "1"" of type '" "GRT::GRTBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GRTBase * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GRTBase_scale" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  temp2 = static_cast< GRT::Float >(val2);
  arg2 = &temp2;
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GRTBase_scale" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  temp3 = static_cast< GRT::Float >(val3);
  arg3 = &temp3;
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GRTBase_scale" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  temp4 = static_cast< GRT::Float >(val4);
  arg4 = &temp4;
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GRTBase_scale" "', argument " "5"" of type '" "GRT::Float""'");
  } 
  temp5 = static_cast< GRT::Float >(val5);
  arg5 = &temp5;
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "GRTBase_scale" "', argument " "6"" of type '" "GRT::Float""'");
  } 
  temp6 = static_cast< GRT::Float >(val6);
  arg6 = &temp6;
  result = (GRT::Float)(arg1)->scale((GRT::Float const &)*arg2,(GRT::Float const &)*arg3,(GRT::Float const &)*arg4,(GRT::Float const &)*arg5,(GRT::Float const &)*arg6);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GRTBase_scale(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GRTBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_GRTBase_scale__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GRTBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_GRTBase_scale__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GRTBase_scale'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GRTBase::scale(GRT::Float const &,GRT::Float const &,GRT::Float const &,GRT::Float const &,GRT::Float const &,bool const)\n"
    "    GRT::GRTBase::scale(GRT::Float const &,GRT::Float const &,GRT::Float const &,GRT::Float const &,GRT::Float const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GRTBase_SQR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GRTBase *arg1 = (GRT::GRTBase *) 0 ;
  GRT::Float *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GRT::Float temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GRTBase_SQR",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GRTBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GRTBase_SQR" "', argument " "1"" of type '" "GRT::GRTBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GRTBase * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GRTBase_SQR" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  temp2 = static_cast< GRT::Float >(val2);
  arg2 = &temp2;
  result = (GRT::Float)((GRT::GRTBase const *)arg1)->SQR((GRT::Float const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GRTBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__GRTBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_UINTVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:UINTVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_iterator" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_UINT_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UINTVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector___nonzero__" "', argument " "1"" of type '" "std::vector< UINT > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  result = (bool)std_vector_Sl_UINT_Sg____nonzero__((std::vector< UINT > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UINTVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector___bool__" "', argument " "1"" of type '" "std::vector< UINT > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  result = (bool)std_vector_Sl_UINT_Sg____bool__((std::vector< UINT > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< UINT >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UINTVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector___len__" "', argument " "1"" of type '" "std::vector< UINT > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  result = std_vector_Sl_UINT_Sg____len__((std::vector< UINT > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  std::vector< UINT >::difference_type arg2 ;
  std::vector< UINT >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< UINT,std::allocator< UINT > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UINTVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector___getslice__" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UINTVector___getslice__" "', argument " "2"" of type '" "std::vector< UINT >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< UINT >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UINTVector___getslice__" "', argument " "3"" of type '" "std::vector< UINT >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< UINT >::difference_type >(val3);
  try {
    result = (std::vector< UINT,std::allocator< UINT > > *)std_vector_Sl_UINT_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  std::vector< UINT >::difference_type arg2 ;
  std::vector< UINT >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UINTVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector___setslice__" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UINTVector___setslice__" "', argument " "2"" of type '" "std::vector< UINT >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< UINT >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UINTVector___setslice__" "', argument " "3"" of type '" "std::vector< UINT >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< UINT >::difference_type >(val3);
  try {
    std_vector_Sl_UINT_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  std::vector< UINT >::difference_type arg2 ;
  std::vector< UINT >::difference_type arg3 ;
  std::vector< UINT,std::allocator< UINT > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:UINTVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector___setslice__" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UINTVector___setslice__" "', argument " "2"" of type '" "std::vector< UINT >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< UINT >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UINTVector___setslice__" "', argument " "3"" of type '" "std::vector< UINT >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< UINT >::difference_type >(val3);
  {
    std::vector< UINT,std::allocator< UINT > > *ptr = (std::vector< UINT,std::allocator< UINT > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "UINTVector___setslice__" "', argument " "4"" of type '" "std::vector< UINT,std::allocator< UINT > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UINTVector___setslice__" "', argument " "4"" of type '" "std::vector< UINT,std::allocator< UINT > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_UINT_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< UINT,std::allocator< UINT > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< UINT,std::allocator< UINT > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_UINTVector___setslice____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< UINT,std::allocator< UINT > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< UINT,std::allocator< UINT > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_UINTVector___setslice____SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UINTVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< UINT >::__setslice__(std::vector< UINT >::difference_type,std::vector< UINT >::difference_type)\n"
    "    std::vector< UINT >::__setslice__(std::vector< UINT >::difference_type,std::vector< UINT >::difference_type,std::vector< UINT,std::allocator< UINT > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UINTVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  std::vector< UINT >::difference_type arg2 ;
  std::vector< UINT >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UINTVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector___delslice__" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UINTVector___delslice__" "', argument " "2"" of type '" "std::vector< UINT >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< UINT >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UINTVector___delslice__" "', argument " "3"" of type '" "std::vector< UINT >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< UINT >::difference_type >(val3);
  try {
    std_vector_Sl_UINT_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  std::vector< UINT >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UINTVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector___delitem__" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UINTVector___delitem__" "', argument " "2"" of type '" "std::vector< UINT >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< UINT >::difference_type >(val2);
  try {
    std_vector_Sl_UINT_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< UINT,std::allocator< UINT > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UINTVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector___getitem__" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UINTVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< UINT,std::allocator< UINT > > *)std_vector_Sl_UINT_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< UINT,std::allocator< UINT > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UINTVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector___setitem__" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UINTVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector< UINT,std::allocator< UINT > > *ptr = (std::vector< UINT,std::allocator< UINT > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UINTVector___setitem__" "', argument " "3"" of type '" "std::vector< UINT,std::allocator< UINT > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UINTVector___setitem__" "', argument " "3"" of type '" "std::vector< UINT,std::allocator< UINT > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_UINT_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< UINT,std::allocator< UINT > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UINTVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector___setitem__" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UINTVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_UINT_Sg____setitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UINTVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector___delitem__" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UINTVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_UINT_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< UINT,std::allocator< UINT > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_UINTVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< UINT,std::allocator< UINT > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UINTVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UINTVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< UINT >::__delitem__(std::vector< UINT >::difference_type)\n"
    "    std::vector< UINT >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UINTVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  std::vector< UINT >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< UINT >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UINTVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector___getitem__" "', argument " "1"" of type '" "std::vector< UINT > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UINTVector___getitem__" "', argument " "2"" of type '" "std::vector< UINT >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< UINT >::difference_type >(val2);
  try {
    result = (std::vector< UINT >::value_type *) &std_vector_Sl_UINT_Sg____getitem____SWIG_1((std::vector< UINT > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_UINT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< UINT,std::allocator< UINT > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_UINTVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< UINT,std::allocator< UINT > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UINTVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UINTVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< UINT >::__getitem__(PySliceObject *)\n"
    "    std::vector< UINT >::__getitem__(std::vector< UINT >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UINTVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  std::vector< UINT >::difference_type arg2 ;
  std::vector< UINT >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UINTVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector___setitem__" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UINTVector___setitem__" "', argument " "2"" of type '" "std::vector< UINT >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< UINT >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_UINT,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UINTVector___setitem__" "', argument " "3"" of type '" "std::vector< UINT >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UINTVector___setitem__" "', argument " "3"" of type '" "std::vector< UINT >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< UINT >::value_type * >(argp3);
  try {
    std_vector_Sl_UINT_Sg____setitem____SWIG_2(arg1,arg2,(UINT const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< UINT,std::allocator< UINT > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_UINTVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< UINT,std::allocator< UINT > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< UINT,std::allocator< UINT > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_UINTVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< UINT,std::allocator< UINT > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_UINT, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_UINTVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UINTVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< UINT >::__setitem__(PySliceObject *,std::vector< UINT,std::allocator< UINT > > const &)\n"
    "    std::vector< UINT >::__setitem__(PySliceObject *)\n"
    "    std::vector< UINT >::__setitem__(std::vector< UINT >::difference_type,std::vector< UINT >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UINTVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< UINT >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UINTVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_pop" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  try {
    result = std_vector_Sl_UINT_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  std::vector< UINT >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UINTVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_append" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UINT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UINTVector_append" "', argument " "2"" of type '" "std::vector< UINT >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UINTVector_append" "', argument " "2"" of type '" "std::vector< UINT >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< UINT >::value_type * >(argp2);
  std_vector_Sl_UINT_Sg__append(arg1,(UINT const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UINTVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UINTVector")) SWIG_fail;
  result = (std::vector< UINT > *)new std::vector< UINT >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UINTVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< UINT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UINTVector",&obj0)) SWIG_fail;
  {
    std::vector< UINT,std::allocator< UINT > > *ptr = (std::vector< UINT,std::allocator< UINT > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UINTVector" "', argument " "1"" of type '" "std::vector< UINT > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UINTVector" "', argument " "1"" of type '" "std::vector< UINT > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< UINT > *)new std::vector< UINT >((std::vector< UINT > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UINTVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_empty" "', argument " "1"" of type '" "std::vector< UINT > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  result = (bool)((std::vector< UINT > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< UINT >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UINTVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_size" "', argument " "1"" of type '" "std::vector< UINT > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  result = ((std::vector< UINT > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  std::vector< UINT > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UINTVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_swap" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UINTVector_swap" "', argument " "2"" of type '" "std::vector< UINT > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UINTVector_swap" "', argument " "2"" of type '" "std::vector< UINT > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< UINT > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< UINT >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UINTVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_begin" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< UINT >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< UINT >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UINTVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_end" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< UINT >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< UINT >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UINTVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_rbegin" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< UINT >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< UINT >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UINTVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_rend" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< UINT >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UINTVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_clear" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< UINT > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UINTVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_get_allocator" "', argument " "1"" of type '" "std::vector< UINT > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  result = ((std::vector< UINT > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< UINT >::allocator_type(static_cast< const std::vector< UINT >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_UINT_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UINTVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< UINT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_UINTVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UINTVector" "', argument " "1"" of type '" "std::vector< UINT >::size_type""'");
  } 
  arg1 = static_cast< std::vector< UINT >::size_type >(val1);
  result = (std::vector< UINT > *)new std::vector< UINT >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UINTVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_pop_back" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  std::vector< UINT >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UINTVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_resize" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UINTVector_resize" "', argument " "2"" of type '" "std::vector< UINT >::size_type""'");
  } 
  arg2 = static_cast< std::vector< UINT >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  std::vector< UINT >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< UINT >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UINTVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_erase" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UINTVector_erase" "', argument " "2"" of type '" "std::vector< UINT >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< UINT >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< UINT >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UINTVector_erase" "', argument " "2"" of type '" "std::vector< UINT >::iterator""'");
    }
  }
  result = std_vector_Sl_UINT_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< UINT >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  std::vector< UINT >::iterator arg2 ;
  std::vector< UINT >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< UINT >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UINTVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_erase" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UINTVector_erase" "', argument " "2"" of type '" "std::vector< UINT >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< UINT >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< UINT >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UINTVector_erase" "', argument " "2"" of type '" "std::vector< UINT >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UINTVector_erase" "', argument " "3"" of type '" "std::vector< UINT >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< UINT >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< UINT >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UINTVector_erase" "', argument " "3"" of type '" "std::vector< UINT >::iterator""'");
    }
  }
  result = std_vector_Sl_UINT_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< UINT >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< UINT,std::allocator< UINT > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< UINT >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_UINTVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< UINT,std::allocator< UINT > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< UINT >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< UINT >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_UINTVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UINTVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< UINT >::erase(std::vector< UINT >::iterator)\n"
    "    std::vector< UINT >::erase(std::vector< UINT >::iterator,std::vector< UINT >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_UINTVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT >::size_type arg1 ;
  std::vector< UINT >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< UINT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_UINTVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UINTVector" "', argument " "1"" of type '" "std::vector< UINT >::size_type""'");
  } 
  arg1 = static_cast< std::vector< UINT >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UINT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_UINTVector" "', argument " "2"" of type '" "std::vector< UINT >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UINTVector" "', argument " "2"" of type '" "std::vector< UINT >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< UINT >::value_type * >(argp2);
  result = (std::vector< UINT > *)new std::vector< UINT >(arg1,(std::vector< UINT >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UINTVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_UINTVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_UINTVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< UINT,std::allocator< UINT > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_UINTVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_UINT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_UINTVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_UINTVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< UINT >::vector()\n"
    "    std::vector< UINT >::vector(std::vector< UINT > const &)\n"
    "    std::vector< UINT >::vector(std::vector< UINT >::size_type)\n"
    "    std::vector< UINT >::vector(std::vector< UINT >::size_type,std::vector< UINT >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UINTVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  std::vector< UINT >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UINTVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_push_back" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UINT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UINTVector_push_back" "', argument " "2"" of type '" "std::vector< UINT >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UINTVector_push_back" "', argument " "2"" of type '" "std::vector< UINT >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< UINT >::value_type * >(argp2);
  (arg1)->push_back((std::vector< UINT >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< UINT >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UINTVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_front" "', argument " "1"" of type '" "std::vector< UINT > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  result = (std::vector< UINT >::value_type *) &((std::vector< UINT > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_UINT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< UINT >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UINTVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_back" "', argument " "1"" of type '" "std::vector< UINT > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  result = (std::vector< UINT >::value_type *) &((std::vector< UINT > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_UINT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  std::vector< UINT >::size_type arg2 ;
  std::vector< UINT >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UINTVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_assign" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UINTVector_assign" "', argument " "2"" of type '" "std::vector< UINT >::size_type""'");
  } 
  arg2 = static_cast< std::vector< UINT >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_UINT,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UINTVector_assign" "', argument " "3"" of type '" "std::vector< UINT >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UINTVector_assign" "', argument " "3"" of type '" "std::vector< UINT >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< UINT >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< UINT >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  std::vector< UINT >::size_type arg2 ;
  std::vector< UINT >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UINTVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_resize" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UINTVector_resize" "', argument " "2"" of type '" "std::vector< UINT >::size_type""'");
  } 
  arg2 = static_cast< std::vector< UINT >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_UINT,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UINTVector_resize" "', argument " "3"" of type '" "std::vector< UINT >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UINTVector_resize" "', argument " "3"" of type '" "std::vector< UINT >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< UINT >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< UINT >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< UINT,std::allocator< UINT > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_UINTVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< UINT,std::allocator< UINT > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_UINT, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_UINTVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UINTVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< UINT >::resize(std::vector< UINT >::size_type)\n"
    "    std::vector< UINT >::resize(std::vector< UINT >::size_type,std::vector< UINT >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UINTVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  std::vector< UINT >::iterator arg2 ;
  std::vector< UINT >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< UINT >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UINTVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_insert" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UINTVector_insert" "', argument " "2"" of type '" "std::vector< UINT >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< UINT >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< UINT >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UINTVector_insert" "', argument " "2"" of type '" "std::vector< UINT >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_UINT,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "UINTVector_insert" "', argument " "3"" of type '" "std::vector< UINT >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UINTVector_insert" "', argument " "3"" of type '" "std::vector< UINT >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< UINT >::value_type * >(argp3);
  result = std_vector_Sl_UINT_Sg__insert__SWIG_0(arg1,arg2,(UINT const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< UINT >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  std::vector< UINT >::iterator arg2 ;
  std::vector< UINT >::size_type arg3 ;
  std::vector< UINT >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:UINTVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_insert" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UINTVector_insert" "', argument " "2"" of type '" "std::vector< UINT >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< UINT >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< UINT >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UINTVector_insert" "', argument " "2"" of type '" "std::vector< UINT >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UINTVector_insert" "', argument " "3"" of type '" "std::vector< UINT >::size_type""'");
  } 
  arg3 = static_cast< std::vector< UINT >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_UINT,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "UINTVector_insert" "', argument " "4"" of type '" "std::vector< UINT >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UINTVector_insert" "', argument " "4"" of type '" "std::vector< UINT >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< UINT >::value_type * >(argp4);
  std_vector_Sl_UINT_Sg__insert__SWIG_1(arg1,arg2,arg3,(UINT const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< UINT,std::allocator< UINT > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< UINT >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_UINT, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_UINTVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< UINT,std::allocator< UINT > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< UINT >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_UINT, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_UINTVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'UINTVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< UINT >::insert(std::vector< UINT >::iterator,std::vector< UINT >::value_type const &)\n"
    "    std::vector< UINT >::insert(std::vector< UINT >::iterator,std::vector< UINT >::size_type,std::vector< UINT >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UINTVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  std::vector< UINT >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UINTVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_reserve" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UINTVector_reserve" "', argument " "2"" of type '" "std::vector< UINT >::size_type""'");
  } 
  arg2 = static_cast< std::vector< UINT >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UINTVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< UINT >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UINTVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UINTVector_capacity" "', argument " "1"" of type '" "std::vector< UINT > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  result = ((std::vector< UINT > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UINTVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT > *arg1 = (std::vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UINTVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UINTVector" "', argument " "1"" of type '" "std::vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< UINT > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UINTVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VectorTUINT__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< UINT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorTUINT",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorTUINT" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (GRT::Vector< UINT > *)new GRT::Vector< UINT >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorT_UINT_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorTUINT__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< UINT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorTUINT")) SWIG_fail;
  result = (GRT::Vector< UINT > *)new GRT::Vector< UINT >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorT_UINT_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorTUINT__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  UINT *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Vector< UINT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorTUINT",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorTUINT" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UINT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_VectorTUINT" "', argument " "2"" of type '" "UINT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorTUINT" "', argument " "2"" of type '" "UINT const &""'"); 
  }
  arg2 = reinterpret_cast< UINT * >(argp2);
  result = (GRT::Vector< UINT > *)new GRT::Vector< UINT >(arg1,(UINT const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorT_UINT_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorTUINT__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< UINT > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< UINT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorTUINT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorT_UINT_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorTUINT" "', argument " "1"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorTUINT" "', argument " "1"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< UINT > * >(argp1);
  result = (GRT::Vector< UINT > *)new GRT::Vector< UINT >((GRT::Vector< UINT > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorT_UINT_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorTUINT__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< UINT,std::allocator< UINT > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  GRT::Vector< UINT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorTUINT",&obj0)) SWIG_fail;
  {
    std::vector< UINT,std::allocator< UINT > > *ptr = (std::vector< UINT,std::allocator< UINT > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorTUINT" "', argument " "1"" of type '" "std::vector< UINT,std::allocator< UINT > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorTUINT" "', argument " "1"" of type '" "std::vector< UINT,std::allocator< UINT > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (GRT::Vector< UINT > *)new GRT::Vector< UINT >((std::vector< UINT,std::allocator< UINT > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorT_UINT_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorTUINT(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorTUINT__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__VectorT_UINT_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorTUINT__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorTUINT__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< UINT,std::allocator< UINT > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorTUINT__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_UINT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_VectorTUINT__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorTUINT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Vector< UINT >::Vector(unsigned int const)\n"
    "    GRT::Vector< UINT >::Vector()\n"
    "    GRT::Vector< UINT >::Vector(unsigned int const,UINT const &)\n"
    "    GRT::Vector< UINT >::Vector(GRT::Vector< UINT > const &)\n"
    "    GRT::Vector< UINT >::Vector(std::vector< UINT,std::allocator< UINT > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VectorTUINT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< UINT > *arg1 = (GRT::Vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorTUINT",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorT_UINT_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorTUINT" "', argument " "1"" of type '" "GRT::Vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< UINT > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTUINT_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< UINT > *arg1 = (GRT::Vector< UINT > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorTUINT_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorT_UINT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTUINT_resize" "', argument " "1"" of type '" "GRT::Vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< UINT > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorTUINT_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (bool)(arg1)->resize(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTUINT_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< UINT > *arg1 = (GRT::Vector< UINT > *) 0 ;
  unsigned int arg2 ;
  UINT *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorTUINT_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorT_UINT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTUINT_resize" "', argument " "1"" of type '" "GRT::Vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< UINT > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorTUINT_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_UINT,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VectorTUINT_resize" "', argument " "3"" of type '" "UINT const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorTUINT_resize" "', argument " "3"" of type '" "UINT const &""'"); 
  }
  arg3 = reinterpret_cast< UINT * >(argp3);
  result = (bool)(arg1)->resize(arg2,(UINT const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTUINT_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__VectorT_UINT_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorTUINT_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__VectorT_UINT_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_UINT, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VectorTUINT_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorTUINT_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Vector< UINT >::resize(unsigned int const)\n"
    "    GRT::Vector< UINT >::resize(unsigned int const,UINT const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorTUINT_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< UINT > *arg1 = (GRT::Vector< UINT > *) 0 ;
  GRT::Vector< UINT > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorTUINT_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorT_UINT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTUINT_copy" "', argument " "1"" of type '" "GRT::Vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< UINT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_UINT_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorTUINT_copy" "', argument " "2"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorTUINT_copy" "', argument " "2"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< UINT > * >(argp2);
  result = (bool)(arg1)->copy((GRT::Vector< UINT > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTUINT_fill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< UINT > *arg1 = (GRT::Vector< UINT > *) 0 ;
  UINT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorTUINT_fill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorT_UINT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTUINT_fill" "', argument " "1"" of type '" "GRT::Vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< UINT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UINT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorTUINT_fill" "', argument " "2"" of type '" "UINT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorTUINT_fill" "', argument " "2"" of type '" "UINT const &""'"); 
  }
  arg2 = reinterpret_cast< UINT * >(argp2);
  result = (bool)(arg1)->fill((UINT const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTUINT_setAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< UINT > *arg1 = (GRT::Vector< UINT > *) 0 ;
  UINT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorTUINT_setAll",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorT_UINT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTUINT_setAll" "', argument " "1"" of type '" "GRT::Vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< UINT > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UINT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorTUINT_setAll" "', argument " "2"" of type '" "UINT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorTUINT_setAll" "', argument " "2"" of type '" "UINT const &""'"); 
  }
  arg2 = reinterpret_cast< UINT * >(argp2);
  result = (bool)(arg1)->setAll((UINT const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTUINT_getSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< UINT > *arg1 = (GRT::Vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTUINT_getSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorT_UINT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTUINT_getSize" "', argument " "1"" of type '" "GRT::Vector< UINT > const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< UINT > * >(argp1);
  result = ((GRT::Vector< UINT > const *)arg1)->getSize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTUINT_getData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< UINT > *arg1 = (GRT::Vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTUINT_getData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorT_UINT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTUINT_getData" "', argument " "1"" of type '" "GRT::Vector< UINT > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< UINT > * >(argp1);
  result = (UINT *)(arg1)->getData();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_UINT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTUINT_getData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< UINT > *arg1 = (GRT::Vector< UINT > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTUINT_getData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorT_UINT_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTUINT_getData" "', argument " "1"" of type '" "GRT::Vector< UINT > const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< UINT > * >(argp1);
  result = (UINT *)((GRT::Vector< UINT > const *)arg1)->getData();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_UINT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTUINT_getData(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__VectorT_UINT_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VectorTUINT_getData__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__VectorT_UINT_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VectorTUINT_getData__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorTUINT_getData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Vector< UINT >::getData()\n"
    "    GRT::Vector< UINT >::getData() const\n");
  return 0;
}


SWIGINTERN PyObject *VectorTUINT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__VectorT_UINT_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VectorTFloat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< Float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorTFloat",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorTFloat" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (GRT::Vector< Float > *)new GRT::Vector< Float >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorT_GRT__Float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorTFloat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< Float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorTFloat")) SWIG_fail;
  result = (GRT::Vector< Float > *)new GRT::Vector< Float >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorT_GRT__Float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorTFloat__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  double *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Vector< Float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorTFloat",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorTFloat" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VectorTFloat" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (GRT::Vector< Float > *)new GRT::Vector< Float >(arg1,(double const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorT_GRT__Float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorTFloat__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< GRT::Float > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< Float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorTFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorTFloat" "', argument " "1"" of type '" "GRT::Vector< GRT::Float > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorTFloat" "', argument " "1"" of type '" "GRT::Vector< GRT::Float > const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< GRT::Float > * >(argp1);
  result = (GRT::Vector< Float > *)new GRT::Vector< Float >((GRT::Vector< GRT::Float > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorT_GRT__Float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorTFloat__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  GRT::Vector< Float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorTFloat",&obj0)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorTFloat" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorTFloat" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (GRT::Vector< Float > *)new GRT::Vector< Float >((std::vector< double,std::allocator< double > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorT_GRT__Float_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorTFloat(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorTFloat__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__VectorT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorTFloat__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorTFloat__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorTFloat__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_VectorTFloat__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorTFloat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Vector< Float >::Vector(unsigned int const)\n"
    "    GRT::Vector< Float >::Vector()\n"
    "    GRT::Vector< Float >::Vector(unsigned int const,double const &)\n"
    "    GRT::Vector< Float >::Vector(GRT::Vector< GRT::Float > const &)\n"
    "    GRT::Vector< Float >::Vector(std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VectorTFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< Float > *arg1 = (GRT::Vector< Float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorTFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorT_GRT__Float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorTFloat" "', argument " "1"" of type '" "GRT::Vector< Float > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< Float > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTFloat_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< Float > *arg1 = (GRT::Vector< Float > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorTFloat_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTFloat_resize" "', argument " "1"" of type '" "GRT::Vector< Float > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< Float > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorTFloat_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (bool)(arg1)->resize(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTFloat_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< Float > *arg1 = (GRT::Vector< Float > *) 0 ;
  unsigned int arg2 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorTFloat_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTFloat_resize" "', argument " "1"" of type '" "GRT::Vector< Float > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< Float > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorTFloat_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorTFloat_resize" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  result = (bool)(arg1)->resize(arg2,(double const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTFloat_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__VectorT_GRT__Float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorTFloat_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__VectorT_GRT__Float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorTFloat_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorTFloat_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Vector< Float >::resize(unsigned int const)\n"
    "    GRT::Vector< Float >::resize(unsigned int const,double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorTFloat_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< Float > *arg1 = (GRT::Vector< Float > *) 0 ;
  GRT::Vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorTFloat_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTFloat_copy" "', argument " "1"" of type '" "GRT::Vector< Float > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< Float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorTFloat_copy" "', argument " "2"" of type '" "GRT::Vector< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorTFloat_copy" "', argument " "2"" of type '" "GRT::Vector< double > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< double > * >(argp2);
  result = (bool)(arg1)->copy((GRT::Vector< double > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTFloat_fill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< Float > *arg1 = (GRT::Vector< Float > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorTFloat_fill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTFloat_fill" "', argument " "1"" of type '" "GRT::Vector< Float > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< Float > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorTFloat_fill" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (bool)(arg1)->fill((double const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTFloat_setAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< Float > *arg1 = (GRT::Vector< Float > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorTFloat_setAll",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTFloat_setAll" "', argument " "1"" of type '" "GRT::Vector< Float > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< Float > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorTFloat_setAll" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (bool)(arg1)->setAll((double const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTFloat_getSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< Float > *arg1 = (GRT::Vector< Float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTFloat_getSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTFloat_getSize" "', argument " "1"" of type '" "GRT::Vector< Float > const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< Float > * >(argp1);
  result = ((GRT::Vector< Float > const *)arg1)->getSize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTFloat_getData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< Float > *arg1 = (GRT::Vector< Float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTFloat_getData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTFloat_getData" "', argument " "1"" of type '" "GRT::Vector< Float > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< Float > * >(argp1);
  result = (double *)(arg1)->getData();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTFloat_getData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< Float > *arg1 = (GRT::Vector< Float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorTFloat_getData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorTFloat_getData" "', argument " "1"" of type '" "GRT::Vector< Float > const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< Float > * >(argp1);
  result = (double *)((GRT::Vector< Float > const *)arg1)->getData();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorTFloat_getData(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__VectorT_GRT__Float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VectorTFloat_getData__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__VectorT_GRT__Float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VectorTFloat_getData__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorTFloat_getData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Vector< Float >::getData()\n"
    "    GRT::Vector< Float >::getData() const\n");
  return 0;
}


SWIGINTERN PyObject *VectorTFloat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__VectorT_GRT__Float_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VectorFloat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_VectorFloat")) SWIG_fail;
  result = (GRT::VectorFloat *)new GRT::VectorFloat();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorFloat, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorFloat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GRT::Float,std::allocator< GRT::Float > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorFloat",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorFloat" "', argument " "1"" of type '" "std::vector< GRT::Float,std::allocator< GRT::Float > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< GRT::Float,std::allocator< GRT::Float > >::size_type >(val1);
  result = (GRT::VectorFloat *)new GRT::VectorFloat(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorFloat, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorFloat__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GRT::Float,std::allocator< GRT::Float > >::size_type arg1 ;
  GRT::Float *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  GRT::Float temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::VectorFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_VectorFloat",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorFloat" "', argument " "1"" of type '" "std::vector< GRT::Float,std::allocator< GRT::Float > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< GRT::Float,std::allocator< GRT::Float > >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VectorFloat" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  temp2 = static_cast< GRT::Float >(val2);
  arg2 = &temp2;
  result = (GRT::VectorFloat *)new GRT::VectorFloat(arg1,(GRT::Float const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorFloat, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorFloat__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_VectorFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorFloat" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_VectorFloat" "', argument " "1"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  result = (GRT::VectorFloat *)new GRT::VectorFloat((GRT::VectorFloat const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorFloat, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VectorFloat(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VectorFloat__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VectorFloat__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorFloat__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_VectorFloat__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VectorFloat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::VectorFloat::VectorFloat()\n"
    "    GRT::VectorFloat::VectorFloat(std::vector< GRT::Float,std::allocator< GRT::Float > >::size_type const)\n"
    "    GRT::VectorFloat::VectorFloat(std::vector< GRT::Float,std::allocator< GRT::Float > >::size_type const,GRT::Float const &)\n"
    "    GRT::VectorFloat::VectorFloat(GRT::VectorFloat const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VectorFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = (GRT::VectorFloat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_VectorFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorFloat, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorFloat" "', argument " "1"" of type '" "GRT::VectorFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorFloat_save(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = (GRT::VectorFloat *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorFloat_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorFloat_save" "', argument " "1"" of type '" "GRT::VectorFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorFloat_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorFloat_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::VectorFloat const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorFloat_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = (GRT::VectorFloat *) 0 ;
  std::string *arg2 = 0 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorFloat_load",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorFloat_load" "', argument " "1"" of type '" "GRT::VectorFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorFloat_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorFloat_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorFloat_load" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  result = (bool)(arg1)->load((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorFloat_load__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = (GRT::VectorFloat *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorFloat_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorFloat_load" "', argument " "1"" of type '" "GRT::VectorFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VectorFloat_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VectorFloat_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorFloat_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorFloat_load__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorFloat_load__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorFloat_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::VectorFloat::load(std::string const &,char const)\n"
    "    GRT::VectorFloat::load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorFloat__print__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = (GRT::VectorFloat *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:VectorFloat__print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorFloat__print" "', argument " "1"" of type '" "GRT::VectorFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "VectorFloat__print" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)((GRT::VectorFloat const *)arg1)->print(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorFloat__print__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = (GRT::VectorFloat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorFloat__print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorFloat__print" "', argument " "1"" of type '" "GRT::VectorFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  result = (bool)((GRT::VectorFloat const *)arg1)->print();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorFloat__print(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VectorFloat__print__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VectorFloat__print__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorFloat__print'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::VectorFloat::print(std::string const) const\n"
    "    GRT::VectorFloat::print() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorFloat_scale__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = (GRT::VectorFloat *) 0 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:VectorFloat_scale",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorFloat_scale" "', argument " "1"" of type '" "GRT::VectorFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorFloat_scale" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorFloat_scale" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VectorFloat_scale" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)(arg1)->scale(arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorFloat_scale__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = (GRT::VectorFloat *) 0 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:VectorFloat_scale",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorFloat_scale" "', argument " "1"" of type '" "GRT::VectorFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorFloat_scale" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorFloat_scale" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  result = (bool)(arg1)->scale(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorFloat_scale__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = (GRT::VectorFloat *) 0 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  GRT::Float arg4 ;
  GRT::Float arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:VectorFloat_scale",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorFloat_scale" "', argument " "1"" of type '" "GRT::VectorFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorFloat_scale" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorFloat_scale" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VectorFloat_scale" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VectorFloat_scale" "', argument " "5"" of type '" "GRT::Float""'");
  } 
  arg5 = static_cast< GRT::Float >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "VectorFloat_scale" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (bool)(arg1)->scale(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorFloat_scale__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = (GRT::VectorFloat *) 0 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  GRT::Float arg4 ;
  GRT::Float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:VectorFloat_scale",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorFloat_scale" "', argument " "1"" of type '" "GRT::VectorFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorFloat_scale" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorFloat_scale" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VectorFloat_scale" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "VectorFloat_scale" "', argument " "5"" of type '" "GRT::Float""'");
  } 
  arg5 = static_cast< GRT::Float >(val5);
  result = (bool)(arg1)->scale(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorFloat_scale(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VectorFloat_scale__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VectorFloat_scale__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_VectorFloat_scale__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_VectorFloat_scale__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VectorFloat_scale'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::VectorFloat::scale(GRT::Float const,GRT::Float const,bool const)\n"
    "    GRT::VectorFloat::scale(GRT::Float const,GRT::Float const)\n"
    "    GRT::VectorFloat::scale(GRT::Float const,GRT::Float const,GRT::Float const,GRT::Float const,bool const)\n"
    "    GRT::VectorFloat::scale(GRT::Float const,GRT::Float const,GRT::Float const,GRT::Float const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VectorFloat_getMinValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = (GRT::VectorFloat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorFloat_getMinValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorFloat_getMinValue" "', argument " "1"" of type '" "GRT::VectorFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  result = (GRT::Float)((GRT::VectorFloat const *)arg1)->getMinValue();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorFloat_getMaxValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = (GRT::VectorFloat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorFloat_getMaxValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorFloat_getMaxValue" "', argument " "1"" of type '" "GRT::VectorFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  result = (GRT::Float)((GRT::VectorFloat const *)arg1)->getMaxValue();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorFloat_getMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = (GRT::VectorFloat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorFloat_getMean",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorFloat_getMean" "', argument " "1"" of type '" "GRT::VectorFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  result = (GRT::Float)((GRT::VectorFloat const *)arg1)->getMean();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorFloat_getStdDev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = (GRT::VectorFloat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorFloat_getStdDev",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorFloat_getStdDev" "', argument " "1"" of type '" "GRT::VectorFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  result = (GRT::Float)((GRT::VectorFloat const *)arg1)->getStdDev();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VectorFloat_getMinMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::VectorFloat *arg1 = (GRT::VectorFloat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MinMax result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:VectorFloat_getMinMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorFloat_getMinMax" "', argument " "1"" of type '" "GRT::VectorFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::VectorFloat * >(argp1);
  result = ((GRT::VectorFloat const *)arg1)->getMinMax();
  resultobj = SWIG_NewPointerObj((new MinMax(static_cast< const MinMax& >(result))), SWIGTYPE_p_MinMax, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VectorFloat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__VectorFloat, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MatrixTFloat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MatrixTFloat")) SWIG_fail;
  result = (GRT::Matrix< Float > *)new GRT::Matrix< Float >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixTFloat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Matrix< Float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MatrixTFloat",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MatrixTFloat" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MatrixTFloat" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (GRT::Matrix< Float > *)new GRT::Matrix< Float >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixTFloat__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  double *arg3 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::Matrix< Float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_MatrixTFloat",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MatrixTFloat" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MatrixTFloat" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MatrixTFloat" "', argument " "3"" of type '" "double""'");
  } 
  temp3 = static_cast< double >(val3);
  arg3 = &temp3;
  result = (GRT::Matrix< Float > *)new GRT::Matrix< Float >(arg1,arg2,(double const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixTFloat__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< GRT::Float > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Matrix< Float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MatrixTFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__MatrixT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MatrixTFloat" "', argument " "1"" of type '" "GRT::Matrix< GRT::Float > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixTFloat" "', argument " "1"" of type '" "GRT::Matrix< GRT::Float > const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< GRT::Float > * >(argp1);
  result = (GRT::Matrix< Float > *)new GRT::Matrix< Float >((GRT::Matrix< GRT::Float > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixTFloat__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< GRT::Vector< double > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Matrix< Float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MatrixTFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorT_GRT__VectorT_GRT__Float_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MatrixTFloat" "', argument " "1"" of type '" "GRT::Vector< GRT::Vector< double > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixTFloat" "', argument " "1"" of type '" "GRT::Vector< GRT::Vector< double > > const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< GRT::Vector< double > > * >(argp1);
  result = (GRT::Matrix< Float > *)new GRT::Matrix< Float >((GRT::Vector< GRT::Vector< double > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixTFloat(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MatrixTFloat__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__MatrixT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MatrixTFloat__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__VectorT_GRT__VectorT_GRT__Float_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MatrixTFloat__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MatrixTFloat__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MatrixTFloat__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MatrixTFloat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Matrix< Float >::Matrix()\n"
    "    GRT::Matrix< Float >::Matrix(unsigned int const,unsigned int const)\n"
    "    GRT::Matrix< Float >::Matrix(unsigned int const,unsigned int const,double const &)\n"
    "    GRT::Matrix< Float >::Matrix(GRT::Matrix< GRT::Float > const &)\n"
    "    GRT::Matrix< Float >::Matrix(GRT::Vector< GRT::Vector< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MatrixTFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MatrixTFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatrixTFloat" "', argument " "1"" of type '" "GRT::Matrix< Float > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_getRowVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Vector< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixTFloat_getRowVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_getRowVector" "', argument " "1"" of type '" "GRT::Matrix< Float > const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixTFloat_getRowVector" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((GRT::Matrix< Float > const *)arg1)->getRowVector(arg2);
  resultobj = SWIG_NewPointerObj((new GRT::Vector< double >(static_cast< const GRT::Vector< double >& >(result))), SWIGTYPE_p_GRT__VectorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_getColVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Vector< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixTFloat_getColVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_getColVector" "', argument " "1"" of type '" "GRT::Matrix< Float > const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixTFloat_getColVector" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((GRT::Matrix< Float > const *)arg1)->getColVector(arg2);
  resultobj = SWIG_NewPointerObj((new GRT::Vector< double >(static_cast< const GRT::Vector< double >& >(result))), SWIGTYPE_p_GRT__VectorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_getConcatenatedVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Vector< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixTFloat_getConcatenatedVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_getConcatenatedVector" "', argument " "1"" of type '" "GRT::Matrix< Float > const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixTFloat_getConcatenatedVector" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = ((GRT::Matrix< Float > const *)arg1)->getConcatenatedVector(arg2);
  resultobj = SWIG_NewPointerObj((new GRT::Vector< double >(static_cast< const GRT::Vector< double >& >(result))), SWIGTYPE_p_GRT__VectorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_getConcatenatedVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixTFloat_getConcatenatedVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_getConcatenatedVector" "', argument " "1"" of type '" "GRT::Matrix< Float > const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  result = ((GRT::Matrix< Float > const *)arg1)->getConcatenatedVector();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< double >(static_cast< const GRT::Vector< double >& >(result))), SWIGTYPE_p_GRT__VectorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_getConcatenatedVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixTFloat_getConcatenatedVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixTFloat_getConcatenatedVector__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MatrixTFloat_getConcatenatedVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Matrix< Float >::getConcatenatedVector(bool const) const\n"
    "    GRT::Matrix< Float >::getConcatenatedVector() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MatrixTFloat_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_resize" "', argument " "1"" of type '" "GRT::Matrix< Float > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixTFloat_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixTFloat_resize" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (bool)(arg1)->resize(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MatrixTFloat_resize",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_resize" "', argument " "1"" of type '" "GRT::Matrix< Float > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixTFloat_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixTFloat_resize" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MatrixTFloat_resize" "', argument " "4"" of type '" "double""'");
  } 
  temp4 = static_cast< double >(val4);
  arg4 = &temp4;
  result = (bool)(arg1)->resize(arg2,arg3,(double const &)*arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MatrixTFloat_resize__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MatrixTFloat_resize__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MatrixTFloat_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Matrix< Float >::resize(unsigned int const,unsigned int const)\n"
    "    GRT::Matrix< Float >::resize(unsigned int const,unsigned int const,double const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  GRT::Matrix< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixTFloat_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_copy" "', argument " "1"" of type '" "GRT::Matrix< Float > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixTFloat_copy" "', argument " "2"" of type '" "GRT::Matrix< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixTFloat_copy" "', argument " "2"" of type '" "GRT::Matrix< double > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Matrix< double > * >(argp2);
  result = (bool)(arg1)->copy((GRT::Matrix< double > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_setAllValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixTFloat_setAllValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_setAllValues" "', argument " "1"" of type '" "GRT::Matrix< Float > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixTFloat_setAllValues" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (bool)(arg1)->setAllValues((double const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_setAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixTFloat_setAll",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_setAll" "', argument " "1"" of type '" "GRT::Matrix< Float > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixTFloat_setAll" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  result = (bool)(arg1)->setAll((double const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_setRowVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  GRT::Vector< double > *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MatrixTFloat_setRowVector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_setRowVector" "', argument " "1"" of type '" "GRT::Matrix< Float > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixTFloat_setRowVector" "', argument " "2"" of type '" "GRT::Vector< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixTFloat_setRowVector" "', argument " "2"" of type '" "GRT::Vector< double > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< double > * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixTFloat_setRowVector" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (bool)(arg1)->setRowVector((GRT::Vector< double > const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_setColVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  GRT::Vector< double > *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MatrixTFloat_setColVector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_setColVector" "', argument " "1"" of type '" "GRT::Matrix< Float > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixTFloat_setColVector" "', argument " "2"" of type '" "GRT::Vector< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixTFloat_setColVector" "', argument " "2"" of type '" "GRT::Vector< double > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< double > * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixTFloat_setColVector" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (bool)(arg1)->setColVector((GRT::Vector< double > const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  GRT::Vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixTFloat_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_push_back" "', argument " "1"" of type '" "GRT::Matrix< Float > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_double_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixTFloat_push_back" "', argument " "2"" of type '" "GRT::Vector< double > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixTFloat_push_back" "', argument " "2"" of type '" "GRT::Vector< double > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< double > * >(argp2);
  result = (bool)(arg1)->push_back((GRT::Vector< double > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixTFloat_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_reserve" "', argument " "1"" of type '" "GRT::Matrix< Float > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixTFloat_reserve" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (bool)(arg1)->reserve(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixTFloat_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_clear" "', argument " "1"" of type '" "GRT::Matrix< Float > *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_getNumRows(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixTFloat_getNumRows",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_getNumRows" "', argument " "1"" of type '" "GRT::Matrix< Float > const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  result = (unsigned int)((GRT::Matrix< Float > const *)arg1)->getNumRows();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_getNumCols(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixTFloat_getNumCols",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_getNumCols" "', argument " "1"" of type '" "GRT::Matrix< Float > const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  result = (unsigned int)((GRT::Matrix< Float > const *)arg1)->getNumCols();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_getCapacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixTFloat_getCapacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_getCapacity" "', argument " "1"" of type '" "GRT::Matrix< Float > const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  result = (unsigned int)((GRT::Matrix< Float > const *)arg1)->getCapacity();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_getSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixTFloat_getSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_getSize" "', argument " "1"" of type '" "GRT::Matrix< Float > const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  result = (unsigned int)((GRT::Matrix< Float > const *)arg1)->getSize();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_getDataPointer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixTFloat_getDataPointer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_getDataPointer" "', argument " "1"" of type '" "GRT::Matrix< Float > const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  result = (double **)((GRT::Matrix< Float > const *)arg1)->getDataPointer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixTFloat_getData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< Float > *arg1 = (GRT::Matrix< Float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixTFloat_getData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixTFloat_getData" "', argument " "1"" of type '" "GRT::Matrix< Float > const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< Float > * >(argp1);
  result = (double *)((GRT::Matrix< Float > const *)arg1)->getData();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatrixTFloat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__MatrixT_GRT__Float_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MatrixFloat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MatrixFloat")) SWIG_fail;
  result = (GRT::MatrixFloat *)new GRT::MatrixFloat();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixFloat, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixFloat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::MatrixFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MatrixFloat",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MatrixFloat" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MatrixFloat" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (GRT::MatrixFloat *)new GRT::MatrixFloat(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixFloat, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixFloat__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MatrixFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MatrixFloat" "', argument " "1"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixFloat" "', argument " "1"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  result = (GRT::MatrixFloat *)new GRT::MatrixFloat((GRT::MatrixFloat const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixFloat, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixFloat__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Matrix< GRT::Float > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MatrixFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__MatrixT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MatrixFloat" "', argument " "1"" of type '" "GRT::Matrix< GRT::Float > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixFloat" "', argument " "1"" of type '" "GRT::Matrix< GRT::Float > const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::Matrix< GRT::Float > * >(argp1);
  result = (GRT::MatrixFloat *)new GRT::MatrixFloat((GRT::Matrix< GRT::Float > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixFloat, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixFloat__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Vector< GRT::VectorFloat > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MatrixFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__VectorT_GRT__VectorFloat_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MatrixFloat" "', argument " "1"" of type '" "GRT::Vector< GRT::VectorFloat > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MatrixFloat" "', argument " "1"" of type '" "GRT::Vector< GRT::VectorFloat > const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::Vector< GRT::VectorFloat > * >(argp1);
  result = (GRT::MatrixFloat *)new GRT::MatrixFloat((GRT::Vector< GRT::VectorFloat > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixFloat, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MatrixFloat(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MatrixFloat__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MatrixFloat__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__MatrixT_double_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MatrixFloat__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__VectorT_GRT__VectorFloat_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MatrixFloat__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MatrixFloat__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MatrixFloat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MatrixFloat::MatrixFloat()\n"
    "    GRT::MatrixFloat::MatrixFloat(unsigned int const,unsigned int const)\n"
    "    GRT::MatrixFloat::MatrixFloat(GRT::MatrixFloat const &)\n"
    "    GRT::MatrixFloat::MatrixFloat(GRT::Matrix< GRT::Float > const &)\n"
    "    GRT::MatrixFloat::MatrixFloat(GRT::Vector< GRT::VectorFloat > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MatrixFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MatrixFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatrixFloat" "', argument " "1"" of type '" "GRT::MatrixFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_getRow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixFloat_getRow",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_getRow" "', argument " "1"" of type '" "GRT::MatrixFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixFloat_getRow" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((GRT::MatrixFloat const *)arg1)->getRow(arg2);
  resultobj = SWIG_NewPointerObj((new GRT::VectorFloat(static_cast< const GRT::VectorFloat& >(result))), SWIGTYPE_p_GRT__VectorFloat, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_getCol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixFloat_getCol",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_getCol" "', argument " "1"" of type '" "GRT::MatrixFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixFloat_getCol" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = ((GRT::MatrixFloat const *)arg1)->getCol(arg2);
  resultobj = SWIG_NewPointerObj((new GRT::VectorFloat(static_cast< const GRT::VectorFloat& >(result))), SWIGTYPE_p_GRT__VectorFloat, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_save(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixFloat_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_save" "', argument " "1"" of type '" "GRT::MatrixFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixFloat_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFloat_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::MatrixFloat const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  std::string *arg2 = 0 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MatrixFloat_load",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_load" "', argument " "1"" of type '" "GRT::MatrixFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixFloat_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFloat_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixFloat_load" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  result = (bool)(arg1)->load((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_load__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixFloat_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_load" "', argument " "1"" of type '" "GRT::MatrixFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixFloat_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFloat_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixFloat_load__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MatrixFloat_load__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MatrixFloat_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MatrixFloat::load(std::string const &,char const)\n"
    "    GRT::MatrixFloat::load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_saveToCSVFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixFloat_saveToCSVFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_saveToCSVFile" "', argument " "1"" of type '" "GRT::MatrixFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixFloat_saveToCSVFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFloat_saveToCSVFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::MatrixFloat const *)arg1)->saveToCSVFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_loadFromCSVFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  std::string *arg2 = 0 ;
  char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MatrixFloat_loadFromCSVFile",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_loadFromCSVFile" "', argument " "1"" of type '" "GRT::MatrixFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixFloat_loadFromCSVFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFloat_loadFromCSVFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixFloat_loadFromCSVFile" "', argument " "3"" of type '" "char""'");
  } 
  arg3 = static_cast< char >(val3);
  result = (bool)(arg1)->loadFromCSVFile((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_loadFromCSVFile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixFloat_loadFromCSVFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_loadFromCSVFile" "', argument " "1"" of type '" "GRT::MatrixFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixFloat_loadFromCSVFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFloat_loadFromCSVFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadFromCSVFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_loadFromCSVFile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixFloat_loadFromCSVFile__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MatrixFloat_loadFromCSVFile__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MatrixFloat_loadFromCSVFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MatrixFloat::loadFromCSVFile(std::string const &,char const)\n"
    "    GRT::MatrixFloat::loadFromCSVFile(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MatrixFloat__print__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixFloat__print",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat__print" "', argument " "1"" of type '" "GRT::MatrixFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "MatrixFloat__print" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)((GRT::MatrixFloat const *)arg1)->print(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat__print__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixFloat__print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat__print" "', argument " "1"" of type '" "GRT::MatrixFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  result = (bool)((GRT::MatrixFloat const *)arg1)->print();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat__print(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixFloat__print__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixFloat__print__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MatrixFloat__print'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MatrixFloat::print(std::string const) const\n"
    "    GRT::MatrixFloat::print() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_transpose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixFloat_transpose",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_transpose" "', argument " "1"" of type '" "GRT::MatrixFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  result = (bool)(arg1)->transpose();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_scale__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MatrixFloat_scale",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_scale" "', argument " "1"" of type '" "GRT::MatrixFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixFloat_scale" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixFloat_scale" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  result = (bool)(arg1)->scale(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_scale__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  GRT::Vector< MinMax > *arg2 = 0 ;
  GRT::Float arg3 ;
  GRT::Float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MatrixFloat_scale",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_scale" "', argument " "1"" of type '" "GRT::MatrixFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_MinMax_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixFloat_scale" "', argument " "2"" of type '" "GRT::Vector< MinMax > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFloat_scale" "', argument " "2"" of type '" "GRT::Vector< MinMax > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< MinMax > * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixFloat_scale" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MatrixFloat_scale" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = (bool)(arg1)->scale((GRT::Vector< MinMax > const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_scale(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MatrixFloat_scale__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorT_MinMax_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MatrixFloat_scale__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MatrixFloat_scale'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MatrixFloat::scale(GRT::Float const,GRT::Float const)\n"
    "    GRT::MatrixFloat::scale(GRT::Vector< MinMax > const &,GRT::Float const,GRT::Float const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_znorm__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixFloat_znorm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_znorm" "', argument " "1"" of type '" "GRT::MatrixFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixFloat_znorm" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->znorm(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_znorm__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixFloat_znorm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_znorm" "', argument " "1"" of type '" "GRT::MatrixFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  result = (bool)(arg1)->znorm();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_znorm(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixFloat_znorm__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixFloat_znorm__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MatrixFloat_znorm'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MatrixFloat::znorm(GRT::Float const)\n"
    "    GRT::MatrixFloat::znorm()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_multiple__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::MatrixFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixFloat_multiple",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_multiple" "', argument " "1"" of type '" "GRT::MatrixFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixFloat_multiple" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = ((GRT::MatrixFloat const *)arg1)->multiple(arg2);
  resultobj = SWIG_NewPointerObj((new GRT::MatrixFloat(static_cast< const GRT::MatrixFloat& >(result))), SWIGTYPE_p_GRT__MatrixFloat, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_multiple__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixFloat_multiple",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_multiple" "', argument " "1"" of type '" "GRT::MatrixFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixFloat_multiple" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFloat_multiple" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = ((GRT::MatrixFloat const *)arg1)->multiple((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_NewPointerObj((new GRT::VectorFloat(static_cast< const GRT::VectorFloat& >(result))), SWIGTYPE_p_GRT__VectorFloat, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_multiple__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::MatrixFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixFloat_multiple",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_multiple" "', argument " "1"" of type '" "GRT::MatrixFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixFloat_multiple" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFloat_multiple" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = ((GRT::MatrixFloat const *)arg1)->multiple((GRT::MatrixFloat const &)*arg2);
  resultobj = SWIG_NewPointerObj((new GRT::MatrixFloat(static_cast< const GRT::MatrixFloat& >(result))), SWIGTYPE_p_GRT__MatrixFloat, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_multiple__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  GRT::MatrixFloat *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MatrixFloat_multiple",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_multiple" "', argument " "1"" of type '" "GRT::MatrixFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixFloat_multiple" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFloat_multiple" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixFloat_multiple" "', argument " "3"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFloat_multiple" "', argument " "3"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg3 = reinterpret_cast< GRT::MatrixFloat * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MatrixFloat_multiple" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)(arg1)->multiple((GRT::MatrixFloat const &)*arg2,(GRT::MatrixFloat const &)*arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_multiple__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  GRT::MatrixFloat *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MatrixFloat_multiple",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_multiple" "', argument " "1"" of type '" "GRT::MatrixFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixFloat_multiple" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFloat_multiple" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixFloat_multiple" "', argument " "3"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFloat_multiple" "', argument " "3"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg3 = reinterpret_cast< GRT::MatrixFloat * >(argp3);
  result = (bool)(arg1)->multiple((GRT::MatrixFloat const &)*arg2,(GRT::MatrixFloat const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_multiple(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixFloat_multiple__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixFloat_multiple__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MatrixFloat_multiple__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MatrixFloat_multiple__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_MatrixFloat_multiple__SWIG_3(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MatrixFloat_multiple'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MatrixFloat::multiple(GRT::Float const) const\n"
    "    GRT::MatrixFloat::multiple(GRT::VectorFloat const &) const\n"
    "    GRT::MatrixFloat::multiple(GRT::MatrixFloat const &) const\n"
    "    GRT::MatrixFloat::multiple(GRT::MatrixFloat const &,GRT::MatrixFloat const &,bool const)\n"
    "    GRT::MatrixFloat::multiple(GRT::MatrixFloat const &,GRT::MatrixFloat const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_add__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixFloat_add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_add" "', argument " "1"" of type '" "GRT::MatrixFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixFloat_add" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFloat_add" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->add((GRT::MatrixFloat const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_add__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  GRT::MatrixFloat *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MatrixFloat_add",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_add" "', argument " "1"" of type '" "GRT::MatrixFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixFloat_add" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFloat_add" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixFloat_add" "', argument " "3"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFloat_add" "', argument " "3"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg3 = reinterpret_cast< GRT::MatrixFloat * >(argp3);
  result = (bool)(arg1)->add((GRT::MatrixFloat const &)*arg2,(GRT::MatrixFloat const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_add(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixFloat_add__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MatrixFloat_add__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MatrixFloat_add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MatrixFloat::add(GRT::MatrixFloat const &)\n"
    "    GRT::MatrixFloat::add(GRT::MatrixFloat const &,GRT::MatrixFloat const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_subtract__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MatrixFloat_subtract",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_subtract" "', argument " "1"" of type '" "GRT::MatrixFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixFloat_subtract" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFloat_subtract" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->subtract((GRT::MatrixFloat const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_subtract__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  GRT::MatrixFloat *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MatrixFloat_subtract",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_subtract" "', argument " "1"" of type '" "GRT::MatrixFloat *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MatrixFloat_subtract" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFloat_subtract" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MatrixFloat_subtract" "', argument " "3"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MatrixFloat_subtract" "', argument " "3"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg3 = reinterpret_cast< GRT::MatrixFloat * >(argp3);
  result = (bool)(arg1)->subtract((GRT::MatrixFloat const &)*arg2,(GRT::MatrixFloat const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_subtract(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MatrixFloat_subtract__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MatrixFloat_subtract__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MatrixFloat_subtract'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MatrixFloat::subtract(GRT::MatrixFloat const &)\n"
    "    GRT::MatrixFloat::subtract(GRT::MatrixFloat const &,GRT::MatrixFloat const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_getMinValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixFloat_getMinValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_getMinValue" "', argument " "1"" of type '" "GRT::MatrixFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  result = (GRT::Float)((GRT::MatrixFloat const *)arg1)->getMinValue();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_getMaxValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixFloat_getMaxValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_getMaxValue" "', argument " "1"" of type '" "GRT::MatrixFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  result = (GRT::Float)((GRT::MatrixFloat const *)arg1)->getMaxValue();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_getMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixFloat_getMean",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_getMean" "', argument " "1"" of type '" "GRT::MatrixFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  result = ((GRT::MatrixFloat const *)arg1)->getMean();
  resultobj = SWIG_NewPointerObj((new GRT::VectorFloat(static_cast< const GRT::VectorFloat& >(result))), SWIGTYPE_p_GRT__VectorFloat, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_getStdDev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixFloat_getStdDev",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_getStdDev" "', argument " "1"" of type '" "GRT::MatrixFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  result = ((GRT::MatrixFloat const *)arg1)->getStdDev();
  resultobj = SWIG_NewPointerObj((new GRT::VectorFloat(static_cast< const GRT::VectorFloat& >(result))), SWIGTYPE_p_GRT__VectorFloat, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_getCovarianceMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixFloat_getCovarianceMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_getCovarianceMatrix" "', argument " "1"" of type '" "GRT::MatrixFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  result = ((GRT::MatrixFloat const *)arg1)->getCovarianceMatrix();
  resultobj = SWIG_NewPointerObj((new GRT::MatrixFloat(static_cast< const GRT::MatrixFloat& >(result))), SWIGTYPE_p_GRT__MatrixFloat, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_getRanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< MinMax > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixFloat_getRanges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_getRanges" "', argument " "1"" of type '" "GRT::MatrixFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  result = ((GRT::MatrixFloat const *)arg1)->getRanges();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< MinMax >(static_cast< const GRT::Vector< MinMax >& >(result))), SWIGTYPE_p_GRT__VectorT_MinMax_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MatrixFloat_getTrace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = (GRT::MatrixFloat *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MatrixFloat_getTrace",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixFloat_getTrace" "', argument " "1"" of type '" "GRT::MatrixFloat const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  result = (GRT::Float)((GRT::MatrixFloat const *)arg1)->getTrace();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MatrixFloat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__MatrixFloat, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ClassificationData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::ClassificationData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ClassificationData",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ClassificationData" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ClassificationData" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ClassificationData" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (GRT::ClassificationData *)new GRT::ClassificationData(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClassificationData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  std::string arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::ClassificationData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ClassificationData",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ClassificationData" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ClassificationData" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (GRT::ClassificationData *)new GRT::ClassificationData(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClassificationData__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ClassificationData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ClassificationData",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ClassificationData" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  result = (GRT::ClassificationData *)new GRT::ClassificationData(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClassificationData__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ClassificationData")) SWIG_fail;
  result = (GRT::ClassificationData *)new GRT::ClassificationData();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClassificationData__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ClassificationData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ClassificationData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__ClassificationData,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClassificationData" "', argument " "1"" of type '" "GRT::ClassificationData const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClassificationData" "', argument " "1"" of type '" "GRT::ClassificationData const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = (GRT::ClassificationData *)new GRT::ClassificationData((GRT::ClassificationData const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClassificationData(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ClassificationData__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ClassificationData__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ClassificationData__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ClassificationData__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ClassificationData__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ClassificationData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClassificationData::ClassificationData(UINT,std::string,std::string)\n"
    "    GRT::ClassificationData::ClassificationData(UINT,std::string)\n"
    "    GRT::ClassificationData::ClassificationData(UINT)\n"
    "    GRT::ClassificationData::ClassificationData()\n"
    "    GRT::ClassificationData::ClassificationData(GRT::ClassificationData const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ClassificationData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ClassificationData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClassificationData" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_clear" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_setNumDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_setNumDimensions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_setNumDimensions" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_setNumDimensions" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNumDimensions(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_setDatasetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_setDatasetName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_setDatasetName" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ClassificationData_setDatasetName" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->setDatasetName(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_setInfoText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_setInfoText",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_setInfoText" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ClassificationData_setInfoText" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->setInfoText(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_setClassNameForCorrespondingClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  std::string arg2 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClassificationData_setClassNameForCorrespondingClassLabel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_setClassNameForCorrespondingClassLabel" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ClassificationData_setClassNameForCorrespondingClassLabel" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_setClassNameForCorrespondingClassLabel" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)(arg1)->setClassNameForCorrespondingClassLabel(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_setAllowNullGestureClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_setAllowNullGestureClass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_setAllowNullGestureClass" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_setAllowNullGestureClass" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setAllowNullGestureClass(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_addSample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  GRT::VectorFloat *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClassificationData_addSample",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_addSample" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_addSample" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClassificationData_addSample" "', argument " "3"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassificationData_addSample" "', argument " "3"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg3 = reinterpret_cast< GRT::VectorFloat * >(argp3);
  result = (bool)(arg1)->addSample(arg2,(GRT::VectorFloat const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_removeSample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_removeSample",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_removeSample" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_removeSample" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->removeSample(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_removeLastSample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_removeLastSample",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_removeLastSample" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = (bool)(arg1)->removeLastSample();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_reserve" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_reserve" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->reserve(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_addClass__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClassificationData_addClass",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_addClass" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_addClass" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ClassificationData_addClass" "', argument " "3"" of type '" "std::string const""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->addClass(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_addClass__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_addClass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_addClass" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_addClass" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->addClass(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_addClass(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClassificationData_addClass__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ClassificationData_addClass__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClassificationData_addClass'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClassificationData::addClass(UINT const,std::string const)\n"
    "    GRT::ClassificationData::addClass(UINT const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClassificationData_removeClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_removeClass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_removeClass" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_removeClass" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (arg1)->removeClass(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_eraseAllSamplesWithClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_eraseAllSamplesWithClassLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_eraseAllSamplesWithClassLabel" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_eraseAllSamplesWithClassLabel" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (arg1)->eraseAllSamplesWithClassLabel(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_relabelAllSamplesWithClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClassificationData_relabelAllSamplesWithClassLabel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_relabelAllSamplesWithClassLabel" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_relabelAllSamplesWithClassLabel" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_relabelAllSamplesWithClassLabel" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)(arg1)->relabelAllSamplesWithClassLabel(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_setExternalRanges__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  GRT::Vector< MinMax > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClassificationData_setExternalRanges",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_setExternalRanges" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_MinMax_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClassificationData_setExternalRanges" "', argument " "2"" of type '" "GRT::Vector< MinMax > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassificationData_setExternalRanges" "', argument " "2"" of type '" "GRT::Vector< MinMax > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< MinMax > * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_setExternalRanges" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->setExternalRanges((GRT::Vector< MinMax > const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_setExternalRanges__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  GRT::Vector< MinMax > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_setExternalRanges",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_setExternalRanges" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_MinMax_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClassificationData_setExternalRanges" "', argument " "2"" of type '" "GRT::Vector< MinMax > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassificationData_setExternalRanges" "', argument " "2"" of type '" "GRT::Vector< MinMax > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< MinMax > * >(argp2);
  result = (bool)(arg1)->setExternalRanges((GRT::Vector< MinMax > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_setExternalRanges(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorT_MinMax_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClassificationData_setExternalRanges__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorT_MinMax_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClassificationData_setExternalRanges__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClassificationData_setExternalRanges'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClassificationData::setExternalRanges(GRT::Vector< MinMax > const &,bool const)\n"
    "    GRT::ClassificationData::setExternalRanges(GRT::Vector< MinMax > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClassificationData_enableExternalRangeScaling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_enableExternalRangeScaling",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_enableExternalRangeScaling" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_enableExternalRangeScaling" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->enableExternalRangeScaling(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_scale__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClassificationData_scale",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_scale" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_scale" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_scale" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  result = (bool)(arg1)->scale(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_scale__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  GRT::Vector< MinMax > *arg2 = 0 ;
  GRT::Float arg3 ;
  GRT::Float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ClassificationData_scale",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_scale" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_MinMax_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClassificationData_scale" "', argument " "2"" of type '" "GRT::Vector< MinMax > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassificationData_scale" "', argument " "2"" of type '" "GRT::Vector< MinMax > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< MinMax > * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_scale" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ClassificationData_scale" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = (bool)(arg1)->scale((GRT::Vector< MinMax > const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_scale(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClassificationData_scale__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorT_MinMax_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ClassificationData_scale__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClassificationData_scale'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClassificationData::scale(GRT::Float const,GRT::Float const)\n"
    "    GRT::ClassificationData::scale(GRT::Vector< MinMax > const &,GRT::Float const,GRT::Float const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClassificationData_save(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_save" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClassificationData_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassificationData_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::ClassificationData const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_load(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_load" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClassificationData_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassificationData_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_saveDatasetToFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_saveDatasetToFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_saveDatasetToFile" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClassificationData_saveDatasetToFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassificationData_saveDatasetToFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::ClassificationData const *)arg1)->saveDatasetToFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_loadDatasetFromFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_loadDatasetFromFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_loadDatasetFromFile" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClassificationData_loadDatasetFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassificationData_loadDatasetFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadDatasetFromFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_saveDatasetToCSVFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_saveDatasetToCSVFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_saveDatasetToCSVFile" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClassificationData_saveDatasetToCSVFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassificationData_saveDatasetToCSVFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::ClassificationData const *)arg1)->saveDatasetToCSVFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_loadDatasetFromCSVFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  std::string *arg2 = 0 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClassificationData_loadDatasetFromCSVFile",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_loadDatasetFromCSVFile" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClassificationData_loadDatasetFromCSVFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassificationData_loadDatasetFromCSVFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_loadDatasetFromCSVFile" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)(arg1)->loadDatasetFromCSVFile((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_loadDatasetFromCSVFile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_loadDatasetFromCSVFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_loadDatasetFromCSVFile" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClassificationData_loadDatasetFromCSVFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassificationData_loadDatasetFromCSVFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadDatasetFromCSVFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_loadDatasetFromCSVFile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClassificationData_loadDatasetFromCSVFile__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClassificationData_loadDatasetFromCSVFile__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClassificationData_loadDatasetFromCSVFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClassificationData::loadDatasetFromCSVFile(std::string const &,UINT const)\n"
    "    GRT::ClassificationData::loadDatasetFromCSVFile(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClassificationData_printStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_printStats",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_printStats" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = (bool)((GRT::ClassificationData const *)arg1)->printStats();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_sortClassLabels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_sortClassLabels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_sortClassLabels" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = (bool)(arg1)->sortClassLabels();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_merge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_merge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_merge" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClassificationData_merge" "', argument " "2"" of type '" "GRT::ClassificationData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassificationData_merge" "', argument " "2"" of type '" "GRT::ClassificationData const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->merge((GRT::ClassificationData const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_partition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClassificationData_partition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_partition" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_partition" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_partition" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (arg1)->partition(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_partition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_partition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_partition" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_partition" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (arg1)->partition(arg2);
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_partition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClassificationData_partition__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClassificationData_partition__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClassificationData_partition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClassificationData::partition(UINT const,bool const)\n"
    "    GRT::ClassificationData::partition(UINT const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClassificationData_split__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClassificationData_split",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_split" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_split" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_split" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (arg1)->split(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_split__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_split",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_split" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_split" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (arg1)->split(arg2);
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_split(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClassificationData_split__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClassificationData_split__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClassificationData_split'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClassificationData::split(UINT const,bool const)\n"
    "    GRT::ClassificationData::split(UINT const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClassificationData_spiltDataIntoKFolds__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClassificationData_spiltDataIntoKFolds",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_spiltDataIntoKFolds" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_spiltDataIntoKFolds" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_spiltDataIntoKFolds" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->spiltDataIntoKFolds(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_spiltDataIntoKFolds__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_spiltDataIntoKFolds",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_spiltDataIntoKFolds" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_spiltDataIntoKFolds" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->spiltDataIntoKFolds(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_spiltDataIntoKFolds(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClassificationData_spiltDataIntoKFolds__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClassificationData_spiltDataIntoKFolds__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClassificationData_spiltDataIntoKFolds'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClassificationData::spiltDataIntoKFolds(UINT const,bool const)\n"
    "    GRT::ClassificationData::spiltDataIntoKFolds(UINT const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getTrainingFoldData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_getTrainingFoldData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getTrainingFoldData" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_getTrainingFoldData" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = ((GRT::ClassificationData const *)arg1)->getTrainingFoldData(arg2);
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getTestFoldData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_getTestFoldData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getTestFoldData" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_getTestFoldData" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = ((GRT::ClassificationData const *)arg1)->getTestFoldData(arg2);
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getClassData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_getClassData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getClassData" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_getClassData" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = ((GRT::ClassificationData const *)arg1)->getClassData(arg2);
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getBootstrappedDataset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClassificationData_getBootstrappedDataset",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getBootstrappedDataset" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_getBootstrappedDataset" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_getBootstrappedDataset" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = ((GRT::ClassificationData const *)arg1)->getBootstrappedDataset(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getBootstrappedDataset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_getBootstrappedDataset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getBootstrappedDataset" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_getBootstrappedDataset" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = ((GRT::ClassificationData const *)arg1)->getBootstrappedDataset(arg2);
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getBootstrappedDataset__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getBootstrappedDataset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getBootstrappedDataset" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getBootstrappedDataset();
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getBootstrappedDataset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ClassificationData_getBootstrappedDataset__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClassificationData_getBootstrappedDataset__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClassificationData_getBootstrappedDataset__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClassificationData_getBootstrappedDataset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClassificationData::getBootstrappedDataset(UINT const,bool const) const\n"
    "    GRT::ClassificationData::getBootstrappedDataset(UINT const) const\n"
    "    GRT::ClassificationData::getBootstrappedDataset() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClassificationData_reformatAsRegressionData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::RegressionData result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_reformatAsRegressionData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_reformatAsRegressionData" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->reformatAsRegressionData();
  resultobj = SWIG_NewPointerObj((new GRT::RegressionData(static_cast< const GRT::RegressionData& >(result))), SWIGTYPE_p_GRT__RegressionData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_reformatAsUnlabelledData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::UnlabelledData result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_reformatAsUnlabelledData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_reformatAsUnlabelledData" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->reformatAsUnlabelledData();
  resultobj = SWIG_NewPointerObj((new GRT::UnlabelledData(static_cast< const GRT::UnlabelledData& >(result))), SWIGTYPE_p_GRT__UnlabelledData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getDatasetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getDatasetName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getDatasetName" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getDatasetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getInfoText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getInfoText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getInfoText" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getInfoText();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getStatsAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getStatsAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getStatsAsString" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getStatsAsString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getNumDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getNumDimensions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getNumDimensions" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getNumDimensions();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getNumSamples(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getNumSamples",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getNumSamples" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getNumSamples();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getNumClasses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getNumClasses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getNumClasses" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getNumClasses();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getMinimumClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getMinimumClassLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getMinimumClassLabel" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getMinimumClassLabel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getMaximumClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getMaximumClassLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getMaximumClassLabel" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getMaximumClassLabel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getClassLabelIndexValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_getClassLabelIndexValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getClassLabelIndexValue" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_getClassLabelIndexValue" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = ((GRT::ClassificationData const *)arg1)->getClassLabelIndexValue(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getClassNameForCorrespondingClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_getClassNameForCorrespondingClassLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getClassNameForCorrespondingClassLabel" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_getClassNameForCorrespondingClassLabel" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = ((GRT::ClassificationData const *)arg1)->getClassNameForCorrespondingClassLabel(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getRanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< MinMax > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getRanges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getRanges" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getRanges();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< MinMax >(static_cast< const GRT::Vector< MinMax >& >(result))), SWIGTYPE_p_GRT__VectorT_MinMax_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getClassLabels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< UINT > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getClassLabels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getClassLabels" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getClassLabels();
  
  resultobj = PyList_New((&result)->size());
  for (int i = 0; i < (&result)->size(); ++i) {
    PyList_SetItem(resultobj, i, PyInt_FromLong(result[i]));
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getNumSamplesPerClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< UINT > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getNumSamplesPerClass",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getNumSamplesPerClass" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getNumSamplesPerClass();
  
  resultobj = PyList_New((&result)->size());
  for (int i = 0; i < (&result)->size(); ++i) {
    PyList_SetItem(resultobj, i, PyInt_FromLong(result[i]));
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getClassTracker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< ClassTracker > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getClassTracker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getClassTracker" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getClassTracker();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< ClassTracker >(static_cast< const GRT::Vector< ClassTracker >& >(result))), SWIGTYPE_p_GRT__VectorT_ClassTracker_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getClassHistogramData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::MatrixFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClassificationData_getClassHistogramData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getClassHistogramData" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_getClassHistogramData" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_getClassHistogramData" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = ((GRT::ClassificationData const *)arg1)->getClassHistogramData(arg2,arg3);
  
  {
    npy_intp dims[2]{
      (&result)->getNumRows(), (&result)->getNumCols()
    };
    resultobj = PyArray_SimpleNew(2, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->getNumRows(); ++i) {
      for (size_t j = 0; j < (&result)->getNumCols(); ++j) {
        float* d_ptr = static_cast<float*>(PyArray_GETPTR2(arr_ptr, i, j));
        *d_ptr = result[i][j];
      }
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getHistogramData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< GRT::Vector< GRT::MatrixFloat > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_getHistogramData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getHistogramData" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_getHistogramData" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = ((GRT::ClassificationData const *)arg1)->getHistogramData(arg2);
  resultobj = SWIG_NewPointerObj((new GRT::Vector< GRT::MatrixFloat >(static_cast< const GRT::Vector< GRT::MatrixFloat >& >(result))), SWIGTYPE_p_GRT__VectorT_GRT__MatrixFloat_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getClassificationData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< ClassificationSample > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getClassificationData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getClassificationData" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getClassificationData();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< ClassificationSample >(static_cast< const GRT::Vector< ClassificationSample >& >(result))), SWIGTYPE_p_GRT__VectorT_GRT__ClassificationSample_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getClassProbabilities__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getClassProbabilities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getClassProbabilities" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getClassProbabilities();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getClassProbabilities__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  GRT::Vector< UINT > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_getClassProbabilities",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getClassProbabilities" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_UINT_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClassificationData_getClassProbabilities" "', argument " "2"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassificationData_getClassProbabilities" "', argument " "2"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< UINT > * >(argp2);
  result = ((GRT::ClassificationData const *)arg1)->getClassProbabilities((GRT::Vector< UINT > const &)*arg2);
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getClassProbabilities(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ClassificationData_getClassProbabilities__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorT_UINT_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClassificationData_getClassProbabilities__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClassificationData_getClassProbabilities'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClassificationData::getClassProbabilities() const\n"
    "    GRT::ClassificationData::getClassProbabilities(GRT::Vector< UINT > const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getMean",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getMean" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getMean();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getStdDev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getStdDev",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getStdDev" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getStdDev();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getClassMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getClassMean",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getClassMean" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getClassMean();
  
  {
    npy_intp dims[2]{
      (&result)->getNumRows(), (&result)->getNumCols()
    };
    resultobj = PyArray_SimpleNew(2, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->getNumRows(); ++i) {
      for (size_t j = 0; j < (&result)->getNumCols(); ++j) {
        float* d_ptr = static_cast<float*>(PyArray_GETPTR2(arr_ptr, i, j));
        *d_ptr = result[i][j];
      }
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getClassStdDev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getClassStdDev",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getClassStdDev" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getClassStdDev();
  
  {
    npy_intp dims[2]{
      (&result)->getNumRows(), (&result)->getNumCols()
    };
    resultobj = PyArray_SimpleNew(2, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->getNumRows(); ++i) {
      for (size_t j = 0; j < (&result)->getNumCols(); ++j) {
        float* d_ptr = static_cast<float*>(PyArray_GETPTR2(arr_ptr, i, j));
        *d_ptr = result[i][j];
      }
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getCovarianceMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getCovarianceMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getCovarianceMatrix" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getCovarianceMatrix();
  
  {
    npy_intp dims[2]{
      (&result)->getNumRows(), (&result)->getNumCols()
    };
    resultobj = PyArray_SimpleNew(2, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->getNumRows(); ++i) {
      for (size_t j = 0; j < (&result)->getNumCols(); ++j) {
        float* d_ptr = static_cast<float*>(PyArray_GETPTR2(arr_ptr, i, j));
        *d_ptr = result[i][j];
      }
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getClassDataIndexes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Vector< UINT > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_getClassDataIndexes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getClassDataIndexes" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_getClassDataIndexes" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = ((GRT::ClassificationData const *)arg1)->getClassDataIndexes(arg2);
  
  resultobj = PyList_New((&result)->size());
  for (int i = 0; i < (&result)->size(); ++i) {
    PyList_SetItem(resultobj, i, PyInt_FromLong(result[i]));
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getDataAsMatrixDouble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixDouble result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getDataAsMatrixDouble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getDataAsMatrixDouble" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getDataAsMatrixDouble();
  
  {
    npy_intp dims[2]{
      (&result)->getNumRows(), (&result)->getNumCols()
    };
    resultobj = PyArray_SimpleNew(2, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->getNumRows(); ++i) {
      for (size_t j = 0; j < (&result)->getNumCols(); ++j) {
        float* d_ptr = static_cast<float*>(PyArray_GETPTR2(arr_ptr, i, j));
        *d_ptr = result[i][j];
      }
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_getDataAsMatrixFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_getDataAsMatrixFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_getDataAsMatrixFloat" "', argument " "1"" of type '" "GRT::ClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  result = ((GRT::ClassificationData const *)arg1)->getDataAsMatrixFloat();
  
  {
    npy_intp dims[2]{
      (&result)->getNumRows(), (&result)->getNumCols()
    };
    resultobj = PyArray_SimpleNew(2, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->getNumRows(); ++i) {
      for (size_t j = 0; j < (&result)->getNumCols(); ++j) {
        float* d_ptr = static_cast<float*>(PyArray_GETPTR2(arr_ptr, i, j));
        *d_ptr = result[i][j];
      }
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussDataset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  UINT arg4 ;
  GRT::Float arg5 ;
  GRT::Float arg6 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ClassificationData_generateGaussDataset",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ClassificationData_generateGaussDataset" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_generateGaussDataset" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_generateGaussDataset" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ClassificationData_generateGaussDataset" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ClassificationData_generateGaussDataset" "', argument " "5"" of type '" "GRT::Float""'");
  } 
  arg5 = static_cast< GRT::Float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ClassificationData_generateGaussDataset" "', argument " "6"" of type '" "GRT::Float""'");
  } 
  arg6 = static_cast< GRT::Float >(val6);
  result = (bool)GRT::ClassificationData::generateGaussDataset(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussDataset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  UINT arg4 ;
  GRT::Float arg5 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ClassificationData_generateGaussDataset",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ClassificationData_generateGaussDataset" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_generateGaussDataset" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_generateGaussDataset" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ClassificationData_generateGaussDataset" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ClassificationData_generateGaussDataset" "', argument " "5"" of type '" "GRT::Float""'");
  } 
  arg5 = static_cast< GRT::Float >(val5);
  result = (bool)GRT::ClassificationData::generateGaussDataset(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussDataset__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  UINT arg4 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ClassificationData_generateGaussDataset",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ClassificationData_generateGaussDataset" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_generateGaussDataset" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_generateGaussDataset" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ClassificationData_generateGaussDataset" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  result = (bool)GRT::ClassificationData::generateGaussDataset(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussDataset__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClassificationData_generateGaussDataset",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ClassificationData_generateGaussDataset" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_generateGaussDataset" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_generateGaussDataset" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)GRT::ClassificationData::generateGaussDataset(arg1,arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussDataset__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  UINT arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_generateGaussDataset",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ClassificationData_generateGaussDataset" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_generateGaussDataset" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)GRT::ClassificationData::generateGaussDataset(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussDataset__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_generateGaussDataset",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ClassificationData_generateGaussDataset" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)GRT::ClassificationData::generateGaussDataset(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussDataset__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  GRT::Float arg4 ;
  GRT::Float arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ClassificationData_generateGaussDataset",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ClassificationData_generateGaussDataset" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_generateGaussDataset" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_generateGaussDataset" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ClassificationData_generateGaussDataset" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ClassificationData_generateGaussDataset" "', argument " "5"" of type '" "GRT::Float""'");
  } 
  arg5 = static_cast< GRT::Float >(val5);
  result = GRT::ClassificationData::generateGaussDataset(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussDataset__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  GRT::Float arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ClassificationData_generateGaussDataset",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ClassificationData_generateGaussDataset" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_generateGaussDataset" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_generateGaussDataset" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ClassificationData_generateGaussDataset" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = GRT::ClassificationData::generateGaussDataset(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussDataset__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClassificationData_generateGaussDataset",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ClassificationData_generateGaussDataset" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_generateGaussDataset" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_generateGaussDataset" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = GRT::ClassificationData::generateGaussDataset(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussDataset__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_generateGaussDataset",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ClassificationData_generateGaussDataset" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_generateGaussDataset" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = GRT::ClassificationData::generateGaussDataset(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussDataset__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_generateGaussDataset",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ClassificationData_generateGaussDataset" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  result = GRT::ClassificationData::generateGaussDataset(arg1);
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussDataset__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)":ClassificationData_generateGaussDataset")) SWIG_fail;
  result = GRT::ClassificationData::generateGaussDataset();
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussDataset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_ClassificationData_generateGaussDataset__SWIG_11(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ClassificationData_generateGaussDataset__SWIG_10(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ClassificationData_generateGaussDataset__SWIG_5(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClassificationData_generateGaussDataset__SWIG_9(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClassificationData_generateGaussDataset__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClassificationData_generateGaussDataset__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClassificationData_generateGaussDataset__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ClassificationData_generateGaussDataset__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ClassificationData_generateGaussDataset__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ClassificationData_generateGaussDataset__SWIG_6(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ClassificationData_generateGaussDataset__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_ClassificationData_generateGaussDataset__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClassificationData_generateGaussDataset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClassificationData::generateGaussDataset(std::string const,UINT const,UINT const,UINT const,GRT::Float const,GRT::Float const)\n"
    "    GRT::ClassificationData::generateGaussDataset(std::string const,UINT const,UINT const,UINT const,GRT::Float const)\n"
    "    GRT::ClassificationData::generateGaussDataset(std::string const,UINT const,UINT const,UINT const)\n"
    "    GRT::ClassificationData::generateGaussDataset(std::string const,UINT const,UINT const)\n"
    "    GRT::ClassificationData::generateGaussDataset(std::string const,UINT const)\n"
    "    GRT::ClassificationData::generateGaussDataset(std::string const)\n"
    "    GRT::ClassificationData::generateGaussDataset(UINT const,UINT const,UINT const,GRT::Float const,GRT::Float const)\n"
    "    GRT::ClassificationData::generateGaussDataset(UINT const,UINT const,UINT const,GRT::Float const)\n"
    "    GRT::ClassificationData::generateGaussDataset(UINT const,UINT const,UINT const)\n"
    "    GRT::ClassificationData::generateGaussDataset(UINT const,UINT const)\n"
    "    GRT::ClassificationData::generateGaussDataset(UINT const)\n"
    "    GRT::ClassificationData::generateGaussDataset()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussLinearDataset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  GRT::Float arg4 ;
  GRT::Float arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ClassificationData_generateGaussLinearDataset",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ClassificationData_generateGaussLinearDataset" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_generateGaussLinearDataset" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_generateGaussLinearDataset" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ClassificationData_generateGaussLinearDataset" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ClassificationData_generateGaussLinearDataset" "', argument " "5"" of type '" "GRT::Float""'");
  } 
  arg5 = static_cast< GRT::Float >(val5);
  result = GRT::ClassificationData::generateGaussLinearDataset(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussLinearDataset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  GRT::Float arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ClassificationData_generateGaussLinearDataset",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ClassificationData_generateGaussLinearDataset" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_generateGaussLinearDataset" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_generateGaussLinearDataset" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ClassificationData_generateGaussLinearDataset" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = GRT::ClassificationData::generateGaussLinearDataset(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussLinearDataset__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClassificationData_generateGaussLinearDataset",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ClassificationData_generateGaussLinearDataset" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_generateGaussLinearDataset" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClassificationData_generateGaussLinearDataset" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = GRT::ClassificationData::generateGaussLinearDataset(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussLinearDataset__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_generateGaussLinearDataset",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ClassificationData_generateGaussLinearDataset" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_generateGaussLinearDataset" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = GRT::ClassificationData::generateGaussLinearDataset(arg1,arg2);
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussLinearDataset__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationData_generateGaussLinearDataset",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ClassificationData_generateGaussLinearDataset" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  result = GRT::ClassificationData::generateGaussLinearDataset(arg1);
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussLinearDataset__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)":ClassificationData_generateGaussLinearDataset")) SWIG_fail;
  result = GRT::ClassificationData::generateGaussLinearDataset();
  resultobj = SWIG_NewPointerObj((new GRT::ClassificationData(static_cast< const GRT::ClassificationData& >(result))), SWIGTYPE_p_GRT__ClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationData_generateGaussLinearDataset(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_ClassificationData_generateGaussLinearDataset__SWIG_5(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_ClassificationData_generateGaussLinearDataset__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ClassificationData_generateGaussLinearDataset__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ClassificationData_generateGaussLinearDataset__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ClassificationData_generateGaussLinearDataset__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_ClassificationData_generateGaussLinearDataset__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClassificationData_generateGaussLinearDataset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClassificationData::generateGaussLinearDataset(UINT const,UINT const,UINT const,GRT::Float const,GRT::Float const)\n"
    "    GRT::ClassificationData::generateGaussLinearDataset(UINT const,UINT const,UINT const,GRT::Float const)\n"
    "    GRT::ClassificationData::generateGaussLinearDataset(UINT const,UINT const,UINT const)\n"
    "    GRT::ClassificationData::generateGaussLinearDataset(UINT const,UINT const)\n"
    "    GRT::ClassificationData::generateGaussLinearDataset(UINT const)\n"
    "    GRT::ClassificationData::generateGaussLinearDataset()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClassificationData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationData *arg1 = (GRT::ClassificationData *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::ClassificationSample *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationData_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationData_get" "', argument " "1"" of type '" "GRT::ClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationData_get" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (GRT::ClassificationSample *) &GRT_ClassificationData_get(arg1,(int const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClassificationSample, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ClassificationData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__ClassificationData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ClassificationSample__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationSample *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ClassificationSample")) SWIG_fail;
  result = (GRT::ClassificationSample *)new GRT::ClassificationSample();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClassificationSample, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClassificationSample__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ClassificationSample *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ClassificationSample",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ClassificationSample" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  result = (GRT::ClassificationSample *)new GRT::ClassificationSample(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClassificationSample, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClassificationSample__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  GRT::VectorFloat *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::ClassificationSample *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ClassificationSample",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ClassificationSample" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClassificationSample" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClassificationSample" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (GRT::ClassificationSample *)new GRT::ClassificationSample(arg1,(GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClassificationSample, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClassificationSample__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationSample *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ClassificationSample *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ClassificationSample",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__ClassificationSample,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClassificationSample" "', argument " "1"" of type '" "GRT::ClassificationSample const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClassificationSample" "', argument " "1"" of type '" "GRT::ClassificationSample const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationSample * >(argp1);
  result = (GRT::ClassificationSample *)new GRT::ClassificationSample((GRT::ClassificationSample const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClassificationSample, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClassificationSample(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ClassificationSample__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__ClassificationSample, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ClassificationSample__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ClassificationSample__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ClassificationSample__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ClassificationSample'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClassificationSample::ClassificationSample()\n"
    "    GRT::ClassificationSample::ClassificationSample(UINT const)\n"
    "    GRT::ClassificationSample::ClassificationSample(UINT const,GRT::VectorFloat const &)\n"
    "    GRT::ClassificationSample::ClassificationSample(GRT::ClassificationSample const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ClassificationSample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationSample *arg1 = (GRT::ClassificationSample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ClassificationSample",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationSample, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClassificationSample" "', argument " "1"" of type '" "GRT::ClassificationSample *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationSample * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationSample_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationSample *arg1 = (GRT::ClassificationSample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationSample_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationSample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationSample_clear" "', argument " "1"" of type '" "GRT::ClassificationSample *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationSample * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationSample_getNumDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationSample *arg1 = (GRT::ClassificationSample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationSample_getNumDimensions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationSample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationSample_getNumDimensions" "', argument " "1"" of type '" "GRT::ClassificationSample const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationSample * >(argp1);
  result = ((GRT::ClassificationSample const *)arg1)->getNumDimensions();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationSample_getClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationSample *arg1 = (GRT::ClassificationSample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationSample_getClassLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationSample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationSample_getClassLabel" "', argument " "1"" of type '" "GRT::ClassificationSample const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationSample * >(argp1);
  result = ((GRT::ClassificationSample const *)arg1)->getClassLabel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationSample_getSample__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationSample *arg1 = (GRT::ClassificationSample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationSample_getSample",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationSample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationSample_getSample" "', argument " "1"" of type '" "GRT::ClassificationSample const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationSample * >(argp1);
  result = (GRT::VectorFloat *) &((GRT::ClassificationSample const *)arg1)->getSample();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationSample_getSample__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationSample *arg1 = (GRT::ClassificationSample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClassificationSample_getSample",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationSample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationSample_getSample" "', argument " "1"" of type '" "GRT::ClassificationSample *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationSample * >(argp1);
  result = (GRT::VectorFloat *) &(arg1)->getSample();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationSample_getSample(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationSample, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ClassificationSample_getSample__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClassificationSample, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ClassificationSample_getSample__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClassificationSample_getSample'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClassificationSample::getSample() const\n"
    "    GRT::ClassificationSample::getSample()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClassificationSample_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationSample *arg1 = (GRT::ClassificationSample *) 0 ;
  UINT arg2 ;
  GRT::VectorFloat *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClassificationSample_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationSample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationSample_set" "', argument " "1"" of type '" "GRT::ClassificationSample *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationSample * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationSample_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClassificationSample_set" "', argument " "3"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassificationSample_set" "', argument " "3"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg3 = reinterpret_cast< GRT::VectorFloat * >(argp3);
  result = (bool)(arg1)->set(arg2,(GRT::VectorFloat const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationSample_setClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationSample *arg1 = (GRT::ClassificationSample *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationSample_setClassLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationSample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationSample_setClassLabel" "', argument " "1"" of type '" "GRT::ClassificationSample *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationSample * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClassificationSample_setClassLabel" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setClassLabel(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClassificationSample_setSample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClassificationSample *arg1 = (GRT::ClassificationSample *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClassificationSample_setSample",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClassificationSample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClassificationSample_setSample" "', argument " "1"" of type '" "GRT::ClassificationSample *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClassificationSample * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClassificationSample_setSample" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClassificationSample_setSample" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->setSample((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ClassificationSample_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__ClassificationSample, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TimeSeriesClassificationData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::TimeSeriesClassificationData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_TimeSeriesClassificationData",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TimeSeriesClassificationData" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TimeSeriesClassificationData" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TimeSeriesClassificationData" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (GRT::TimeSeriesClassificationData *)new GRT::TimeSeriesClassificationData(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__TimeSeriesClassificationData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeSeriesClassificationData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  std::string arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::TimeSeriesClassificationData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TimeSeriesClassificationData",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TimeSeriesClassificationData" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TimeSeriesClassificationData" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (GRT::TimeSeriesClassificationData *)new GRT::TimeSeriesClassificationData(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__TimeSeriesClassificationData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeSeriesClassificationData__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::TimeSeriesClassificationData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TimeSeriesClassificationData",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TimeSeriesClassificationData" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  result = (GRT::TimeSeriesClassificationData *)new GRT::TimeSeriesClassificationData(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__TimeSeriesClassificationData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeSeriesClassificationData__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TimeSeriesClassificationData")) SWIG_fail;
  result = (GRT::TimeSeriesClassificationData *)new GRT::TimeSeriesClassificationData();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__TimeSeriesClassificationData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeSeriesClassificationData__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::TimeSeriesClassificationData *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TimeSeriesClassificationData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TimeSeriesClassificationData" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeSeriesClassificationData" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  result = (GRT::TimeSeriesClassificationData *)new GRT::TimeSeriesClassificationData((GRT::TimeSeriesClassificationData const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__TimeSeriesClassificationData, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeSeriesClassificationData(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TimeSeriesClassificationData__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TimeSeriesClassificationData__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_TimeSeriesClassificationData__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TimeSeriesClassificationData__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_TimeSeriesClassificationData__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TimeSeriesClassificationData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::TimeSeriesClassificationData::TimeSeriesClassificationData(UINT,std::string,std::string)\n"
    "    GRT::TimeSeriesClassificationData::TimeSeriesClassificationData(UINT,std::string)\n"
    "    GRT::TimeSeriesClassificationData::TimeSeriesClassificationData(UINT)\n"
    "    GRT::TimeSeriesClassificationData::TimeSeriesClassificationData()\n"
    "    GRT::TimeSeriesClassificationData::TimeSeriesClassificationData(GRT::TimeSeriesClassificationData const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TimeSeriesClassificationData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TimeSeriesClassificationData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TimeSeriesClassificationData" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationData_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_clear" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_setNumDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_setNumDimensions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_setNumDimensions" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationData_setNumDimensions" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNumDimensions(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_setDatasetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_setDatasetName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_setDatasetName" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "TimeSeriesClassificationData_setDatasetName" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->setDatasetName(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_setInfoText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_setInfoText",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_setInfoText" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "TimeSeriesClassificationData_setInfoText" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->setInfoText(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_setClassNameForCorrespondingClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  std::string arg2 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TimeSeriesClassificationData_setClassNameForCorrespondingClassLabel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_setClassNameForCorrespondingClassLabel" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "TimeSeriesClassificationData_setClassNameForCorrespondingClassLabel" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TimeSeriesClassificationData_setClassNameForCorrespondingClassLabel" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)(arg1)->setClassNameForCorrespondingClassLabel(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_setAllowNullGestureClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_setAllowNullGestureClass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_setAllowNullGestureClass" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationData_setAllowNullGestureClass" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setAllowNullGestureClass(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_addSample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  UINT arg2 ;
  GRT::MatrixFloat *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TimeSeriesClassificationData_addSample",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_addSample" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationData_addSample" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TimeSeriesClassificationData_addSample" "', argument " "3"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimeSeriesClassificationData_addSample" "', argument " "3"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg3 = reinterpret_cast< GRT::MatrixFloat * >(argp3);
  result = (bool)(arg1)->addSample(arg2,(GRT::MatrixFloat const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_removeLastSample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationData_removeLastSample",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_removeLastSample" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  result = (bool)(arg1)->removeLastSample();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_eraseAllSamplesWithClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_eraseAllSamplesWithClassLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_eraseAllSamplesWithClassLabel" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationData_eraseAllSamplesWithClassLabel" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (arg1)->eraseAllSamplesWithClassLabel(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_relabelAllSamplesWithClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TimeSeriesClassificationData_relabelAllSamplesWithClassLabel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_relabelAllSamplesWithClassLabel" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationData_relabelAllSamplesWithClassLabel" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TimeSeriesClassificationData_relabelAllSamplesWithClassLabel" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)(arg1)->relabelAllSamplesWithClassLabel(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_setExternalRanges__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  GRT::Vector< MinMax > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TimeSeriesClassificationData_setExternalRanges",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_setExternalRanges" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_MinMax_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimeSeriesClassificationData_setExternalRanges" "', argument " "2"" of type '" "GRT::Vector< MinMax > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimeSeriesClassificationData_setExternalRanges" "', argument " "2"" of type '" "GRT::Vector< MinMax > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< MinMax > * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TimeSeriesClassificationData_setExternalRanges" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->setExternalRanges((GRT::Vector< MinMax > const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_setExternalRanges__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  GRT::Vector< MinMax > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_setExternalRanges",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_setExternalRanges" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_MinMax_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimeSeriesClassificationData_setExternalRanges" "', argument " "2"" of type '" "GRT::Vector< MinMax > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimeSeriesClassificationData_setExternalRanges" "', argument " "2"" of type '" "GRT::Vector< MinMax > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< MinMax > * >(argp2);
  result = (bool)(arg1)->setExternalRanges((GRT::Vector< MinMax > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_setExternalRanges(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorT_MinMax_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TimeSeriesClassificationData_setExternalRanges__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorT_MinMax_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TimeSeriesClassificationData_setExternalRanges__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TimeSeriesClassificationData_setExternalRanges'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::TimeSeriesClassificationData::setExternalRanges(GRT::Vector< MinMax > const &,bool const)\n"
    "    GRT::TimeSeriesClassificationData::setExternalRanges(GRT::Vector< MinMax > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_enableExternalRangeScaling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_enableExternalRangeScaling",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_enableExternalRangeScaling" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationData_enableExternalRangeScaling" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->enableExternalRangeScaling(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_scale__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TimeSeriesClassificationData_scale",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_scale" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationData_scale" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TimeSeriesClassificationData_scale" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  result = (bool)(arg1)->scale(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_scale__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  GRT::Vector< MinMax > *arg2 = 0 ;
  GRT::Float arg3 ;
  GRT::Float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TimeSeriesClassificationData_scale",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_scale" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_MinMax_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimeSeriesClassificationData_scale" "', argument " "2"" of type '" "GRT::Vector< MinMax > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimeSeriesClassificationData_scale" "', argument " "2"" of type '" "GRT::Vector< MinMax > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< MinMax > * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TimeSeriesClassificationData_scale" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TimeSeriesClassificationData_scale" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = (bool)(arg1)->scale((GRT::Vector< MinMax > const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_scale(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TimeSeriesClassificationData_scale__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorT_MinMax_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TimeSeriesClassificationData_scale__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TimeSeriesClassificationData_scale'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::TimeSeriesClassificationData::scale(GRT::Float const,GRT::Float const)\n"
    "    GRT::TimeSeriesClassificationData::scale(GRT::Vector< MinMax > const &,GRT::Float const,GRT::Float const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_save(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_save" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimeSeriesClassificationData_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimeSeriesClassificationData_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::TimeSeriesClassificationData const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_load(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_load" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimeSeriesClassificationData_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimeSeriesClassificationData_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_saveDatasetToFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_saveDatasetToFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_saveDatasetToFile" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "TimeSeriesClassificationData_saveDatasetToFile" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)((GRT::TimeSeriesClassificationData const *)arg1)->saveDatasetToFile(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_loadDatasetFromFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_loadDatasetFromFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_loadDatasetFromFile" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "TimeSeriesClassificationData_loadDatasetFromFile" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)(arg1)->loadDatasetFromFile(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_saveDatasetToCSVFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_saveDatasetToCSVFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_saveDatasetToCSVFile" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimeSeriesClassificationData_saveDatasetToCSVFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimeSeriesClassificationData_saveDatasetToCSVFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::TimeSeriesClassificationData const *)arg1)->saveDatasetToCSVFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_loadDatasetFromCSVFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_loadDatasetFromCSVFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_loadDatasetFromCSVFile" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimeSeriesClassificationData_loadDatasetFromCSVFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimeSeriesClassificationData_loadDatasetFromCSVFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadDatasetFromCSVFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_printStats(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationData_printStats",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_printStats" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  result = (bool)((GRT::TimeSeriesClassificationData const *)arg1)->printStats();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_getStatsAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationData_getStatsAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_getStatsAsString" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  result = ((GRT::TimeSeriesClassificationData const *)arg1)->getStatsAsString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_partition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  UINT arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::TimeSeriesClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TimeSeriesClassificationData_partition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_partition" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationData_partition" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TimeSeriesClassificationData_partition" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (arg1)->partition(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new GRT::TimeSeriesClassificationData(static_cast< const GRT::TimeSeriesClassificationData& >(result))), SWIGTYPE_p_GRT__TimeSeriesClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_partition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::TimeSeriesClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_partition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_partition" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationData_partition" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (arg1)->partition(arg2);
  resultobj = SWIG_NewPointerObj((new GRT::TimeSeriesClassificationData(static_cast< const GRT::TimeSeriesClassificationData& >(result))), SWIGTYPE_p_GRT__TimeSeriesClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_partition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TimeSeriesClassificationData_partition__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TimeSeriesClassificationData_partition__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TimeSeriesClassificationData_partition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::TimeSeriesClassificationData::partition(UINT const,bool const)\n"
    "    GRT::TimeSeriesClassificationData::partition(UINT const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_split__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  UINT arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::TimeSeriesClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TimeSeriesClassificationData_split",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_split" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationData_split" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TimeSeriesClassificationData_split" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (arg1)->split(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new GRT::TimeSeriesClassificationData(static_cast< const GRT::TimeSeriesClassificationData& >(result))), SWIGTYPE_p_GRT__TimeSeriesClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_split__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::TimeSeriesClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_split",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_split" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationData_split" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (arg1)->split(arg2);
  resultobj = SWIG_NewPointerObj((new GRT::TimeSeriesClassificationData(static_cast< const GRT::TimeSeriesClassificationData& >(result))), SWIGTYPE_p_GRT__TimeSeriesClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_split(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TimeSeriesClassificationData_split__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TimeSeriesClassificationData_split__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TimeSeriesClassificationData_split'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::TimeSeriesClassificationData::split(UINT const,bool const)\n"
    "    GRT::TimeSeriesClassificationData::split(UINT const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_merge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_merge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_merge" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimeSeriesClassificationData_merge" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimeSeriesClassificationData_merge" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->merge((GRT::TimeSeriesClassificationData const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_spiltDataIntoKFolds__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  UINT arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TimeSeriesClassificationData_spiltDataIntoKFolds",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_spiltDataIntoKFolds" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationData_spiltDataIntoKFolds" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TimeSeriesClassificationData_spiltDataIntoKFolds" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->spiltDataIntoKFolds(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_spiltDataIntoKFolds__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_spiltDataIntoKFolds",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_spiltDataIntoKFolds" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationData_spiltDataIntoKFolds" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->spiltDataIntoKFolds(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_spiltDataIntoKFolds(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TimeSeriesClassificationData_spiltDataIntoKFolds__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TimeSeriesClassificationData_spiltDataIntoKFolds__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TimeSeriesClassificationData_spiltDataIntoKFolds'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::TimeSeriesClassificationData::spiltDataIntoKFolds(UINT const,bool const)\n"
    "    GRT::TimeSeriesClassificationData::spiltDataIntoKFolds(UINT const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_getTrainingFoldData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::TimeSeriesClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_getTrainingFoldData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_getTrainingFoldData" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationData_getTrainingFoldData" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = ((GRT::TimeSeriesClassificationData const *)arg1)->getTrainingFoldData(arg2);
  resultobj = SWIG_NewPointerObj((new GRT::TimeSeriesClassificationData(static_cast< const GRT::TimeSeriesClassificationData& >(result))), SWIGTYPE_p_GRT__TimeSeriesClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_getTestFoldData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::TimeSeriesClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_getTestFoldData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_getTestFoldData" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationData_getTestFoldData" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = ((GRT::TimeSeriesClassificationData const *)arg1)->getTestFoldData(arg2);
  resultobj = SWIG_NewPointerObj((new GRT::TimeSeriesClassificationData(static_cast< const GRT::TimeSeriesClassificationData& >(result))), SWIGTYPE_p_GRT__TimeSeriesClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_getClassData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::TimeSeriesClassificationData result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_getClassData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_getClassData" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationData_getClassData" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = ((GRT::TimeSeriesClassificationData const *)arg1)->getClassData(arg2);
  resultobj = SWIG_NewPointerObj((new GRT::TimeSeriesClassificationData(static_cast< const GRT::TimeSeriesClassificationData& >(result))), SWIGTYPE_p_GRT__TimeSeriesClassificationData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_reformatAsUnlabelledData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::UnlabelledData result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationData_reformatAsUnlabelledData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_reformatAsUnlabelledData" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  result = ((GRT::TimeSeriesClassificationData const *)arg1)->reformatAsUnlabelledData();
  resultobj = SWIG_NewPointerObj((new GRT::UnlabelledData(static_cast< const GRT::UnlabelledData& >(result))), SWIGTYPE_p_GRT__UnlabelledData, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_getDatasetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationData_getDatasetName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_getDatasetName" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  result = ((GRT::TimeSeriesClassificationData const *)arg1)->getDatasetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_getInfoText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationData_getInfoText",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_getInfoText" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  result = ((GRT::TimeSeriesClassificationData const *)arg1)->getInfoText();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_getNumDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationData_getNumDimensions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_getNumDimensions" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  result = ((GRT::TimeSeriesClassificationData const *)arg1)->getNumDimensions();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_getNumSamples(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationData_getNumSamples",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_getNumSamples" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  result = ((GRT::TimeSeriesClassificationData const *)arg1)->getNumSamples();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_getNumClasses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationData_getNumClasses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_getNumClasses" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  result = ((GRT::TimeSeriesClassificationData const *)arg1)->getNumClasses();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_getMinimumClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationData_getMinimumClassLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_getMinimumClassLabel" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  result = ((GRT::TimeSeriesClassificationData const *)arg1)->getMinimumClassLabel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_getMaximumClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationData_getMaximumClassLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_getMaximumClassLabel" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  result = ((GRT::TimeSeriesClassificationData const *)arg1)->getMaximumClassLabel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_getClassLabelIndexValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_getClassLabelIndexValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_getClassLabelIndexValue" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationData_getClassLabelIndexValue" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = ((GRT::TimeSeriesClassificationData const *)arg1)->getClassLabelIndexValue(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_getClassNameForCorrespondingClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_getClassNameForCorrespondingClassLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_getClassNameForCorrespondingClassLabel" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationData_getClassNameForCorrespondingClassLabel" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = ((GRT::TimeSeriesClassificationData const *)arg1)->getClassNameForCorrespondingClassLabel(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_getRanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< MinMax > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationData_getRanges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_getRanges" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  result = ((GRT::TimeSeriesClassificationData const *)arg1)->getRanges();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< MinMax >(static_cast< const GRT::Vector< MinMax >& >(result))), SWIGTYPE_p_GRT__VectorT_MinMax_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_getClassTracker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< ClassTracker > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationData_getClassTracker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_getClassTracker" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  result = ((GRT::TimeSeriesClassificationData const *)arg1)->getClassTracker();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< ClassTracker >(static_cast< const GRT::Vector< ClassTracker >& >(result))), SWIGTYPE_p_GRT__VectorT_ClassTracker_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_getClassificationData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< TimeSeriesClassificationSample > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationData_getClassificationData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_getClassificationData" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  result = ((GRT::TimeSeriesClassificationData const *)arg1)->getClassificationData();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< TimeSeriesClassificationSample >(static_cast< const GRT::Vector< TimeSeriesClassificationSample >& >(result))), SWIGTYPE_p_GRT__VectorT_GRT__TimeSeriesClassificationSample_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_getDataAsMatrixFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationData_getDataAsMatrixFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_getDataAsMatrixFloat" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  result = ((GRT::TimeSeriesClassificationData const *)arg1)->getDataAsMatrixFloat();
  
  {
    npy_intp dims[2]{
      (&result)->getNumRows(), (&result)->getNumCols()
    };
    resultobj = PyArray_SimpleNew(2, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->getNumRows(); ++i) {
      for (size_t j = 0; j < (&result)->getNumCols(); ++j) {
        float* d_ptr = static_cast<float*>(PyArray_GETPTR2(arr_ptr, i, j));
        *d_ptr = result[i][j];
      }
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationData_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationData *arg1 = (GRT::TimeSeriesClassificationData *) 0 ;
  int *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::TimeSeriesClassificationSample *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeSeriesClassificationData_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationData_get" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationData *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationData_get" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (GRT::TimeSeriesClassificationSample *) &GRT_TimeSeriesClassificationData_get(arg1,(int const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__TimeSeriesClassificationSample, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TimeSeriesClassificationData_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__TimeSeriesClassificationData, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TimeSeriesClassificationSample__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationSample *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TimeSeriesClassificationSample")) SWIG_fail;
  result = (GRT::TimeSeriesClassificationSample *)new GRT::TimeSeriesClassificationSample();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__TimeSeriesClassificationSample, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeSeriesClassificationSample__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  GRT::MatrixFloat *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::TimeSeriesClassificationSample *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TimeSeriesClassificationSample",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TimeSeriesClassificationSample" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TimeSeriesClassificationSample" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeSeriesClassificationSample" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (GRT::TimeSeriesClassificationSample *)new GRT::TimeSeriesClassificationSample(arg1,(GRT::MatrixFloat const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__TimeSeriesClassificationSample, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeSeriesClassificationSample__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationSample *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::TimeSeriesClassificationSample *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TimeSeriesClassificationSample",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__TimeSeriesClassificationSample,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TimeSeriesClassificationSample" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationSample const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeSeriesClassificationSample" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationSample const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationSample * >(argp1);
  result = (GRT::TimeSeriesClassificationSample *)new GRT::TimeSeriesClassificationSample((GRT::TimeSeriesClassificationSample const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__TimeSeriesClassificationSample, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeSeriesClassificationSample(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TimeSeriesClassificationSample__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__TimeSeriesClassificationSample, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TimeSeriesClassificationSample__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TimeSeriesClassificationSample__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TimeSeriesClassificationSample'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::TimeSeriesClassificationSample::TimeSeriesClassificationSample()\n"
    "    GRT::TimeSeriesClassificationSample::TimeSeriesClassificationSample(UINT const,GRT::MatrixFloat const &)\n"
    "    GRT::TimeSeriesClassificationSample::TimeSeriesClassificationSample(GRT::TimeSeriesClassificationSample const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TimeSeriesClassificationSample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationSample *arg1 = (GRT::TimeSeriesClassificationSample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TimeSeriesClassificationSample",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationSample, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TimeSeriesClassificationSample" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationSample *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationSample * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationSample_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationSample *arg1 = (GRT::TimeSeriesClassificationSample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationSample_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationSample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationSample_clear" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationSample *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationSample * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationSample_addSample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationSample *arg1 = (GRT::TimeSeriesClassificationSample *) 0 ;
  UINT arg2 ;
  GRT::VectorFloat *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TimeSeriesClassificationSample_addSample",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationSample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationSample_addSample" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationSample *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationSample * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationSample_addSample" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TimeSeriesClassificationSample_addSample" "', argument " "3"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimeSeriesClassificationSample_addSample" "', argument " "3"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg3 = reinterpret_cast< GRT::VectorFloat * >(argp3);
  result = (bool)(arg1)->addSample(arg2,(GRT::VectorFloat const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationSample_setTrainingSample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationSample *arg1 = (GRT::TimeSeriesClassificationSample *) 0 ;
  UINT arg2 ;
  GRT::MatrixFloat *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TimeSeriesClassificationSample_setTrainingSample",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationSample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationSample_setTrainingSample" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationSample *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationSample * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeSeriesClassificationSample_setTrainingSample" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TimeSeriesClassificationSample_setTrainingSample" "', argument " "3"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimeSeriesClassificationSample_setTrainingSample" "', argument " "3"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg3 = reinterpret_cast< GRT::MatrixFloat * >(argp3);
  result = (bool)(arg1)->setTrainingSample(arg2,(GRT::MatrixFloat const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationSample_getLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationSample *arg1 = (GRT::TimeSeriesClassificationSample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationSample_getLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationSample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationSample_getLength" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationSample const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationSample * >(argp1);
  result = ((GRT::TimeSeriesClassificationSample const *)arg1)->getLength();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationSample_getNumDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationSample *arg1 = (GRT::TimeSeriesClassificationSample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationSample_getNumDimensions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationSample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationSample_getNumDimensions" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationSample const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationSample * >(argp1);
  result = ((GRT::TimeSeriesClassificationSample const *)arg1)->getNumDimensions();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationSample_getClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationSample *arg1 = (GRT::TimeSeriesClassificationSample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationSample_getClassLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationSample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationSample_getClassLabel" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationSample const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationSample * >(argp1);
  result = ((GRT::TimeSeriesClassificationSample const *)arg1)->getClassLabel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationSample_getData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationSample *arg1 = (GRT::TimeSeriesClassificationSample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationSample_getData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationSample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationSample_getData" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationSample *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationSample * >(argp1);
  result = (GRT::MatrixFloat *) &(arg1)->getData();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationSample_getData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TimeSeriesClassificationSample *arg1 = (GRT::TimeSeriesClassificationSample *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeSeriesClassificationSample_getData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TimeSeriesClassificationSample, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeSeriesClassificationSample_getData" "', argument " "1"" of type '" "GRT::TimeSeriesClassificationSample const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TimeSeriesClassificationSample * >(argp1);
  result = (GRT::MatrixFloat *) &((GRT::TimeSeriesClassificationSample const *)arg1)->getData();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeSeriesClassificationSample_getData(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationSample, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TimeSeriesClassificationSample_getData__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationSample, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TimeSeriesClassificationSample_getData__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'TimeSeriesClassificationSample_getData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::TimeSeriesClassificationSample::getData()\n"
    "    GRT::TimeSeriesClassificationSample::getData() const\n");
  return 0;
}


SWIGINTERN PyObject *TimeSeriesClassificationSample_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__TimeSeriesClassificationSample, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TrainingResultsObserverManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TrainingResultsObserverManager *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TrainingResultsObserverManager")) SWIG_fail;
  result = (GRT::TrainingResultsObserverManager *)new GRT::TrainingResultsObserverManager();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__TrainingResultsObserverManager, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TrainingResultsObserverManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TrainingResultsObserverManager *arg1 = (GRT::TrainingResultsObserverManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TrainingResultsObserverManager",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TrainingResultsObserverManager, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TrainingResultsObserverManager" "', argument " "1"" of type '" "GRT::TrainingResultsObserverManager *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TrainingResultsObserverManager * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TrainingResultsObserverManager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__TrainingResultsObserverManager, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TestResultsObserverManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TestResultsObserverManager *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TestResultsObserverManager")) SWIG_fail;
  result = (GRT::TestResultsObserverManager *)new GRT::TestResultsObserverManager();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__TestResultsObserverManager, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TestResultsObserverManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::TestResultsObserverManager *arg1 = (GRT::TestResultsObserverManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TestResultsObserverManager",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__TestResultsObserverManager, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TestResultsObserverManager" "', argument " "1"" of type '" "GRT::TestResultsObserverManager *""'"); 
  }
  arg1 = reinterpret_cast< GRT::TestResultsObserverManager * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TestResultsObserverManager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__TestResultsObserverManager, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MLBase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  GRT::MLBase::BaseType arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::MLBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MLBase",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MLBase" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MLBase" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MLBase" "', argument " "2"" of type '" "GRT::MLBase::BaseType""'");
  } 
  arg2 = static_cast< GRT::MLBase::BaseType >(val2);
  result = (GRT::MLBase *)new GRT::MLBase((std::string const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MLBase, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MLBase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  GRT::MLBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MLBase",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MLBase" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MLBase" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (GRT::MLBase *)new GRT::MLBase((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MLBase, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MLBase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MLBase")) SWIG_fail;
  result = (GRT::MLBase *)new GRT::MLBase();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MLBase, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MLBase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MLBase__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MLBase__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MLBase__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MLBase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MLBase::MLBase(std::string const &,GRT::MLBase::BaseType const)\n"
    "    GRT::MLBase::MLBase(std::string const &)\n"
    "    GRT::MLBase::MLBase()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MLBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MLBase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MLBase" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_copyMLBaseVariables(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::MLBase *arg2 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_copyMLBaseVariables",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_copyMLBaseVariables" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_copyMLBaseVariables" "', argument " "2"" of type '" "GRT::MLBase const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::MLBase * >(argp2);
  result = (bool)(arg1)->copyMLBaseVariables((GRT::MLBase const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_train__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::ClassificationData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_train" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_train" "', argument " "2"" of type '" "GRT::ClassificationData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_train" "', argument " "2"" of type '" "GRT::ClassificationData""'");
    } else {
      GRT::ClassificationData * temp = reinterpret_cast< GRT::ClassificationData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_train_" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_train__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::RegressionData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_train" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_train" "', argument " "2"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_train" "', argument " "2"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_train___SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_train_" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_train__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::RegressionData arg2 ;
  GRT::RegressionData arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MLBase_train",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_train" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_train" "', argument " "2"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_train" "', argument " "2"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MLBase_train" "', argument " "3"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_train" "', argument " "3"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_train___SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  GRT::RegressionData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MLBase_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_train_" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MLBase_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  arg3 = reinterpret_cast< GRT::RegressionData * >(argp3);
  result = (bool)(arg1)->train_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_train__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::TimeSeriesClassificationData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_train" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData""'");
    } else {
      GRT::TimeSeriesClassificationData * temp = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_train___SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_train_" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_train__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::ClassificationDataStream arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_train" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_train" "', argument " "2"" of type '" "GRT::ClassificationDataStream""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_train" "', argument " "2"" of type '" "GRT::ClassificationDataStream""'");
    } else {
      GRT::ClassificationDataStream * temp = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_train___SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_train_" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_train__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::UnlabelledData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_train" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_train" "', argument " "2"" of type '" "GRT::UnlabelledData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_train" "', argument " "2"" of type '" "GRT::UnlabelledData""'");
    } else {
      GRT::UnlabelledData * temp = reinterpret_cast< GRT::UnlabelledData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_train___SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_train_" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_train__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::MatrixFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_train" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_train" "', argument " "2"" of type '" "GRT::MatrixFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_train" "', argument " "2"" of type '" "GRT::MatrixFloat""'");
    } else {
      GRT::MatrixFloat * temp = reinterpret_cast< GRT::MatrixFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_train(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_train__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_train__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_train__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_train__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_train__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_train__SWIG_6(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MLBase_train__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MLBase_train'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MLBase::train(GRT::ClassificationData)\n"
    "    GRT::MLBase::train(GRT::RegressionData)\n"
    "    GRT::MLBase::train(GRT::RegressionData,GRT::RegressionData)\n"
    "    GRT::MLBase::train(GRT::TimeSeriesClassificationData)\n"
    "    GRT::MLBase::train(GRT::ClassificationDataStream)\n"
    "    GRT::MLBase::train(GRT::UnlabelledData)\n"
    "    GRT::MLBase::train(GRT::MatrixFloat)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MLBase_train___SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_train_" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_train___SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_train___SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_train___SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_train___SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_train___SWIG_6(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MLBase_train___SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MLBase_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MLBase::train_(GRT::ClassificationData &)\n"
    "    GRT::MLBase::train_(GRT::RegressionData &)\n"
    "    GRT::MLBase::train_(GRT::RegressionData &,GRT::RegressionData &)\n"
    "    GRT::MLBase::train_(GRT::TimeSeriesClassificationData &)\n"
    "    GRT::MLBase::train_(GRT::ClassificationDataStream &)\n"
    "    GRT::MLBase::train_(GRT::UnlabelledData &)\n"
    "    GRT::MLBase::train_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MLBase_predict__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::VectorFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_predict" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_predict" "', argument " "2"" of type '" "GRT::VectorFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_predict" "', argument " "2"" of type '" "GRT::VectorFloat""'");
    } else {
      GRT::VectorFloat * temp = reinterpret_cast< GRT::VectorFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->predict(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_predict_" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_predict__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::MatrixFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_predict" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_predict" "', argument " "2"" of type '" "GRT::MatrixFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_predict" "', argument " "2"" of type '" "GRT::MatrixFloat""'");
    } else {
      GRT::MatrixFloat * temp = reinterpret_cast< GRT::MatrixFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->predict(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_predict(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_predict__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_predict__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MLBase_predict'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MLBase::predict(GRT::VectorFloat)\n"
    "    GRT::MLBase::predict(GRT::MatrixFloat)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MLBase_predict___SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_predict_" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_predict___SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MLBase_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MLBase::predict_(GRT::VectorFloat &)\n"
    "    GRT::MLBase::predict_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MLBase_map(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::VectorFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_map",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_map" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_map" "', argument " "2"" of type '" "GRT::VectorFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_map" "', argument " "2"" of type '" "GRT::VectorFloat""'");
    } else {
      GRT::VectorFloat * temp = reinterpret_cast< GRT::VectorFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->map(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_map_(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_map_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_map_" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_map_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_map_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->map_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_reset" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (bool)(arg1)->reset();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_clear" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase__print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase__print" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (bool)((GRT::MLBase const *)arg1)->print();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_save" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::MLBase const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_load" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_save__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_save" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::MLBase const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_save__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_save__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MLBase_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MLBase::save(std::string const &) const\n"
    "    GRT::MLBase::save(std::fstream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MLBase_load__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_load" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_load__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_load__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MLBase_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MLBase::load(std::string const &)\n"
    "    GRT::MLBase::load(std::fstream &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MLBase_saveModelToFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_saveModelToFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_saveModelToFile" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_saveModelToFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_saveModelToFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::MLBase const *)arg1)->saveModelToFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_saveModelToFile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_saveModelToFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_saveModelToFile" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_saveModelToFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_saveModelToFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::MLBase const *)arg1)->saveModelToFile(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_saveModelToFile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_saveModelToFile__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_saveModelToFile__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MLBase_saveModelToFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MLBase::saveModelToFile(std::string const &) const\n"
    "    GRT::MLBase::saveModelToFile(std::fstream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MLBase_loadModelFromFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_loadModelFromFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_loadModelFromFile" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_loadModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_loadModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadModelFromFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_loadModelFromFile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_loadModelFromFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_loadModelFromFile" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_loadModelFromFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_loadModelFromFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->loadModelFromFile(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_loadModelFromFile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_loadModelFromFile__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MLBase_loadModelFromFile__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MLBase_loadModelFromFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MLBase::loadModelFromFile(std::string const &)\n"
    "    GRT::MLBase::loadModelFromFile(std::fstream &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MLBase_getModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_getModel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getModel" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_getModel" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_getModel" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (bool)((GRT::MLBase const *)arg1)->getModel(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getModelAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getModelAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getModelAsString" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = ((GRT::MLBase const *)arg1)->getModelAsString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getInputType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DataType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getInputType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getInputType" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = ((GRT::MLBase const *)arg1)->getInputType();
  resultobj = SWIG_NewPointerObj((new DataType(static_cast< const DataType& >(result))), SWIGTYPE_p_DataType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getOutputType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DataType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getOutputType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getOutputType" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = ((GRT::MLBase const *)arg1)->getOutputType();
  resultobj = SWIG_NewPointerObj((new DataType(static_cast< const DataType& >(result))), SWIGTYPE_p_DataType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MLBase::BaseType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getType" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (GRT::MLBase::BaseType)((GRT::MLBase const *)arg1)->getType();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getNumInputFeatures(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getNumInputFeatures",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getNumInputFeatures" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = ((GRT::MLBase const *)arg1)->getNumInputFeatures();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getNumInputDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getNumInputDimensions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getNumInputDimensions" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = ((GRT::MLBase const *)arg1)->getNumInputDimensions();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getNumOutputDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getNumOutputDimensions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getNumOutputDimensions" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = ((GRT::MLBase const *)arg1)->getNumOutputDimensions();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getMinNumEpochs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getMinNumEpochs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getMinNumEpochs" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = ((GRT::MLBase const *)arg1)->getMinNumEpochs();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getMaxNumEpochs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getMaxNumEpochs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getMaxNumEpochs" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = ((GRT::MLBase const *)arg1)->getMaxNumEpochs();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getBatchSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getBatchSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getBatchSize" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = ((GRT::MLBase const *)arg1)->getBatchSize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getNumRestarts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getNumRestarts",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getNumRestarts" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = ((GRT::MLBase const *)arg1)->getNumRestarts();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getValidationSetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getValidationSetSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getValidationSetSize" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = ((GRT::MLBase const *)arg1)->getValidationSetSize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getNumTrainingIterationsToConverge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getNumTrainingIterationsToConverge",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getNumTrainingIterationsToConverge" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = ((GRT::MLBase const *)arg1)->getNumTrainingIterationsToConverge();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getLearningRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getLearningRate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getLearningRate" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (GRT::Float)((GRT::MLBase const *)arg1)->getLearningRate();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getRMSTrainingError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getRMSTrainingError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getRMSTrainingError" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (GRT::Float)((GRT::MLBase const *)arg1)->getRMSTrainingError();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getRootMeanSquaredTrainingError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getRootMeanSquaredTrainingError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getRootMeanSquaredTrainingError" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (GRT::Float)((GRT::MLBase const *)arg1)->getRootMeanSquaredTrainingError();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getTotalSquaredTrainingError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getTotalSquaredTrainingError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getTotalSquaredTrainingError" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (GRT::Float)((GRT::MLBase const *)arg1)->getTotalSquaredTrainingError();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getRMSValidationError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getRMSValidationError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getRMSValidationError" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (GRT::Float)((GRT::MLBase const *)arg1)->getRMSValidationError();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getValidationSetAccuracy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getValidationSetAccuracy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getValidationSetAccuracy" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (GRT::Float)((GRT::MLBase const *)arg1)->getValidationSetAccuracy();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getValidationSetPrecision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getValidationSetPrecision",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getValidationSetPrecision" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = ((GRT::MLBase const *)arg1)->getValidationSetPrecision();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getValidationSetRecall(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getValidationSetRecall",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getValidationSetRecall" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = ((GRT::MLBase const *)arg1)->getValidationSetRecall();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getUseValidationSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getUseValidationSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getUseValidationSet" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (bool)((GRT::MLBase const *)arg1)->getUseValidationSet();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getTrained(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getTrained",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getTrained" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (bool)((GRT::MLBase const *)arg1)->getTrained();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getModelTrained(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getModelTrained",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getModelTrained" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (bool)((GRT::MLBase const *)arg1)->getModelTrained();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getConverged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getConverged",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getConverged" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (bool)((GRT::MLBase const *)arg1)->getConverged();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getScalingEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getScalingEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getScalingEnabled" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (bool)((GRT::MLBase const *)arg1)->getScalingEnabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getIsBaseTypeClassifier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getIsBaseTypeClassifier",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getIsBaseTypeClassifier" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (bool)((GRT::MLBase const *)arg1)->getIsBaseTypeClassifier();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getIsBaseTypeRegressifier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getIsBaseTypeRegressifier",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getIsBaseTypeRegressifier" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (bool)((GRT::MLBase const *)arg1)->getIsBaseTypeRegressifier();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getIsBaseTypeClusterer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getIsBaseTypeClusterer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getIsBaseTypeClusterer" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (bool)((GRT::MLBase const *)arg1)->getIsBaseTypeClusterer();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getTrainingLoggingEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getTrainingLoggingEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getTrainingLoggingEnabled" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (bool)((GRT::MLBase const *)arg1)->getTrainingLoggingEnabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getTestingLoggingEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getTestingLoggingEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getTestingLoggingEnabled" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (bool)((GRT::MLBase const *)arg1)->getTestingLoggingEnabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_enableScaling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_enableScaling",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_enableScaling" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MLBase_enableScaling" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->enableScaling(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_setMaxNumEpochs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_setMaxNumEpochs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_setMaxNumEpochs" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MLBase_setMaxNumEpochs" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setMaxNumEpochs(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_setBatchSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_setBatchSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_setBatchSize" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MLBase_setBatchSize" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setBatchSize(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_setMinNumEpochs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_setMinNumEpochs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_setMinNumEpochs" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MLBase_setMinNumEpochs" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setMinNumEpochs(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_setNumRestarts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_setNumRestarts",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_setNumRestarts" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MLBase_setNumRestarts" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNumRestarts(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_setMinChange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_setMinChange",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_setMinChange" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MLBase_setMinChange" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setMinChange(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_setLearningRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_setLearningRate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_setLearningRate" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MLBase_setLearningRate" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setLearningRate(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_setUseValidationSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_setUseValidationSet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_setUseValidationSet" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MLBase_setUseValidationSet" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setUseValidationSet(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_setValidationSetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_setValidationSetSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_setValidationSetSize" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MLBase_setValidationSetSize" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setValidationSetSize(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_setRandomiseTrainingOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_setRandomiseTrainingOrder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_setRandomiseTrainingOrder" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MLBase_setRandomiseTrainingOrder" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setRandomiseTrainingOrder(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_setTrainingLoggingEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_setTrainingLoggingEnabled",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_setTrainingLoggingEnabled" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MLBase_setTrainingLoggingEnabled" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setTrainingLoggingEnabled(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_setTestingLoggingEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_setTestingLoggingEnabled",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_setTestingLoggingEnabled" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MLBase_setTestingLoggingEnabled" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setTestingLoggingEnabled(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_registerTrainingResultsObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  Observer< TrainingResult > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_registerTrainingResultsObserver",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_registerTrainingResultsObserver" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ObserverT_TrainingResult_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_registerTrainingResultsObserver" "', argument " "2"" of type '" "Observer< TrainingResult > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_registerTrainingResultsObserver" "', argument " "2"" of type '" "Observer< TrainingResult > &""'"); 
  }
  arg2 = reinterpret_cast< Observer< TrainingResult > * >(argp2);
  result = (bool)(arg1)->registerTrainingResultsObserver(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_registerTestResultsObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  Observer< TestInstanceResult > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_registerTestResultsObserver",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_registerTestResultsObserver" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ObserverT_TestInstanceResult_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_registerTestResultsObserver" "', argument " "2"" of type '" "Observer< TestInstanceResult > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_registerTestResultsObserver" "', argument " "2"" of type '" "Observer< TestInstanceResult > &""'"); 
  }
  arg2 = reinterpret_cast< Observer< TestInstanceResult > * >(argp2);
  result = (bool)(arg1)->registerTestResultsObserver(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_removeTrainingResultsObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  Observer< TrainingResult > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_removeTrainingResultsObserver",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_removeTrainingResultsObserver" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ObserverT_TrainingResult_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_removeTrainingResultsObserver" "', argument " "2"" of type '" "Observer< TrainingResult > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_removeTrainingResultsObserver" "', argument " "2"" of type '" "Observer< TrainingResult > const &""'"); 
  }
  arg2 = reinterpret_cast< Observer< TrainingResult > * >(argp2);
  result = (bool)(arg1)->removeTrainingResultsObserver((Observer< TrainingResult > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_removeTestResultsObserver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  Observer< TestInstanceResult > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_removeTestResultsObserver",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_removeTestResultsObserver" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ObserverT_TestInstanceResult_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_removeTestResultsObserver" "', argument " "2"" of type '" "Observer< TestInstanceResult > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_removeTestResultsObserver" "', argument " "2"" of type '" "Observer< TestInstanceResult > const &""'"); 
  }
  arg2 = reinterpret_cast< Observer< TestInstanceResult > * >(argp2);
  result = (bool)(arg1)->removeTestResultsObserver((Observer< TestInstanceResult > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_removeAllTrainingObservers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_removeAllTrainingObservers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_removeAllTrainingObservers" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (bool)(arg1)->removeAllTrainingObservers();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_removeAllTestObservers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_removeAllTestObservers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_removeAllTestObservers" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (bool)(arg1)->removeAllTestObservers();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_notifyTrainingResultsObservers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  TrainingResult *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_notifyTrainingResultsObservers",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_notifyTrainingResultsObservers" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_TrainingResult,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_notifyTrainingResultsObservers" "', argument " "2"" of type '" "TrainingResult const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_notifyTrainingResultsObservers" "', argument " "2"" of type '" "TrainingResult const &""'"); 
  }
  arg2 = reinterpret_cast< TrainingResult * >(argp2);
  result = (bool)(arg1)->notifyTrainingResultsObservers((TrainingResult const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_notifyTestResultsObservers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  TestInstanceResult *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MLBase_notifyTestResultsObservers",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_notifyTestResultsObservers" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_TestInstanceResult,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MLBase_notifyTestResultsObservers" "', argument " "2"" of type '" "TestInstanceResult const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MLBase_notifyTestResultsObservers" "', argument " "2"" of type '" "TestInstanceResult const &""'"); 
  }
  arg2 = reinterpret_cast< TestInstanceResult * >(argp2);
  result = (bool)(arg1)->notifyTestResultsObservers((TestInstanceResult const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getMLBasePointer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MLBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getMLBasePointer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getMLBasePointer" "', argument " "1"" of type '" "GRT::MLBase *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (GRT::MLBase *)(arg1)->getMLBasePointer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getMLBasePointer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MLBase *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getMLBasePointer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getMLBasePointer" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = (GRT::MLBase *)((GRT::MLBase const *)arg1)->getMLBasePointer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MLBase_getMLBasePointer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MLBase_getMLBasePointer__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MLBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MLBase_getMLBasePointer__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MLBase_getMLBasePointer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MLBase::getMLBasePointer()\n"
    "    GRT::MLBase::getMLBasePointer() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MLBase_getTrainingResults(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MLBase *arg1 = (GRT::MLBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< TrainingResult > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MLBase_getTrainingResults",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MLBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MLBase_getTrainingResults" "', argument " "1"" of type '" "GRT::MLBase const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MLBase * >(argp1);
  result = ((GRT::MLBase const *)arg1)->getTrainingResults();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< TrainingResult >(static_cast< const GRT::Vector< TrainingResult >& >(result))), SWIGTYPE_p_GRT__VectorT_TrainingResult_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MLBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__MLBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Classifier__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  GRT::Classifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Classifier",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Classifier" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Classifier" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (GRT::Classifier *)new GRT::Classifier((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Classifier, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Classifier__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Classifier")) SWIG_fail;
  result = (GRT::Classifier *)new GRT::Classifier();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Classifier, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Classifier(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Classifier__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Classifier__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Classifier'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Classifier::Classifier(std::string const &)\n"
    "    GRT::Classifier::Classifier()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Classifier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Classifier",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Classifier" "', argument " "1"" of type '" "GRT::Classifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  GRT::Classifier *arg2 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Classifier_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_deepCopyFrom" "', argument " "1"" of type '" "GRT::Classifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Classifier_deepCopyFrom" "', argument " "2"" of type '" "GRT::Classifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Classifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_copyBaseVariables(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  GRT::Classifier *arg2 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Classifier_copyBaseVariables",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_copyBaseVariables" "', argument " "1"" of type '" "GRT::Classifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Classifier_copyBaseVariables" "', argument " "2"" of type '" "GRT::Classifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (bool)(arg1)->copyBaseVariables((GRT::Classifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_reset" "', argument " "1"" of type '" "GRT::Classifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = (bool)(arg1)->reset();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_clear" "', argument " "1"" of type '" "GRT::Classifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_computeAccuracy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  GRT::Float *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Classifier_computeAccuracy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_computeAccuracy" "', argument " "1"" of type '" "GRT::Classifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Classifier_computeAccuracy" "', argument " "2"" of type '" "GRT::ClassificationData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Classifier_computeAccuracy" "', argument " "2"" of type '" "GRT::ClassificationData const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Classifier_computeAccuracy" "', argument " "3"" of type '" "GRT::Float &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Classifier_computeAccuracy" "', argument " "3"" of type '" "GRT::Float &""'"); 
  }
  arg3 = reinterpret_cast< GRT::Float * >(argp3);
  result = (bool)(arg1)->computeAccuracy((GRT::ClassificationData const &)*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getClassifierType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_getClassifierType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_getClassifierType" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = ((GRT::Classifier const *)arg1)->getClassifierType();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getSupportsNullRejection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_getSupportsNullRejection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_getSupportsNullRejection" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = (bool)((GRT::Classifier const *)arg1)->getSupportsNullRejection();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getNullRejectionEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_getNullRejectionEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_getNullRejectionEnabled" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = (bool)((GRT::Classifier const *)arg1)->getNullRejectionEnabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getNullRejectionCoeff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_getNullRejectionCoeff",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_getNullRejectionCoeff" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = (GRT::Float)((GRT::Classifier const *)arg1)->getNullRejectionCoeff();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getMaximumLikelihood(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_getMaximumLikelihood",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_getMaximumLikelihood" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = (GRT::Float)((GRT::Classifier const *)arg1)->getMaximumLikelihood();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getBestDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_getBestDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_getBestDistance" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = (GRT::Float)((GRT::Classifier const *)arg1)->getBestDistance();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getPhase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_getPhase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_getPhase" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = (GRT::Float)((GRT::Classifier const *)arg1)->getPhase();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getTrainingSetAccuracy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_getTrainingSetAccuracy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_getTrainingSetAccuracy" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = (GRT::Float)((GRT::Classifier const *)arg1)->getTrainingSetAccuracy();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getNumClasses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_getNumClasses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_getNumClasses" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = ((GRT::Classifier const *)arg1)->getNumClasses();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getClassLabelIndexValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Classifier_getClassLabelIndexValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_getClassLabelIndexValue" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Classifier_getClassLabelIndexValue" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = ((GRT::Classifier const *)arg1)->getClassLabelIndexValue(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getPredictedClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_getPredictedClassLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_getPredictedClassLabel" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = ((GRT::Classifier const *)arg1)->getPredictedClassLabel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getClassLikelihoods(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_getClassLikelihoods",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_getClassLikelihoods" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = ((GRT::Classifier const *)arg1)->getClassLikelihoods();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getClassDistances(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_getClassDistances",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_getClassDistances" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = ((GRT::Classifier const *)arg1)->getClassDistances();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getNullRejectionThresholds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_getNullRejectionThresholds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_getNullRejectionThresholds" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = ((GRT::Classifier const *)arg1)->getNullRejectionThresholds();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getClassLabels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< UINT > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_getClassLabels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_getClassLabels" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = ((GRT::Classifier const *)arg1)->getClassLabels();
  
  resultobj = PyList_New((&result)->size());
  for (int i = 0; i < (&result)->size(); ++i) {
    PyList_SetItem(resultobj, i, PyInt_FromLong(result[i]));
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getRanges(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< MinMax > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_getRanges",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_getRanges" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = ((GRT::Classifier const *)arg1)->getRanges();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< MinMax >(static_cast< const GRT::Vector< MinMax >& >(result))), SWIGTYPE_p_GRT__VectorT_MinMax_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_enableNullRejection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Classifier_enableNullRejection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_enableNullRejection" "', argument " "1"" of type '" "GRT::Classifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Classifier_enableNullRejection" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->enableNullRejection(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_setNullRejectionCoeff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Classifier_setNullRejectionCoeff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_setNullRejectionCoeff" "', argument " "1"" of type '" "GRT::Classifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Classifier_setNullRejectionCoeff" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setNullRejectionCoeff(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_setNullRejectionThresholds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Classifier_setNullRejectionThresholds",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_setNullRejectionThresholds" "', argument " "1"" of type '" "GRT::Classifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Classifier_setNullRejectionThresholds" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Classifier_setNullRejectionThresholds" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->setNullRejectionThresholds((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_recomputeNullRejectionThresholds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_recomputeNullRejectionThresholds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_recomputeNullRejectionThresholds" "', argument " "1"" of type '" "GRT::Classifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = (bool)(arg1)->recomputeNullRejectionThresholds();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getTimeseriesCompatible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_getTimeseriesCompatible",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_getTimeseriesCompatible" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = (bool)((GRT::Classifier const *)arg1)->getTimeseriesCompatible();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_create__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  GRT::Classifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_create",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_create" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Classifier_create" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (GRT::Classifier *)GRT::Classifier::create((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_create__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Classifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_create",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_create" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = (GRT::Classifier *)((GRT::Classifier const *)arg1)->create();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_create(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__Classifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Classifier_create__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Classifier_create__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Classifier_create'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Classifier::create(std::string const &)\n"
    "    GRT::Classifier::create() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Classifier_createNewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Classifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_createNewInstance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_createNewInstance" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = (GRT::Classifier *)((GRT::Classifier const *)arg1)->createNewInstance();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_createInstanceFromString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  GRT::Classifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_createInstanceFromString",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_createInstanceFromString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Classifier_createInstanceFromString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (GRT::Classifier *)GRT::Classifier::createInstanceFromString((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_deepCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Classifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_deepCopy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_deepCopy" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = (GRT::Classifier *)((GRT::Classifier const *)arg1)->deepCopy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getClassifierPointer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Classifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_getClassifierPointer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_getClassifierPointer" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = (GRT::Classifier *)((GRT::Classifier const *)arg1)->getClassifierPointer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getBaseClassifier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Classifier *arg1 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Classifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Classifier_getBaseClassifier",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Classifier_getBaseClassifier" "', argument " "1"" of type '" "GRT::Classifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Classifier * >(argp1);
  result = (GRT::Classifier *) &((GRT::Classifier const *)arg1)->getBaseClassifier();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Classifier_getRegisteredClassifiers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< GRT::Vector< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)":Classifier_getRegisteredClassifiers")) SWIG_fail;
  result = GRT::Classifier::getRegisteredClassifiers();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< std::string >(static_cast< const GRT::Vector< std::string >& >(result))), SWIGTYPE_p_GRT__VectorT_std__string_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Classifier_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__Classifier, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GestureRecognitionPipeline__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GestureRecognitionPipeline")) SWIG_fail;
  result = (GRT::GestureRecognitionPipeline *)new GRT::GestureRecognitionPipeline();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GestureRecognitionPipeline, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GestureRecognitionPipeline__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::GestureRecognitionPipeline *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GestureRecognitionPipeline",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__GestureRecognitionPipeline,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GestureRecognitionPipeline" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GestureRecognitionPipeline" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (GRT::GestureRecognitionPipeline *)new GRT::GestureRecognitionPipeline((GRT::GestureRecognitionPipeline const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GestureRecognitionPipeline, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GestureRecognitionPipeline(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GestureRecognitionPipeline__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GestureRecognitionPipeline__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GestureRecognitionPipeline'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GestureRecognitionPipeline::GestureRecognitionPipeline()\n"
    "    GRT::GestureRecognitionPipeline::GestureRecognitionPipeline(GRT::GestureRecognitionPipeline const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_GestureRecognitionPipeline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GestureRecognitionPipeline",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GestureRecognitionPipeline" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline___lshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  PreProcessing *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::GestureRecognitionPipeline *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline___lshift__" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_PreProcessing,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline___lshift__" "', argument " "2"" of type '" "PreProcessing const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline___lshift__" "', argument " "2"" of type '" "PreProcessing const &""'"); 
  }
  arg2 = reinterpret_cast< PreProcessing * >(argp2);
  result = (GRT::GestureRecognitionPipeline *) &(arg1)->operator <<((PreProcessing const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline___lshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  FeatureExtraction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::GestureRecognitionPipeline *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline___lshift__" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FeatureExtraction,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline___lshift__" "', argument " "2"" of type '" "FeatureExtraction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline___lshift__" "', argument " "2"" of type '" "FeatureExtraction const &""'"); 
  }
  arg2 = reinterpret_cast< FeatureExtraction * >(argp2);
  result = (GRT::GestureRecognitionPipeline *) &(arg1)->operator <<((FeatureExtraction const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline___lshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::Classifier *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::GestureRecognitionPipeline *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline___lshift__" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__Classifier,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline___lshift__" "', argument " "2"" of type '" "GRT::Classifier const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline___lshift__" "', argument " "2"" of type '" "GRT::Classifier const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (GRT::GestureRecognitionPipeline *) &(arg1)->operator <<((GRT::Classifier const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline___lshift____SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  Regressifier *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::GestureRecognitionPipeline *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline___lshift__" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Regressifier,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline___lshift__" "', argument " "2"" of type '" "Regressifier const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline___lshift__" "', argument " "2"" of type '" "Regressifier const &""'"); 
  }
  arg2 = reinterpret_cast< Regressifier * >(argp2);
  result = (GRT::GestureRecognitionPipeline *) &(arg1)->operator <<((Regressifier const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline___lshift____SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  Clusterer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::GestureRecognitionPipeline *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline___lshift__" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Clusterer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline___lshift__" "', argument " "2"" of type '" "Clusterer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline___lshift__" "', argument " "2"" of type '" "Clusterer const &""'"); 
  }
  arg2 = reinterpret_cast< Clusterer * >(argp2);
  result = (GRT::GestureRecognitionPipeline *) &(arg1)->operator <<((Clusterer const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline___lshift____SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  PostProcessing *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::GestureRecognitionPipeline *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline___lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline___lshift__" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_PostProcessing,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline___lshift__" "', argument " "2"" of type '" "PostProcessing const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline___lshift__" "', argument " "2"" of type '" "PostProcessing const &""'"); 
  }
  arg2 = reinterpret_cast< PostProcessing * >(argp2);
  result = (GRT::GestureRecognitionPipeline *) &(arg1)->operator <<((PostProcessing const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline___lshift__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_PreProcessing, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline___lshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FeatureExtraction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline___lshift____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__Classifier, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline___lshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Regressifier, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline___lshift____SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Clusterer, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline___lshift____SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_PostProcessing, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline___lshift____SWIG_5(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train_" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  UINT arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GestureRecognitionPipeline_train",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::ClassificationData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::ClassificationData const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_train" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GestureRecognitionPipeline_train" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)(arg1)->train((GRT::ClassificationData const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GestureRecognitionPipeline_train",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::ClassificationData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::ClassificationData const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_train" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)(arg1)->train((GRT::ClassificationData const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train___SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  UINT arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GestureRecognitionPipeline_train_",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train_" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_train_" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GestureRecognitionPipeline_train_" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)(arg1)->train_(*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train___SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GestureRecognitionPipeline_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train_" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_train_" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)(arg1)->train_(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train___SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train_" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  UINT arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GestureRecognitionPipeline_train",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_train" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GestureRecognitionPipeline_train" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)(arg1)->train((GRT::TimeSeriesClassificationData const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GestureRecognitionPipeline_train",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_train" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)(arg1)->train((GRT::TimeSeriesClassificationData const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train___SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  UINT arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GestureRecognitionPipeline_train_",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train_" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_train_" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GestureRecognitionPipeline_train_" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)(arg1)->train_(*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train___SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GestureRecognitionPipeline_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train_" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_train_" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)(arg1)->train_(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train___SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train_" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train___SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train_" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train___SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  GRT::RegressionData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GestureRecognitionPipeline_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train_" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GestureRecognitionPipeline_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  arg3 = reinterpret_cast< GRT::RegressionData * >(argp3);
  result = (bool)(arg1)->train_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GestureRecognitionPipeline_train",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::RegressionData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::RegressionData const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_train" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)(arg1)->train((GRT::RegressionData const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train___SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GestureRecognitionPipeline_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train_" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_train_" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)(arg1)->train_(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train___SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train_" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_test__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_test",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_test" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_test" "', argument " "2"" of type '" "GRT::ClassificationData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_test" "', argument " "2"" of type '" "GRT::ClassificationData const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->test((GRT::ClassificationData const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_test__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_test",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_test" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_test" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_test" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->test((GRT::TimeSeriesClassificationData const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_test__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_test",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_test" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_test" "', argument " "2"" of type '" "GRT::ClassificationDataStream const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_test" "', argument " "2"" of type '" "GRT::ClassificationDataStream const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->test((GRT::ClassificationDataStream const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_test__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_test",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_test" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_test" "', argument " "2"" of type '" "GRT::RegressionData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_test" "', argument " "2"" of type '" "GRT::RegressionData const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->test((GRT::RegressionData const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_test(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_test__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_test__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_test__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_test__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GestureRecognitionPipeline_test'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GestureRecognitionPipeline::test(GRT::ClassificationData const &)\n"
    "    GRT::GestureRecognitionPipeline::test(GRT::TimeSeriesClassificationData const &)\n"
    "    GRT::GestureRecognitionPipeline::test(GRT::ClassificationDataStream const &)\n"
    "    GRT::GestureRecognitionPipeline::test(GRT::RegressionData const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_predict_" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_predict___SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_predict_" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_predict___SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GestureRecognitionPipeline_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GestureRecognitionPipeline::predict_(GRT::VectorFloat &)\n"
    "    GRT::GestureRecognitionPipeline::predict_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_map_(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_map_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_map_" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_map_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_map_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->map_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_reset" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)(arg1)->reset();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_clear" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_clearModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_clearModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_clearModel" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)(arg1)->clearModel();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_save(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_save" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::GestureRecognitionPipeline const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_savePipelineToFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_savePipelineToFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_savePipelineToFile" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_savePipelineToFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_savePipelineToFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::GestureRecognitionPipeline const *)arg1)->savePipelineToFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_load(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_load" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_loadPipelineFromFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_loadPipelineFromFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_loadPipelineFromFile" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_loadPipelineFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_loadPipelineFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadPipelineFromFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_preProcessData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::VectorFloat arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GestureRecognitionPipeline_preProcessData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_preProcessData" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_preProcessData" "', argument " "2"" of type '" "GRT::VectorFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_preProcessData" "', argument " "2"" of type '" "GRT::VectorFloat""'");
    } else {
      GRT::VectorFloat * temp = reinterpret_cast< GRT::VectorFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_preProcessData" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->preProcessData(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_preProcessData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::VectorFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_preProcessData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_preProcessData" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_preProcessData" "', argument " "2"" of type '" "GRT::VectorFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_preProcessData" "', argument " "2"" of type '" "GRT::VectorFloat""'");
    } else {
      GRT::VectorFloat * temp = reinterpret_cast< GRT::VectorFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->preProcessData(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_preProcessData(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_preProcessData__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GestureRecognitionPipeline_preProcessData__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GestureRecognitionPipeline_preProcessData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GestureRecognitionPipeline::preProcessData(GRT::VectorFloat,bool)\n"
    "    GRT::GestureRecognitionPipeline::preProcessData(GRT::VectorFloat)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getIsInitialized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getIsInitialized",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getIsInitialized" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)((GRT::GestureRecognitionPipeline const *)arg1)->getIsInitialized();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getIsPreProcessingSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getIsPreProcessingSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getIsPreProcessingSet" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)((GRT::GestureRecognitionPipeline const *)arg1)->getIsPreProcessingSet();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getIsFeatureExtractionSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getIsFeatureExtractionSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getIsFeatureExtractionSet" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)((GRT::GestureRecognitionPipeline const *)arg1)->getIsFeatureExtractionSet();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getIsClassifierSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getIsClassifierSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getIsClassifierSet" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)((GRT::GestureRecognitionPipeline const *)arg1)->getIsClassifierSet();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getIsRegressifierSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getIsRegressifierSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getIsRegressifierSet" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)((GRT::GestureRecognitionPipeline const *)arg1)->getIsRegressifierSet();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getIsClustererSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getIsClustererSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getIsClustererSet" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)((GRT::GestureRecognitionPipeline const *)arg1)->getIsClustererSet();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getIsPostProcessingSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getIsPostProcessingSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getIsPostProcessingSet" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)((GRT::GestureRecognitionPipeline const *)arg1)->getIsPostProcessingSet();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getIsContextSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getIsContextSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getIsContextSet" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)((GRT::GestureRecognitionPipeline const *)arg1)->getIsContextSet();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getIsPipelineModeSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getIsPipelineModeSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getIsPipelineModeSet" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)((GRT::GestureRecognitionPipeline const *)arg1)->getIsPipelineModeSet();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getIsPipelineInClassificationMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getIsPipelineInClassificationMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getIsPipelineInClassificationMode" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)((GRT::GestureRecognitionPipeline const *)arg1)->getIsPipelineInClassificationMode();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getIsPipelineInRegressionMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getIsPipelineInRegressionMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getIsPipelineInRegressionMode" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)((GRT::GestureRecognitionPipeline const *)arg1)->getIsPipelineInRegressionMode();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getInputVectorDimensionsSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getInputVectorDimensionsSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getInputVectorDimensionsSize" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getInputVectorDimensionsSize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getOutputVectorDimensionsSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getOutputVectorDimensionsSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getOutputVectorDimensionsSize" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getOutputVectorDimensionsSize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getNumClassesInModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getNumClassesInModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getNumClassesInModel" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getNumClassesInModel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getNumClasses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getNumClasses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getNumClasses" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getNumClasses();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getNumPreProcessingModules(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getNumPreProcessingModules",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getNumPreProcessingModules" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getNumPreProcessingModules();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getNumFeatureExtractionModules(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getNumFeatureExtractionModules",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getNumFeatureExtractionModules" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getNumFeatureExtractionModules();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getNumPostProcessingModules(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getNumPostProcessingModules",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getNumPostProcessingModules" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getNumPostProcessingModules();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getPredictionModuleIndexPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getPredictionModuleIndexPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getPredictionModuleIndexPosition" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getPredictionModuleIndexPosition();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getPredictedClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getPredictedClassLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getPredictedClassLabel" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getPredictedClassLabel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getUnProcessedPredictedClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getUnProcessedPredictedClassLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getUnProcessedPredictedClassLabel" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getUnProcessedPredictedClassLabel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getNumTrainingSamples(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getNumTrainingSamples",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getNumTrainingSamples" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getNumTrainingSamples();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getNumTestSamples(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getNumTestSamples",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getNumTestSamples" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getNumTestSamples();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getMaximumLikelihood(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getMaximumLikelihood",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getMaximumLikelihood" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (GRT::Float)((GRT::GestureRecognitionPipeline const *)arg1)->getMaximumLikelihood();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getPhase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getPhase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getPhase" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (GRT::Float)((GRT::GestureRecognitionPipeline const *)arg1)->getPhase();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTrainingSetAccuracy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getTrainingSetAccuracy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTrainingSetAccuracy" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (GRT::Float)((GRT::GestureRecognitionPipeline const *)arg1)->getTrainingSetAccuracy();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getCrossValidationAccuracy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getCrossValidationAccuracy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getCrossValidationAccuracy" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (GRT::Float)((GRT::GestureRecognitionPipeline const *)arg1)->getCrossValidationAccuracy();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTestAccuracy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getTestAccuracy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTestAccuracy" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (GRT::Float)((GRT::GestureRecognitionPipeline const *)arg1)->getTestAccuracy();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTestRMSError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getTestRMSError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTestRMSError" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (GRT::Float)((GRT::GestureRecognitionPipeline const *)arg1)->getTestRMSError();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTestSSError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getTestSSError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTestSSError" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (GRT::Float)((GRT::GestureRecognitionPipeline const *)arg1)->getTestSSError();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTestFMeasure__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_getTestFMeasure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTestFMeasure" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GestureRecognitionPipeline_getTestFMeasure" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (GRT::Float)((GRT::GestureRecognitionPipeline const *)arg1)->getTestFMeasure(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTestPrecision__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_getTestPrecision",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTestPrecision" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GestureRecognitionPipeline_getTestPrecision" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (GRT::Float)((GRT::GestureRecognitionPipeline const *)arg1)->getTestPrecision(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTestRecall__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_getTestRecall",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTestRecall" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GestureRecognitionPipeline_getTestRecall" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (GRT::Float)((GRT::GestureRecognitionPipeline const *)arg1)->getTestRecall(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTestRejectionPrecision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getTestRejectionPrecision",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTestRejectionPrecision" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (GRT::Float)((GRT::GestureRecognitionPipeline const *)arg1)->getTestRejectionPrecision();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTestRejectionRecall(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getTestRejectionRecall",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTestRejectionRecall" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (GRT::Float)((GRT::GestureRecognitionPipeline const *)arg1)->getTestRejectionRecall();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTestTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getTestTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTestTime" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (GRT::Float)((GRT::GestureRecognitionPipeline const *)arg1)->getTestTime();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTrainingTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getTrainingTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTrainingTime" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (GRT::Float)((GRT::GestureRecognitionPipeline const *)arg1)->getTrainingTime();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTrainingRMSError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getTrainingRMSError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTrainingRMSError" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (GRT::Float)((GRT::GestureRecognitionPipeline const *)arg1)->getTrainingRMSError();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTrainingSSError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getTrainingSSError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTrainingSSError" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (GRT::Float)((GRT::GestureRecognitionPipeline const *)arg1)->getTrainingSSError();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTestConfusionMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getTestConfusionMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTestConfusionMatrix" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getTestConfusionMatrix();
  
  {
    npy_intp dims[2]{
      (&result)->getNumRows(), (&result)->getNumCols()
    };
    resultobj = PyArray_SimpleNew(2, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->getNumRows(); ++i) {
      for (size_t j = 0; j < (&result)->getNumCols(); ++j) {
        float* d_ptr = static_cast<float*>(PyArray_GETPTR2(arr_ptr, i, j));
        *d_ptr = result[i][j];
      }
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTrainingResults(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< TrainingResult > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getTrainingResults",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTrainingResults" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getTrainingResults();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< TrainingResult >(static_cast< const GRT::Vector< TrainingResult >& >(result))), SWIGTYPE_p_GRT__VectorT_TrainingResult_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTestResults(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  TestResult result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getTestResults",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTestResults" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getTestResults();
  resultobj = SWIG_NewPointerObj((new TestResult(static_cast< const TestResult& >(result))), SWIGTYPE_p_TestResult, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTestPrecision__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getTestPrecision",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTestPrecision" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getTestPrecision();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTestPrecision(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GestureRecognitionPipeline_getTestPrecision__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GestureRecognitionPipeline_getTestPrecision__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GestureRecognitionPipeline_getTestPrecision'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GestureRecognitionPipeline::getTestPrecision(UINT const) const\n"
    "    GRT::GestureRecognitionPipeline::getTestPrecision() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTestRecall__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getTestRecall",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTestRecall" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getTestRecall();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTestRecall(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GestureRecognitionPipeline_getTestRecall__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GestureRecognitionPipeline_getTestRecall__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GestureRecognitionPipeline_getTestRecall'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GestureRecognitionPipeline::getTestRecall(UINT const) const\n"
    "    GRT::GestureRecognitionPipeline::getTestRecall() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTestFMeasure__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getTestFMeasure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTestFMeasure" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getTestFMeasure();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTestFMeasure(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GestureRecognitionPipeline_getTestFMeasure__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GestureRecognitionPipeline_getTestFMeasure__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GestureRecognitionPipeline_getTestFMeasure'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GestureRecognitionPipeline::getTestFMeasure(UINT const) const\n"
    "    GRT::GestureRecognitionPipeline::getTestFMeasure() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getClassLikelihoods(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getClassLikelihoods",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getClassLikelihoods" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getClassLikelihoods();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getClassDistances(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getClassDistances",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getClassDistances" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getClassDistances();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getNullRejectionThresholds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getNullRejectionThresholds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getNullRejectionThresholds" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getNullRejectionThresholds();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getRegressionData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getRegressionData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getRegressionData" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getRegressionData();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getUnProcessedRegressionData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getUnProcessedRegressionData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getUnProcessedRegressionData" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getUnProcessedRegressionData();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getPreProcessedData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getPreProcessedData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getPreProcessedData" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getPreProcessedData();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getPreProcessedData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_getPreProcessedData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getPreProcessedData" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GestureRecognitionPipeline_getPreProcessedData" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getPreProcessedData(arg2);
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getPreProcessedData(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GestureRecognitionPipeline_getPreProcessedData__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GestureRecognitionPipeline_getPreProcessedData__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GestureRecognitionPipeline_getPreProcessedData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GestureRecognitionPipeline::getPreProcessedData() const\n"
    "    GRT::GestureRecognitionPipeline::getPreProcessedData(UINT) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getFeatureExtractionData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getFeatureExtractionData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getFeatureExtractionData" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getFeatureExtractionData();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getFeatureExtractionData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_getFeatureExtractionData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getFeatureExtractionData" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GestureRecognitionPipeline_getFeatureExtractionData" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getFeatureExtractionData(arg2);
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getFeatureExtractionData(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GestureRecognitionPipeline_getFeatureExtractionData__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GestureRecognitionPipeline_getFeatureExtractionData__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GestureRecognitionPipeline_getFeatureExtractionData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GestureRecognitionPipeline::getFeatureExtractionData() const\n"
    "    GRT::GestureRecognitionPipeline::getFeatureExtractionData(UINT const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getClassLabels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< UINT > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getClassLabels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getClassLabels" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getClassLabels();
  
  resultobj = PyList_New((&result)->size());
  for (int i = 0; i < (&result)->size(); ++i) {
    PyList_SetItem(resultobj, i, PyInt_FromLong(result[i]));
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getTestInstanceResults(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< TestInstanceResult > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getTestInstanceResults",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getTestInstanceResults" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getTestInstanceResults();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< TestInstanceResult >(static_cast< const GRT::Vector< TestInstanceResult >& >(result))), SWIGTYPE_p_GRT__VectorT_TestInstanceResult_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getCrossValidationResults(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< TestResult > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getCrossValidationResults",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getCrossValidationResults" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getCrossValidationResults();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< TestResult >(static_cast< const GRT::Vector< TestResult >& >(result))), SWIGTYPE_p_GRT__VectorT_TestResult_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getPreProcessingModule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PreProcessing *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_getPreProcessingModule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getPreProcessingModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GestureRecognitionPipeline_getPreProcessingModule" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (PreProcessing *)((GRT::GestureRecognitionPipeline const *)arg1)->getPreProcessingModule(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PreProcessing, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getFeatureExtractionModule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FeatureExtraction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_getFeatureExtractionModule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getFeatureExtractionModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GestureRecognitionPipeline_getFeatureExtractionModule" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (FeatureExtraction *)((GRT::GestureRecognitionPipeline const *)arg1)->getFeatureExtractionModule(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FeatureExtraction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getClassifier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Classifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getClassifier",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getClassifier" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (GRT::Classifier *)((GRT::GestureRecognitionPipeline const *)arg1)->getClassifier();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getRegressifier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Regressifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getRegressifier",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getRegressifier" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (Regressifier *)((GRT::GestureRecognitionPipeline const *)arg1)->getRegressifier();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Regressifier, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getClusterer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Clusterer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getClusterer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getClusterer" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (Clusterer *)((GRT::GestureRecognitionPipeline const *)arg1)->getClusterer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Clusterer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getPostProcessingModule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PostProcessing *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_getPostProcessingModule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getPostProcessingModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GestureRecognitionPipeline_getPostProcessingModule" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (PostProcessing *)((GRT::GestureRecognitionPipeline const *)arg1)->getPostProcessingModule(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PostProcessing, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getContextModule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Context *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GestureRecognitionPipeline_getContextModule",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getContextModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GestureRecognitionPipeline_getContextModule" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_getContextModule" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (Context *)((GRT::GestureRecognitionPipeline const *)arg1)->getContextModule(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Context, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getModelAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getModelAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getModelAsString" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getModelAsString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getPipelineModeAsString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getPipelineModeAsString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getPipelineModeAsString" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getPipelineModeAsString();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_getInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getInfo" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getInfo();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_getPipelineModeFromString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_getPipelineModeFromString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_getPipelineModeFromString" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GestureRecognitionPipeline_getPipelineModeFromString" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = ((GRT::GestureRecognitionPipeline const *)arg1)->getPipelineModeFromString(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_addPreProcessingModule__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  PreProcessing *arg2 = 0 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GestureRecognitionPipeline_addPreProcessingModule",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_addPreProcessingModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_PreProcessing,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_addPreProcessingModule" "', argument " "2"" of type '" "PreProcessing const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_addPreProcessingModule" "', argument " "2"" of type '" "PreProcessing const &""'"); 
  }
  arg2 = reinterpret_cast< PreProcessing * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_addPreProcessingModule" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)(arg1)->addPreProcessingModule((PreProcessing const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_addPreProcessingModule__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  PreProcessing *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_addPreProcessingModule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_addPreProcessingModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_PreProcessing,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_addPreProcessingModule" "', argument " "2"" of type '" "PreProcessing const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_addPreProcessingModule" "', argument " "2"" of type '" "PreProcessing const &""'"); 
  }
  arg2 = reinterpret_cast< PreProcessing * >(argp2);
  result = (bool)(arg1)->addPreProcessingModule((PreProcessing const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_addPreProcessingModule(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_PreProcessing, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_addPreProcessingModule__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_PreProcessing, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GestureRecognitionPipeline_addPreProcessingModule__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GestureRecognitionPipeline_addPreProcessingModule'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GestureRecognitionPipeline::addPreProcessingModule(PreProcessing const &,UINT)\n"
    "    GRT::GestureRecognitionPipeline::addPreProcessingModule(PreProcessing const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_setPreProcessingModule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  PreProcessing *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_setPreProcessingModule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_setPreProcessingModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_PreProcessing,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_setPreProcessingModule" "', argument " "2"" of type '" "PreProcessing const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_setPreProcessingModule" "', argument " "2"" of type '" "PreProcessing const &""'"); 
  }
  arg2 = reinterpret_cast< PreProcessing * >(argp2);
  result = (bool)(arg1)->setPreProcessingModule((PreProcessing const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_addFeatureExtractionModule__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  FeatureExtraction *arg2 = 0 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GestureRecognitionPipeline_addFeatureExtractionModule",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_addFeatureExtractionModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FeatureExtraction,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_addFeatureExtractionModule" "', argument " "2"" of type '" "FeatureExtraction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_addFeatureExtractionModule" "', argument " "2"" of type '" "FeatureExtraction const &""'"); 
  }
  arg2 = reinterpret_cast< FeatureExtraction * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_addFeatureExtractionModule" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)(arg1)->addFeatureExtractionModule((FeatureExtraction const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_addFeatureExtractionModule__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  FeatureExtraction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_addFeatureExtractionModule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_addFeatureExtractionModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FeatureExtraction,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_addFeatureExtractionModule" "', argument " "2"" of type '" "FeatureExtraction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_addFeatureExtractionModule" "', argument " "2"" of type '" "FeatureExtraction const &""'"); 
  }
  arg2 = reinterpret_cast< FeatureExtraction * >(argp2);
  result = (bool)(arg1)->addFeatureExtractionModule((FeatureExtraction const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_addFeatureExtractionModule(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FeatureExtraction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_addFeatureExtractionModule__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FeatureExtraction, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GestureRecognitionPipeline_addFeatureExtractionModule__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GestureRecognitionPipeline_addFeatureExtractionModule'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GestureRecognitionPipeline::addFeatureExtractionModule(FeatureExtraction const &,UINT)\n"
    "    GRT::GestureRecognitionPipeline::addFeatureExtractionModule(FeatureExtraction const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_setFeatureExtractionModule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  FeatureExtraction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_setFeatureExtractionModule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_setFeatureExtractionModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FeatureExtraction,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_setFeatureExtractionModule" "', argument " "2"" of type '" "FeatureExtraction const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_setFeatureExtractionModule" "', argument " "2"" of type '" "FeatureExtraction const &""'"); 
  }
  arg2 = reinterpret_cast< FeatureExtraction * >(argp2);
  result = (bool)(arg1)->setFeatureExtractionModule((FeatureExtraction const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_setClassifier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::Classifier *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_setClassifier",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_setClassifier" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__Classifier,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_setClassifier" "', argument " "2"" of type '" "GRT::Classifier const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_setClassifier" "', argument " "2"" of type '" "GRT::Classifier const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (bool)(arg1)->setClassifier((GRT::Classifier const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_setRegressifier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  Regressifier *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_setRegressifier",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_setRegressifier" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Regressifier,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_setRegressifier" "', argument " "2"" of type '" "Regressifier const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_setRegressifier" "', argument " "2"" of type '" "Regressifier const &""'"); 
  }
  arg2 = reinterpret_cast< Regressifier * >(argp2);
  result = (bool)(arg1)->setRegressifier((Regressifier const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_setClusterer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  Clusterer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_setClusterer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_setClusterer" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Clusterer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_setClusterer" "', argument " "2"" of type '" "Clusterer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_setClusterer" "', argument " "2"" of type '" "Clusterer const &""'"); 
  }
  arg2 = reinterpret_cast< Clusterer * >(argp2);
  result = (bool)(arg1)->setClusterer((Clusterer const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_addPostProcessingModule__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  PostProcessing *arg2 = 0 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GestureRecognitionPipeline_addPostProcessingModule",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_addPostProcessingModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_PostProcessing,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_addPostProcessingModule" "', argument " "2"" of type '" "PostProcessing const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_addPostProcessingModule" "', argument " "2"" of type '" "PostProcessing const &""'"); 
  }
  arg2 = reinterpret_cast< PostProcessing * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_addPostProcessingModule" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)(arg1)->addPostProcessingModule((PostProcessing const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_addPostProcessingModule__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  PostProcessing *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_addPostProcessingModule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_addPostProcessingModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_PostProcessing,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_addPostProcessingModule" "', argument " "2"" of type '" "PostProcessing const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_addPostProcessingModule" "', argument " "2"" of type '" "PostProcessing const &""'"); 
  }
  arg2 = reinterpret_cast< PostProcessing * >(argp2);
  result = (bool)(arg1)->addPostProcessingModule((PostProcessing const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_addPostProcessingModule(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_PostProcessing, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_addPostProcessingModule__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_PostProcessing, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GestureRecognitionPipeline_addPostProcessingModule__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GestureRecognitionPipeline_addPostProcessingModule'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GestureRecognitionPipeline::addPostProcessingModule(PostProcessing const &,UINT)\n"
    "    GRT::GestureRecognitionPipeline::addPostProcessingModule(PostProcessing const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_setPostProcessingModule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  PostProcessing *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_setPostProcessingModule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_setPostProcessingModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_PostProcessing,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_setPostProcessingModule" "', argument " "2"" of type '" "PostProcessing const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_setPostProcessingModule" "', argument " "2"" of type '" "PostProcessing const &""'"); 
  }
  arg2 = reinterpret_cast< PostProcessing * >(argp2);
  result = (bool)(arg1)->setPostProcessingModule((PostProcessing const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_addContextModule__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  Context *arg2 = 0 ;
  UINT arg3 ;
  UINT arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GestureRecognitionPipeline_addContextModule",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_addContextModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Context,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_addContextModule" "', argument " "2"" of type '" "Context const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_addContextModule" "', argument " "2"" of type '" "Context const &""'"); 
  }
  arg2 = reinterpret_cast< Context * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_addContextModule" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GestureRecognitionPipeline_addContextModule" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  result = (bool)(arg1)->addContextModule((Context const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_addContextModule__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  Context *arg2 = 0 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GestureRecognitionPipeline_addContextModule",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_addContextModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Context,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_addContextModule" "', argument " "2"" of type '" "Context const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_addContextModule" "', argument " "2"" of type '" "Context const &""'"); 
  }
  arg2 = reinterpret_cast< Context * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_addContextModule" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)(arg1)->addContextModule((Context const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_addContextModule(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Context, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GestureRecognitionPipeline_addContextModule__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Context, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_GestureRecognitionPipeline_addContextModule__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GestureRecognitionPipeline_addContextModule'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GestureRecognitionPipeline::addContextModule(Context const &,UINT,UINT)\n"
    "    GRT::GestureRecognitionPipeline::addContextModule(Context const &,UINT)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_updateContextModule__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  bool arg2 ;
  UINT arg3 ;
  UINT arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GestureRecognitionPipeline_updateContextModule",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_updateContextModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GestureRecognitionPipeline_updateContextModule" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_updateContextModule" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GestureRecognitionPipeline_updateContextModule" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  result = (bool)(arg1)->updateContextModule(arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_updateContextModule__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  bool arg2 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GestureRecognitionPipeline_updateContextModule",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_updateContextModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GestureRecognitionPipeline_updateContextModule" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_updateContextModule" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)(arg1)->updateContextModule(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_updateContextModule__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_updateContextModule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_updateContextModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GestureRecognitionPipeline_updateContextModule" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->updateContextModule(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_updateContextModule(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GestureRecognitionPipeline_updateContextModule__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GestureRecognitionPipeline_updateContextModule__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_GestureRecognitionPipeline_updateContextModule__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GestureRecognitionPipeline_updateContextModule'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GestureRecognitionPipeline::updateContextModule(bool,UINT,UINT)\n"
    "    GRT::GestureRecognitionPipeline::updateContextModule(bool,UINT)\n"
    "    GRT::GestureRecognitionPipeline::updateContextModule(bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_removeAllPreProcessingModules(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_removeAllPreProcessingModules",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_removeAllPreProcessingModules" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)(arg1)->removeAllPreProcessingModules();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_removePreProcessingModule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_removePreProcessingModule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_removePreProcessingModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GestureRecognitionPipeline_removePreProcessingModule" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->removePreProcessingModule(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_removeAllFeatureExtractionModules(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_removeAllFeatureExtractionModules",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_removeAllFeatureExtractionModules" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)(arg1)->removeAllFeatureExtractionModules();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_removeFeatureExtractionModule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_removeFeatureExtractionModule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_removeFeatureExtractionModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GestureRecognitionPipeline_removeFeatureExtractionModule" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->removeFeatureExtractionModule(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_removeClassifier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_removeClassifier",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_removeClassifier" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)(arg1)->removeClassifier();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_removeRegressifier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_removeRegressifier",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_removeRegressifier" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)(arg1)->removeRegressifier();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_removeClusterer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_removeClusterer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_removeClusterer" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)(arg1)->removeClusterer();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_removeAllPostProcessingModules(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_removeAllPostProcessingModules",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_removeAllPostProcessingModules" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)(arg1)->removeAllPostProcessingModules();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_removePostProcessingModule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_removePostProcessingModule",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_removePostProcessingModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GestureRecognitionPipeline_removePostProcessingModule" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->removePostProcessingModule(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_removeAllContextModules(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_removeAllContextModules",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_removeAllContextModules" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)(arg1)->removeAllContextModules();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_removeContextModule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GestureRecognitionPipeline_removeContextModule",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_removeContextModule" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GestureRecognitionPipeline_removeContextModule" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GestureRecognitionPipeline_removeContextModule" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)(arg1)->removeContextModule(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_clearAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_clearAll",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_clearAll" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)(arg1)->clearAll();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_clearTestResults(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GestureRecognitionPipeline_clearTestResults",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_clearTestResults" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  result = (bool)(arg1)->clearTestResults();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_setInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_setInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_setInfo" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_setInfo" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_setInfo" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->setInfo((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train__SWIG_5_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::ClassificationData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::ClassificationData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::ClassificationData""'");
    } else {
      GRT::ClassificationData * temp = reinterpret_cast< GRT::ClassificationData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train__SWIG_5_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::RegressionData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train__SWIG_5_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::RegressionData arg2 ;
  GRT::RegressionData arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GestureRecognitionPipeline_train",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GestureRecognitionPipeline_train" "', argument " "3"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train" "', argument " "3"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train__SWIG_5_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::TimeSeriesClassificationData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData""'");
    } else {
      GRT::TimeSeriesClassificationData * temp = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train__SWIG_5_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::ClassificationDataStream arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::ClassificationDataStream""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::ClassificationDataStream""'");
    } else {
      GRT::ClassificationDataStream * temp = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train__SWIG_5_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::UnlabelledData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::UnlabelledData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::UnlabelledData""'");
    } else {
      GRT::UnlabelledData * temp = reinterpret_cast< GRT::UnlabelledData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train__SWIG_5_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::MatrixFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::MatrixFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train" "', argument " "2"" of type '" "GRT::MatrixFloat""'");
    } else {
      GRT::MatrixFloat * temp = reinterpret_cast< GRT::MatrixFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_train__SWIG_5_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_train__SWIG_5_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_train__SWIG_5_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_train__SWIG_5_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_train__SWIG_5_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_train__SWIG_5_6(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GestureRecognitionPipeline_train__SWIG_5_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GestureRecognitionPipeline_train__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GestureRecognitionPipeline_train__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GestureRecognitionPipeline_train__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_GestureRecognitionPipeline_train__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_GestureRecognitionPipeline_train__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GestureRecognitionPipeline_train'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GestureRecognitionPipeline::train(GRT::ClassificationData const &,UINT const,bool const)\n"
    "    GRT::GestureRecognitionPipeline::train(GRT::ClassificationData const &,UINT const)\n"
    "    GRT::GestureRecognitionPipeline::train(GRT::TimeSeriesClassificationData const &,UINT const,bool const)\n"
    "    GRT::GestureRecognitionPipeline::train(GRT::TimeSeriesClassificationData const &,UINT const)\n"
    "    GRT::GestureRecognitionPipeline::train(GRT::RegressionData const &,UINT const)\n"
    "    train(GRT::ClassificationData)\n"
    "    train(GRT::RegressionData)\n"
    "    train(GRT::RegressionData,GRT::RegressionData)\n"
    "    train(GRT::TimeSeriesClassificationData)\n"
    "    train(GRT::ClassificationDataStream)\n"
    "    train(GRT::UnlabelledData)\n"
    "    train(GRT::MatrixFloat)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train___SWIG_11_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_train_" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_train___SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_train___SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_train___SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_train___SWIG_10(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_train___SWIG_11_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GestureRecognitionPipeline_train___SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GestureRecognitionPipeline_train___SWIG_9(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GestureRecognitionPipeline_train___SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GestureRecognitionPipeline_train___SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_GestureRecognitionPipeline_train___SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_GestureRecognitionPipeline_train___SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GestureRecognitionPipeline_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GestureRecognitionPipeline::train_(GRT::ClassificationData &)\n"
    "    GRT::GestureRecognitionPipeline::train_(GRT::ClassificationData &,UINT const,bool const)\n"
    "    GRT::GestureRecognitionPipeline::train_(GRT::ClassificationData &,UINT const)\n"
    "    GRT::GestureRecognitionPipeline::train_(GRT::TimeSeriesClassificationData &)\n"
    "    GRT::GestureRecognitionPipeline::train_(GRT::TimeSeriesClassificationData &,UINT const,bool const)\n"
    "    GRT::GestureRecognitionPipeline::train_(GRT::TimeSeriesClassificationData &,UINT const)\n"
    "    GRT::GestureRecognitionPipeline::train_(GRT::ClassificationDataStream &)\n"
    "    GRT::GestureRecognitionPipeline::train_(GRT::RegressionData &)\n"
    "    GRT::GestureRecognitionPipeline::train_(GRT::RegressionData &,GRT::RegressionData &)\n"
    "    GRT::GestureRecognitionPipeline::train_(GRT::RegressionData &,UINT const)\n"
    "    GRT::GestureRecognitionPipeline::train_(GRT::UnlabelledData &)\n"
    "    train_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_predict_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::VectorFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_predict" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_predict" "', argument " "2"" of type '" "GRT::VectorFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_predict" "', argument " "2"" of type '" "GRT::VectorFloat""'");
    } else {
      GRT::VectorFloat * temp = reinterpret_cast< GRT::VectorFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->predict(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_predict_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GestureRecognitionPipeline *arg1 = (GRT::GestureRecognitionPipeline *) 0 ;
  GRT::MatrixFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GestureRecognitionPipeline_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GestureRecognitionPipeline_predict" "', argument " "1"" of type '" "GRT::GestureRecognitionPipeline *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GestureRecognitionPipeline * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GestureRecognitionPipeline_predict" "', argument " "2"" of type '" "GRT::MatrixFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GestureRecognitionPipeline_predict" "', argument " "2"" of type '" "GRT::MatrixFloat""'");
    } else {
      GRT::MatrixFloat * temp = reinterpret_cast< GRT::MatrixFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->predict(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GestureRecognitionPipeline_predict(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_predict_SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GestureRecognitionPipeline, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GestureRecognitionPipeline_predict_SWIG_0_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GestureRecognitionPipeline_predict'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    predict(GRT::VectorFloat)\n"
    "    predict(GRT::MatrixFloat)\n");
  return 0;
}


SWIGINTERN PyObject *GestureRecognitionPipeline_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__GestureRecognitionPipeline, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_KNN__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  bool arg2 ;
  bool arg3 ;
  GRT::Float arg4 ;
  bool arg5 ;
  UINT arg6 ;
  UINT arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  GRT::KNN *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_KNN",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KNN" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_KNN" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_KNN" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_KNN" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_KNN" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_KNN" "', argument " "6"" of type '" "UINT""'");
  } 
  arg6 = static_cast< UINT >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_KNN" "', argument " "7"" of type '" "UINT""'");
  } 
  arg7 = static_cast< UINT >(val7);
  result = (GRT::KNN *)new GRT::KNN(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__KNN, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KNN__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  bool arg2 ;
  bool arg3 ;
  GRT::Float arg4 ;
  bool arg5 ;
  UINT arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  GRT::KNN *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_KNN",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KNN" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_KNN" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_KNN" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_KNN" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_KNN" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_KNN" "', argument " "6"" of type '" "UINT""'");
  } 
  arg6 = static_cast< UINT >(val6);
  result = (GRT::KNN *)new GRT::KNN(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__KNN, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KNN__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  bool arg2 ;
  bool arg3 ;
  GRT::Float arg4 ;
  bool arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::KNN *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_KNN",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KNN" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_KNN" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_KNN" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_KNN" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_KNN" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (GRT::KNN *)new GRT::KNN(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__KNN, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KNN__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  bool arg2 ;
  bool arg3 ;
  GRT::Float arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::KNN *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_KNN",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KNN" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_KNN" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_KNN" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_KNN" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = (GRT::KNN *)new GRT::KNN(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__KNN, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KNN__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  bool arg2 ;
  bool arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::KNN *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_KNN",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KNN" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_KNN" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_KNN" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (GRT::KNN *)new GRT::KNN(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__KNN, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KNN__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::KNN *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_KNN",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KNN" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_KNN" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (GRT::KNN *)new GRT::KNN(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__KNN, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KNN__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::KNN *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KNN",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KNN" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  result = (GRT::KNN *)new GRT::KNN(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__KNN, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KNN__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_KNN")) SWIG_fail;
  result = (GRT::KNN *)new GRT::KNN();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__KNN, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KNN__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::KNN *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KNN",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__KNN,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KNN" "', argument " "1"" of type '" "GRT::KNN const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KNN" "', argument " "1"" of type '" "GRT::KNN const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  result = (GRT::KNN *)new GRT::KNN((GRT::KNN const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__KNN, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KNN(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_KNN__SWIG_7(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__KNN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_KNN__SWIG_8(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_KNN__SWIG_6(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_KNN__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_KNN__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_KNN__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_KNN__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_KNN__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_KNN__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_KNN'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::KNN::KNN(UINT,bool,bool,GRT::Float,bool,UINT,UINT)\n"
    "    GRT::KNN::KNN(UINT,bool,bool,GRT::Float,bool,UINT)\n"
    "    GRT::KNN::KNN(UINT,bool,bool,GRT::Float,bool)\n"
    "    GRT::KNN::KNN(UINT,bool,bool,GRT::Float)\n"
    "    GRT::KNN::KNN(UINT,bool,bool)\n"
    "    GRT::KNN::KNN(UINT,bool)\n"
    "    GRT::KNN::KNN(UINT)\n"
    "    GRT::KNN::KNN()\n"
    "    GRT::KNN::KNN(GRT::KNN const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_KNN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_KNN",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KNN" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  GRT::Classifier *arg2 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_deepCopyFrom" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KNN_deepCopyFrom" "', argument " "2"" of type '" "GRT::Classifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Classifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_train_" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KNN_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KNN_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_predict_" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KNN_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KNN_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KNN_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_clear" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_save" "', argument " "1"" of type '" "GRT::KNN const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KNN_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KNN_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::KNN const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_load" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KNN_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KNN_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_recomputeNullRejectionThresholds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KNN_recomputeNullRejectionThresholds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_recomputeNullRejectionThresholds" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  result = (bool)(arg1)->recomputeNullRejectionThresholds();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_getK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KNN_getK",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_getK" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  result = (arg1)->getK();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_getDistanceMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KNN_getDistanceMethod",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_getDistanceMethod" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  result = (arg1)->getDistanceMethod();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_setK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_setK",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_setK" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KNN_setK" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setK(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_setMinKSearchValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_setMinKSearchValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_setMinKSearchValue" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KNN_setMinKSearchValue" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setMinKSearchValue(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_setMaxKSearchValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_setMaxKSearchValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_setMaxKSearchValue" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KNN_setMaxKSearchValue" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setMaxKSearchValue(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_enableBestKValueSearch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_enableBestKValueSearch",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_enableBestKValueSearch" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KNN_enableBestKValueSearch" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->enableBestKValueSearch(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_setNullRejectionCoeff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_setNullRejectionCoeff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_setNullRejectionCoeff" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KNN_setNullRejectionCoeff" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setNullRejectionCoeff(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_setDistanceMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_setDistanceMethod",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_setDistanceMethod" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KNN_setDistanceMethod" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setDistanceMethod(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":KNN_getId")) SWIG_fail;
  result = GRT::KNN::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_save__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_save" "', argument " "1"" of type '" "GRT::KNN const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KNN_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KNN_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::KNN const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KNN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KNN_save__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KNN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KNN_save__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KNN_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::KNN::save(std::fstream &) const\n"
    "    save(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KNN_load__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_load" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KNN_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KNN_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KNN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KNN_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KNN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KNN_load__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KNN_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::KNN::load(std::fstream &)\n"
    "    load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KNN_train___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_train_" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KNN_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KNN_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_train___SWIG_1_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  GRT::RegressionData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:KNN_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_train_" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KNN_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KNN_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KNN_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KNN_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  arg3 = reinterpret_cast< GRT::RegressionData * >(argp3);
  result = (bool)(arg1)->train_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_train___SWIG_1_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_train_" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KNN_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KNN_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_train___SWIG_1_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_train_" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KNN_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KNN_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_train___SWIG_1_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_train_" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KNN_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KNN_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_train___SWIG_1_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_train_" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KNN_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KNN_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KNN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KNN_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KNN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KNN_train___SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KNN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KNN_train___SWIG_1_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KNN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KNN_train___SWIG_1_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KNN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KNN_train___SWIG_1_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KNN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KNN_train___SWIG_1_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KNN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_KNN_train___SWIG_1_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KNN_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::KNN::train_(GRT::ClassificationData &)\n"
    "    train_(GRT::RegressionData &)\n"
    "    train_(GRT::RegressionData &,GRT::RegressionData &)\n"
    "    train_(GRT::TimeSeriesClassificationData &)\n"
    "    train_(GRT::ClassificationDataStream &)\n"
    "    train_(GRT::UnlabelledData &)\n"
    "    train_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KNN_predict___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_predict_" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KNN_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KNN_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KNN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KNN_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KNN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KNN_predict___SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KNN_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::KNN::predict_(GRT::VectorFloat &)\n"
    "    predict_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KNN_predict__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  GRT::VectorFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_predict" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KNN_predict" "', argument " "2"" of type '" "GRT::VectorFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KNN_predict" "', argument " "2"" of type '" "GRT::VectorFloat""'");
    } else {
      GRT::VectorFloat * temp = reinterpret_cast< GRT::VectorFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->predict(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_predict__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KNN *arg1 = (GRT::KNN *) 0 ;
  GRT::MatrixFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KNN_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KNN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KNN_predict" "', argument " "1"" of type '" "GRT::KNN *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KNN * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KNN_predict" "', argument " "2"" of type '" "GRT::MatrixFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KNN_predict" "', argument " "2"" of type '" "GRT::MatrixFloat""'");
    } else {
      GRT::MatrixFloat * temp = reinterpret_cast< GRT::MatrixFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->predict(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KNN_predict(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KNN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KNN_predict__SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KNN, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KNN_predict__SWIG_0_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KNN_predict'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    predict(GRT::VectorFloat)\n"
    "    predict(GRT::MatrixFloat)\n");
  return 0;
}


SWIGINTERN PyObject *KNN_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__KNN, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_WeakClassifier__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_WeakClassifier")) SWIG_fail;
  result = (GRT::WeakClassifier *)new GRT::WeakClassifier();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__WeakClassifier, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WeakClassifier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = (GRT::WeakClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WeakClassifier",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__WeakClassifier, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WeakClassifier" "', argument " "1"" of type '" "GRT::WeakClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WeakClassifier__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::WeakClassifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_WeakClassifier",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__WeakClassifier,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_WeakClassifier" "', argument " "1"" of type '" "GRT::WeakClassifier const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WeakClassifier" "', argument " "1"" of type '" "GRT::WeakClassifier const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  result = (GRT::WeakClassifier *)new GRT::WeakClassifier((GRT::WeakClassifier const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__WeakClassifier, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WeakClassifier(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_WeakClassifier__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__WeakClassifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_WeakClassifier__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_WeakClassifier'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::WeakClassifier::WeakClassifier()\n"
    "    GRT::WeakClassifier::WeakClassifier(GRT::WeakClassifier const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_WeakClassifier_copyBaseVariables(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = (GRT::WeakClassifier *) 0 ;
  GRT::WeakClassifier *arg2 = (GRT::WeakClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeakClassifier_copyBaseVariables",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeakClassifier_copyBaseVariables" "', argument " "1"" of type '" "GRT::WeakClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeakClassifier_copyBaseVariables" "', argument " "2"" of type '" "GRT::WeakClassifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::WeakClassifier * >(argp2);
  result = (bool)(arg1)->copyBaseVariables((GRT::WeakClassifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeakClassifier_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = (GRT::WeakClassifier *) 0 ;
  GRT::WeakClassifier *arg2 = (GRT::WeakClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeakClassifier_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeakClassifier_deepCopyFrom" "', argument " "1"" of type '" "GRT::WeakClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeakClassifier_deepCopyFrom" "', argument " "2"" of type '" "GRT::WeakClassifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::WeakClassifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::WeakClassifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeakClassifier_train(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = (GRT::WeakClassifier *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  GRT::VectorFloat *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WeakClassifier_train",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeakClassifier_train" "', argument " "1"" of type '" "GRT::WeakClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeakClassifier_train" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeakClassifier_train" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeakClassifier_train" "', argument " "3"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeakClassifier_train" "', argument " "3"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg3 = reinterpret_cast< GRT::VectorFloat * >(argp3);
  result = (bool)(arg1)->train(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeakClassifier_predict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = (GRT::WeakClassifier *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeakClassifier_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeakClassifier_predict" "', argument " "1"" of type '" "GRT::WeakClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeakClassifier_predict" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeakClassifier_predict" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (GRT::Float)(arg1)->predict((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeakClassifier_saveModelToFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = (GRT::WeakClassifier *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeakClassifier_saveModelToFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeakClassifier_saveModelToFile" "', argument " "1"" of type '" "GRT::WeakClassifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeakClassifier_saveModelToFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeakClassifier_saveModelToFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::WeakClassifier const *)arg1)->saveModelToFile(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeakClassifier_loadModelFromFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = (GRT::WeakClassifier *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeakClassifier_loadModelFromFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeakClassifier_loadModelFromFile" "', argument " "1"" of type '" "GRT::WeakClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeakClassifier_loadModelFromFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeakClassifier_loadModelFromFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->loadModelFromFile(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeakClassifier__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = (GRT::WeakClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeakClassifier__print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeakClassifier__print" "', argument " "1"" of type '" "GRT::WeakClassifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  ((GRT::WeakClassifier const *)arg1)->print();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeakClassifier_getPositiveClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = (GRT::WeakClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeakClassifier_getPositiveClassLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeakClassifier_getPositiveClassLabel" "', argument " "1"" of type '" "GRT::WeakClassifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  result = (GRT::Float)((GRT::WeakClassifier const *)arg1)->getPositiveClassLabel();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeakClassifier_getNegativeClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = (GRT::WeakClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeakClassifier_getNegativeClassLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeakClassifier_getNegativeClassLabel" "', argument " "1"" of type '" "GRT::WeakClassifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  result = (GRT::Float)((GRT::WeakClassifier const *)arg1)->getNegativeClassLabel();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeakClassifier_getWeakClassifierType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = (GRT::WeakClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeakClassifier_getWeakClassifierType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeakClassifier_getWeakClassifierType" "', argument " "1"" of type '" "GRT::WeakClassifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  result = ((GRT::WeakClassifier const *)arg1)->getWeakClassifierType();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeakClassifier_getTrained(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = (GRT::WeakClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeakClassifier_getTrained",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeakClassifier_getTrained" "', argument " "1"" of type '" "GRT::WeakClassifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  result = (bool)((GRT::WeakClassifier const *)arg1)->getTrained();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeakClassifier_getNumInputDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = (GRT::WeakClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeakClassifier_getNumInputDimensions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeakClassifier_getNumInputDimensions" "', argument " "1"" of type '" "GRT::WeakClassifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  result = ((GRT::WeakClassifier const *)arg1)->getNumInputDimensions();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeakClassifier_getTrainingLoggingEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = (GRT::WeakClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeakClassifier_getTrainingLoggingEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeakClassifier_getTrainingLoggingEnabled" "', argument " "1"" of type '" "GRT::WeakClassifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  result = (bool)((GRT::WeakClassifier const *)arg1)->getTrainingLoggingEnabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeakClassifier_setTrainingLoggingEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = (GRT::WeakClassifier *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeakClassifier_setTrainingLoggingEnabled",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeakClassifier_setTrainingLoggingEnabled" "', argument " "1"" of type '" "GRT::WeakClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeakClassifier_setTrainingLoggingEnabled" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setTrainingLoggingEnabled(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeakClassifier_createInstanceFromString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  GRT::WeakClassifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeakClassifier_createInstanceFromString",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeakClassifier_createInstanceFromString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeakClassifier_createInstanceFromString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (GRT::WeakClassifier *)GRT::WeakClassifier::createInstanceFromString((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeakClassifier_createNewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = (GRT::WeakClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::WeakClassifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeakClassifier_createNewInstance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeakClassifier_createNewInstance" "', argument " "1"" of type '" "GRT::WeakClassifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  result = (GRT::WeakClassifier *)((GRT::WeakClassifier const *)arg1)->createNewInstance();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WeakClassifier_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__WeakClassifier, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DecisionStump__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::DecisionStump *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DecisionStump",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DecisionStump" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  result = (GRT::DecisionStump *)new GRT::DecisionStump(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionStump, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DecisionStump__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionStump *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DecisionStump")) SWIG_fail;
  result = (GRT::DecisionStump *)new GRT::DecisionStump();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionStump, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DecisionStump(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionStump *arg1 = (GRT::DecisionStump *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DecisionStump",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionStump, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DecisionStump" "', argument " "1"" of type '" "GRT::DecisionStump *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionStump * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DecisionStump__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionStump *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::DecisionStump *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DecisionStump",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DecisionStump,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DecisionStump" "', argument " "1"" of type '" "GRT::DecisionStump const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DecisionStump" "', argument " "1"" of type '" "GRT::DecisionStump const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionStump * >(argp1);
  result = (GRT::DecisionStump *)new GRT::DecisionStump((GRT::DecisionStump const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionStump, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DecisionStump(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DecisionStump__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DecisionStump, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DecisionStump__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DecisionStump__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DecisionStump'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DecisionStump::DecisionStump(UINT const)\n"
    "    GRT::DecisionStump::DecisionStump()\n"
    "    GRT::DecisionStump::DecisionStump(GRT::DecisionStump const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DecisionStump_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionStump *arg1 = (GRT::DecisionStump *) 0 ;
  GRT::WeakClassifier *arg2 = (GRT::WeakClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionStump_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionStump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionStump_deepCopyFrom" "', argument " "1"" of type '" "GRT::DecisionStump *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionStump * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionStump_deepCopyFrom" "', argument " "2"" of type '" "GRT::WeakClassifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::WeakClassifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::WeakClassifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionStump_train(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionStump *arg1 = (GRT::DecisionStump *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  GRT::VectorFloat *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DecisionStump_train",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionStump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionStump_train" "', argument " "1"" of type '" "GRT::DecisionStump *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionStump * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionStump_train" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionStump_train" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DecisionStump_train" "', argument " "3"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionStump_train" "', argument " "3"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg3 = reinterpret_cast< GRT::VectorFloat * >(argp3);
  result = (bool)(arg1)->train(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionStump_predict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionStump *arg1 = (GRT::DecisionStump *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionStump_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionStump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionStump_predict" "', argument " "1"" of type '" "GRT::DecisionStump *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionStump * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionStump_predict" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionStump_predict" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (GRT::Float)(arg1)->predict((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionStump_saveModelToFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionStump *arg1 = (GRT::DecisionStump *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionStump_saveModelToFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionStump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionStump_saveModelToFile" "', argument " "1"" of type '" "GRT::DecisionStump const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionStump * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionStump_saveModelToFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionStump_saveModelToFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::DecisionStump const *)arg1)->saveModelToFile(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionStump_loadModelFromFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionStump *arg1 = (GRT::DecisionStump *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionStump_loadModelFromFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionStump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionStump_loadModelFromFile" "', argument " "1"" of type '" "GRT::DecisionStump *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionStump * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionStump_loadModelFromFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionStump_loadModelFromFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->loadModelFromFile(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionStump__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionStump *arg1 = (GRT::DecisionStump *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionStump__print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionStump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionStump__print" "', argument " "1"" of type '" "GRT::DecisionStump const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionStump * >(argp1);
  ((GRT::DecisionStump const *)arg1)->print();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionStump_getDecisionFeatureIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionStump *arg1 = (GRT::DecisionStump *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionStump_getDecisionFeatureIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionStump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionStump_getDecisionFeatureIndex" "', argument " "1"" of type '" "GRT::DecisionStump const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionStump * >(argp1);
  result = ((GRT::DecisionStump const *)arg1)->getDecisionFeatureIndex();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionStump_getDirection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionStump *arg1 = (GRT::DecisionStump *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionStump_getDirection",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionStump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionStump_getDirection" "', argument " "1"" of type '" "GRT::DecisionStump const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionStump * >(argp1);
  result = ((GRT::DecisionStump const *)arg1)->getDirection();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionStump_getNumRandomSplits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionStump *arg1 = (GRT::DecisionStump *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionStump_getNumRandomSplits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionStump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionStump_getNumRandomSplits" "', argument " "1"" of type '" "GRT::DecisionStump const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionStump * >(argp1);
  result = ((GRT::DecisionStump const *)arg1)->getNumRandomSplits();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionStump_getDecisionValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionStump *arg1 = (GRT::DecisionStump *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionStump_getDecisionValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionStump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionStump_getDecisionValue" "', argument " "1"" of type '" "GRT::DecisionStump const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionStump * >(argp1);
  result = (GRT::Float)((GRT::DecisionStump const *)arg1)->getDecisionValue();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DecisionStump_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__DecisionStump, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RadialBasisFunction__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  GRT::Float arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::RadialBasisFunction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_RadialBasisFunction",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RadialBasisFunction" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RadialBasisFunction" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RadialBasisFunction" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RadialBasisFunction" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = (GRT::RadialBasisFunction *)new GRT::RadialBasisFunction(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__RadialBasisFunction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RadialBasisFunction__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::RadialBasisFunction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_RadialBasisFunction",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RadialBasisFunction" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RadialBasisFunction" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RadialBasisFunction" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  result = (GRT::RadialBasisFunction *)new GRT::RadialBasisFunction(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__RadialBasisFunction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RadialBasisFunction__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  GRT::Float arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::RadialBasisFunction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_RadialBasisFunction",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RadialBasisFunction" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RadialBasisFunction" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (GRT::RadialBasisFunction *)new GRT::RadialBasisFunction(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__RadialBasisFunction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RadialBasisFunction__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::RadialBasisFunction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RadialBasisFunction",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RadialBasisFunction" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  result = (GRT::RadialBasisFunction *)new GRT::RadialBasisFunction(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__RadialBasisFunction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RadialBasisFunction__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RadialBasisFunction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RadialBasisFunction")) SWIG_fail;
  result = (GRT::RadialBasisFunction *)new GRT::RadialBasisFunction();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__RadialBasisFunction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RadialBasisFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RadialBasisFunction *arg1 = (GRT::RadialBasisFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RadialBasisFunction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RadialBasisFunction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RadialBasisFunction" "', argument " "1"" of type '" "GRT::RadialBasisFunction *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RadialBasisFunction * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RadialBasisFunction__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RadialBasisFunction *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::RadialBasisFunction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RadialBasisFunction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__RadialBasisFunction,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RadialBasisFunction" "', argument " "1"" of type '" "GRT::RadialBasisFunction const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RadialBasisFunction" "', argument " "1"" of type '" "GRT::RadialBasisFunction const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::RadialBasisFunction * >(argp1);
  result = (GRT::RadialBasisFunction *)new GRT::RadialBasisFunction((GRT::RadialBasisFunction const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__RadialBasisFunction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RadialBasisFunction(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RadialBasisFunction__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__RadialBasisFunction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RadialBasisFunction__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RadialBasisFunction__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_RadialBasisFunction__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_RadialBasisFunction__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_RadialBasisFunction__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RadialBasisFunction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::RadialBasisFunction::RadialBasisFunction(UINT,GRT::Float,GRT::Float,GRT::Float)\n"
    "    GRT::RadialBasisFunction::RadialBasisFunction(UINT,GRT::Float,GRT::Float)\n"
    "    GRT::RadialBasisFunction::RadialBasisFunction(UINT,GRT::Float)\n"
    "    GRT::RadialBasisFunction::RadialBasisFunction(UINT)\n"
    "    GRT::RadialBasisFunction::RadialBasisFunction()\n"
    "    GRT::RadialBasisFunction::RadialBasisFunction(GRT::RadialBasisFunction const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RadialBasisFunction_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RadialBasisFunction *arg1 = (GRT::RadialBasisFunction *) 0 ;
  GRT::WeakClassifier *arg2 = (GRT::WeakClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadialBasisFunction_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RadialBasisFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBasisFunction_deepCopyFrom" "', argument " "1"" of type '" "GRT::RadialBasisFunction *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RadialBasisFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__WeakClassifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadialBasisFunction_deepCopyFrom" "', argument " "2"" of type '" "GRT::WeakClassifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::WeakClassifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::WeakClassifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBasisFunction_train(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RadialBasisFunction *arg1 = (GRT::RadialBasisFunction *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  GRT::VectorFloat *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RadialBasisFunction_train",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RadialBasisFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBasisFunction_train" "', argument " "1"" of type '" "GRT::RadialBasisFunction *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RadialBasisFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadialBasisFunction_train" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadialBasisFunction_train" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RadialBasisFunction_train" "', argument " "3"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadialBasisFunction_train" "', argument " "3"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg3 = reinterpret_cast< GRT::VectorFloat * >(argp3);
  result = (bool)(arg1)->train(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBasisFunction_predict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RadialBasisFunction *arg1 = (GRT::RadialBasisFunction *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadialBasisFunction_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RadialBasisFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBasisFunction_predict" "', argument " "1"" of type '" "GRT::RadialBasisFunction *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RadialBasisFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadialBasisFunction_predict" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadialBasisFunction_predict" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (GRT::Float)(arg1)->predict((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBasisFunction_saveModelToFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RadialBasisFunction *arg1 = (GRT::RadialBasisFunction *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadialBasisFunction_saveModelToFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RadialBasisFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBasisFunction_saveModelToFile" "', argument " "1"" of type '" "GRT::RadialBasisFunction const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RadialBasisFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadialBasisFunction_saveModelToFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadialBasisFunction_saveModelToFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::RadialBasisFunction const *)arg1)->saveModelToFile(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBasisFunction_loadModelFromFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RadialBasisFunction *arg1 = (GRT::RadialBasisFunction *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadialBasisFunction_loadModelFromFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RadialBasisFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBasisFunction_loadModelFromFile" "', argument " "1"" of type '" "GRT::RadialBasisFunction *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RadialBasisFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadialBasisFunction_loadModelFromFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadialBasisFunction_loadModelFromFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->loadModelFromFile(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBasisFunction__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RadialBasisFunction *arg1 = (GRT::RadialBasisFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialBasisFunction__print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RadialBasisFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBasisFunction__print" "', argument " "1"" of type '" "GRT::RadialBasisFunction const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RadialBasisFunction * >(argp1);
  ((GRT::RadialBasisFunction const *)arg1)->print();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBasisFunction_getNumSteps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RadialBasisFunction *arg1 = (GRT::RadialBasisFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialBasisFunction_getNumSteps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RadialBasisFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBasisFunction_getNumSteps" "', argument " "1"" of type '" "GRT::RadialBasisFunction const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RadialBasisFunction * >(argp1);
  result = ((GRT::RadialBasisFunction const *)arg1)->getNumSteps();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBasisFunction_getPositiveClassificationThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RadialBasisFunction *arg1 = (GRT::RadialBasisFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialBasisFunction_getPositiveClassificationThreshold",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RadialBasisFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBasisFunction_getPositiveClassificationThreshold" "', argument " "1"" of type '" "GRT::RadialBasisFunction const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RadialBasisFunction * >(argp1);
  result = (GRT::Float)((GRT::RadialBasisFunction const *)arg1)->getPositiveClassificationThreshold();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBasisFunction_getAlpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RadialBasisFunction *arg1 = (GRT::RadialBasisFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialBasisFunction_getAlpha",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RadialBasisFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBasisFunction_getAlpha" "', argument " "1"" of type '" "GRT::RadialBasisFunction const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RadialBasisFunction * >(argp1);
  result = (GRT::Float)((GRT::RadialBasisFunction const *)arg1)->getAlpha();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBasisFunction_getMinAlphaSearchRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RadialBasisFunction *arg1 = (GRT::RadialBasisFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialBasisFunction_getMinAlphaSearchRange",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RadialBasisFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBasisFunction_getMinAlphaSearchRange" "', argument " "1"" of type '" "GRT::RadialBasisFunction const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RadialBasisFunction * >(argp1);
  result = (GRT::Float)((GRT::RadialBasisFunction const *)arg1)->getMinAlphaSearchRange();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBasisFunction_getMaxAlphaSearchRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RadialBasisFunction *arg1 = (GRT::RadialBasisFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialBasisFunction_getMaxAlphaSearchRange",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RadialBasisFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBasisFunction_getMaxAlphaSearchRange" "', argument " "1"" of type '" "GRT::RadialBasisFunction const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RadialBasisFunction * >(argp1);
  result = (GRT::Float)((GRT::RadialBasisFunction const *)arg1)->getMaxAlphaSearchRange();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBasisFunction_getRBFCentre(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RadialBasisFunction *arg1 = (GRT::RadialBasisFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialBasisFunction_getRBFCentre",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RadialBasisFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBasisFunction_getRBFCentre" "', argument " "1"" of type '" "GRT::RadialBasisFunction const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RadialBasisFunction * >(argp1);
  result = ((GRT::RadialBasisFunction const *)arg1)->getRBFCentre();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RadialBasisFunction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__RadialBasisFunction, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AdaBoost__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  GRT::Float arg4 ;
  UINT arg5 ;
  UINT arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  GRT::AdaBoost *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_AdaBoost",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__WeakClassifier,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AdaBoost" "', argument " "1"" of type '" "GRT::WeakClassifier const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AdaBoost" "', argument " "1"" of type '" "GRT::WeakClassifier const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AdaBoost" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AdaBoost" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_AdaBoost" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_AdaBoost" "', argument " "5"" of type '" "UINT""'");
  } 
  arg5 = static_cast< UINT >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_AdaBoost" "', argument " "6"" of type '" "UINT""'");
  } 
  arg6 = static_cast< UINT >(val6);
  result = (GRT::AdaBoost *)new GRT::AdaBoost((GRT::WeakClassifier const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__AdaBoost, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AdaBoost__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  GRT::Float arg4 ;
  UINT arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::AdaBoost *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_AdaBoost",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__WeakClassifier,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AdaBoost" "', argument " "1"" of type '" "GRT::WeakClassifier const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AdaBoost" "', argument " "1"" of type '" "GRT::WeakClassifier const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AdaBoost" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AdaBoost" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_AdaBoost" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_AdaBoost" "', argument " "5"" of type '" "UINT""'");
  } 
  arg5 = static_cast< UINT >(val5);
  result = (GRT::AdaBoost *)new GRT::AdaBoost((GRT::WeakClassifier const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__AdaBoost, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AdaBoost__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  GRT::Float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::AdaBoost *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_AdaBoost",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__WeakClassifier,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AdaBoost" "', argument " "1"" of type '" "GRT::WeakClassifier const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AdaBoost" "', argument " "1"" of type '" "GRT::WeakClassifier const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AdaBoost" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AdaBoost" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_AdaBoost" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = (GRT::AdaBoost *)new GRT::AdaBoost((GRT::WeakClassifier const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__AdaBoost, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AdaBoost__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::AdaBoost *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_AdaBoost",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__WeakClassifier,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AdaBoost" "', argument " "1"" of type '" "GRT::WeakClassifier const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AdaBoost" "', argument " "1"" of type '" "GRT::WeakClassifier const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AdaBoost" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AdaBoost" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (GRT::AdaBoost *)new GRT::AdaBoost((GRT::WeakClassifier const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__AdaBoost, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AdaBoost__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::AdaBoost *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_AdaBoost",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__WeakClassifier,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AdaBoost" "', argument " "1"" of type '" "GRT::WeakClassifier const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AdaBoost" "', argument " "1"" of type '" "GRT::WeakClassifier const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AdaBoost" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (GRT::AdaBoost *)new GRT::AdaBoost((GRT::WeakClassifier const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__AdaBoost, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AdaBoost__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::WeakClassifier *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::AdaBoost *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AdaBoost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__WeakClassifier,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AdaBoost" "', argument " "1"" of type '" "GRT::WeakClassifier const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AdaBoost" "', argument " "1"" of type '" "GRT::WeakClassifier const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::WeakClassifier * >(argp1);
  result = (GRT::AdaBoost *)new GRT::AdaBoost((GRT::WeakClassifier const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__AdaBoost, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AdaBoost__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AdaBoost")) SWIG_fail;
  result = (GRT::AdaBoost *)new GRT::AdaBoost();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__AdaBoost, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AdaBoost__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::AdaBoost *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AdaBoost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__AdaBoost,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AdaBoost" "', argument " "1"" of type '" "GRT::AdaBoost const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AdaBoost" "', argument " "1"" of type '" "GRT::AdaBoost const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  result = (GRT::AdaBoost *)new GRT::AdaBoost((GRT::AdaBoost const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__AdaBoost, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AdaBoost(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AdaBoost__SWIG_6(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__WeakClassifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AdaBoost__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AdaBoost__SWIG_7(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__WeakClassifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_AdaBoost__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__WeakClassifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_AdaBoost__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__WeakClassifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_AdaBoost__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__WeakClassifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_AdaBoost__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__WeakClassifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_AdaBoost__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_AdaBoost'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::AdaBoost::AdaBoost(GRT::WeakClassifier const &,bool,bool,GRT::Float,UINT,UINT)\n"
    "    GRT::AdaBoost::AdaBoost(GRT::WeakClassifier const &,bool,bool,GRT::Float,UINT)\n"
    "    GRT::AdaBoost::AdaBoost(GRT::WeakClassifier const &,bool,bool,GRT::Float)\n"
    "    GRT::AdaBoost::AdaBoost(GRT::WeakClassifier const &,bool,bool)\n"
    "    GRT::AdaBoost::AdaBoost(GRT::WeakClassifier const &,bool)\n"
    "    GRT::AdaBoost::AdaBoost(GRT::WeakClassifier const &)\n"
    "    GRT::AdaBoost::AdaBoost()\n"
    "    GRT::AdaBoost::AdaBoost(GRT::AdaBoost const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_AdaBoost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AdaBoost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AdaBoost" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::Classifier *arg2 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_deepCopyFrom" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_deepCopyFrom" "', argument " "2"" of type '" "GRT::Classifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Classifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_train_" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_predict_" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AdaBoost_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_clear" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_save" "', argument " "1"" of type '" "GRT::AdaBoost const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::AdaBoost const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_load" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_recomputeNullRejectionThresholds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AdaBoost_recomputeNullRejectionThresholds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_recomputeNullRejectionThresholds" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  result = (bool)(arg1)->recomputeNullRejectionThresholds();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_setNullRejectionCoeff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_setNullRejectionCoeff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_setNullRejectionCoeff" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AdaBoost_setNullRejectionCoeff" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setNullRejectionCoeff(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_setWeakClassifier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::WeakClassifier *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_setWeakClassifier",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_setWeakClassifier" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__WeakClassifier,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_setWeakClassifier" "', argument " "2"" of type '" "GRT::WeakClassifier const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_setWeakClassifier" "', argument " "2"" of type '" "GRT::WeakClassifier const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::WeakClassifier * >(argp2);
  result = (bool)(arg1)->setWeakClassifier((GRT::WeakClassifier const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_addWeakClassifier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::WeakClassifier *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_addWeakClassifier",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_addWeakClassifier" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__WeakClassifier,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_addWeakClassifier" "', argument " "2"" of type '" "GRT::WeakClassifier const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_addWeakClassifier" "', argument " "2"" of type '" "GRT::WeakClassifier const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::WeakClassifier * >(argp2);
  result = (bool)(arg1)->addWeakClassifier((GRT::WeakClassifier const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_clearWeakClassifiers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AdaBoost_clearWeakClassifiers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_clearWeakClassifiers" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  result = (bool)(arg1)->clearWeakClassifiers();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_setNumBoostingIterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_setNumBoostingIterations",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_setNumBoostingIterations" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AdaBoost_setNumBoostingIterations" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNumBoostingIterations(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_setPredictionMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_setPredictionMethod",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_setPredictionMethod" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AdaBoost_setPredictionMethod" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setPredictionMethod(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_printModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AdaBoost_printModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_printModel" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  (arg1)->printModel();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_getModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< AdaBoostClassModel > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AdaBoost_getModels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_getModels" "', argument " "1"" of type '" "GRT::AdaBoost const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  result = ((GRT::AdaBoost const *)arg1)->getModels();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< AdaBoostClassModel >(static_cast< const GRT::Vector< AdaBoostClassModel >& >(result))), SWIGTYPE_p_GRT__VectorT_AdaBoostClassModel_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":AdaBoost_getId")) SWIG_fail;
  result = GRT::AdaBoost::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_save__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_save" "', argument " "1"" of type '" "GRT::AdaBoost const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::AdaBoost const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_save__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_save__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'AdaBoost_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::AdaBoost::save(std::fstream &) const\n"
    "    save(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AdaBoost_load__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_load" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_load__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'AdaBoost_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::AdaBoost::load(std::fstream &)\n"
    "    load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AdaBoost_train_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::ClassificationData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_train" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_train" "', argument " "2"" of type '" "GRT::ClassificationData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_train" "', argument " "2"" of type '" "GRT::ClassificationData""'");
    } else {
      GRT::ClassificationData * temp = reinterpret_cast< GRT::ClassificationData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_train_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::RegressionData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_train" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_train" "', argument " "2"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_train" "', argument " "2"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_train_SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::RegressionData arg2 ;
  GRT::RegressionData arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AdaBoost_train",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_train" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_train" "', argument " "2"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_train" "', argument " "2"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AdaBoost_train" "', argument " "3"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_train" "', argument " "3"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_train_SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::TimeSeriesClassificationData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_train" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData""'");
    } else {
      GRT::TimeSeriesClassificationData * temp = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_train_SWIG_0_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::ClassificationDataStream arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_train" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_train" "', argument " "2"" of type '" "GRT::ClassificationDataStream""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_train" "', argument " "2"" of type '" "GRT::ClassificationDataStream""'");
    } else {
      GRT::ClassificationDataStream * temp = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_train_SWIG_0_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::UnlabelledData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_train" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_train" "', argument " "2"" of type '" "GRT::UnlabelledData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_train" "', argument " "2"" of type '" "GRT::UnlabelledData""'");
    } else {
      GRT::UnlabelledData * temp = reinterpret_cast< GRT::UnlabelledData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_train_SWIG_0_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::MatrixFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_train" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_train" "', argument " "2"" of type '" "GRT::MatrixFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_train" "', argument " "2"" of type '" "GRT::MatrixFloat""'");
    } else {
      GRT::MatrixFloat * temp = reinterpret_cast< GRT::MatrixFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_train(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_train_SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_train_SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_train_SWIG_0_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_train_SWIG_0_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_train_SWIG_0_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_train_SWIG_0_6(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_AdaBoost_train_SWIG_0_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'AdaBoost_train'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    train(GRT::ClassificationData)\n"
    "    train(GRT::RegressionData)\n"
    "    train(GRT::RegressionData,GRT::RegressionData)\n"
    "    train(GRT::TimeSeriesClassificationData)\n"
    "    train(GRT::ClassificationDataStream)\n"
    "    train(GRT::UnlabelledData)\n"
    "    train(GRT::MatrixFloat)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AdaBoost_train___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_train_" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_train___SWIG_1_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  GRT::RegressionData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AdaBoost_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_train_" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AdaBoost_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  arg3 = reinterpret_cast< GRT::RegressionData * >(argp3);
  result = (bool)(arg1)->train_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_train___SWIG_1_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_train_" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_train___SWIG_1_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_train_" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_train___SWIG_1_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_train_" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_train___SWIG_1_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_train_" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_train___SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_train___SWIG_1_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_train___SWIG_1_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_train___SWIG_1_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_train___SWIG_1_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_AdaBoost_train___SWIG_1_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'AdaBoost_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::AdaBoost::train_(GRT::ClassificationData &)\n"
    "    train_(GRT::RegressionData &)\n"
    "    train_(GRT::RegressionData &,GRT::RegressionData &)\n"
    "    train_(GRT::TimeSeriesClassificationData &)\n"
    "    train_(GRT::ClassificationDataStream &)\n"
    "    train_(GRT::UnlabelledData &)\n"
    "    train_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AdaBoost_predict_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::VectorFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_predict" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_predict" "', argument " "2"" of type '" "GRT::VectorFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_predict" "', argument " "2"" of type '" "GRT::VectorFloat""'");
    } else {
      GRT::VectorFloat * temp = reinterpret_cast< GRT::VectorFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->predict(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_predict_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::MatrixFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_predict" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_predict" "', argument " "2"" of type '" "GRT::MatrixFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_predict" "', argument " "2"" of type '" "GRT::MatrixFloat""'");
    } else {
      GRT::MatrixFloat * temp = reinterpret_cast< GRT::MatrixFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->predict(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_predict(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_predict_SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_predict_SWIG_0_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'AdaBoost_predict'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    predict(GRT::VectorFloat)\n"
    "    predict(GRT::MatrixFloat)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AdaBoost_predict___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::AdaBoost *arg1 = (GRT::AdaBoost *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AdaBoost_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__AdaBoost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AdaBoost_predict_" "', argument " "1"" of type '" "GRT::AdaBoost *""'"); 
  }
  arg1 = reinterpret_cast< GRT::AdaBoost * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AdaBoost_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AdaBoost_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AdaBoost_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__AdaBoost, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AdaBoost_predict___SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'AdaBoost_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::AdaBoost::predict_(GRT::VectorFloat &)\n"
    "    predict_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *AdaBoost_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__AdaBoost, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ANBC_Model(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ANBC_Model")) SWIG_fail;
  result = (GRT::ANBC_Model *)new GRT::ANBC_Model();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ANBC_Model, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ANBC_Model(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ANBC_Model",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ANBC_Model" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_train(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  UINT arg2 ;
  GRT::MatrixDouble *arg3 = 0 ;
  GRT::VectorFloat *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ANBC_Model_train",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_train" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ANBC_Model_train" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ANBC_Model_train" "', argument " "3"" of type '" "GRT::MatrixDouble const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_Model_train" "', argument " "3"" of type '" "GRT::MatrixDouble const &""'"); 
  }
  arg3 = reinterpret_cast< GRT::MatrixDouble * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ANBC_Model_train" "', argument " "4"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_Model_train" "', argument " "4"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg4 = reinterpret_cast< GRT::VectorFloat * >(argp4);
  result = (bool)(arg1)->train(arg2,(GRT::MatrixDouble const &)*arg3,(GRT::VectorFloat const &)*arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_predict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_Model_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_predict" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_Model_predict" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_Model_predict" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (GRT::Float)(arg1)->predict((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_predictUnnormed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_Model_predictUnnormed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_predictUnnormed" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_Model_predictUnnormed" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_Model_predictUnnormed" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (GRT::Float)(arg1)->predictUnnormed((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_gauss(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  GRT::Float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ANBC_Model_gauss",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_gauss" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ANBC_Model_gauss" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ANBC_Model_gauss" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ANBC_Model_gauss" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = (GRT::Float)(arg1)->gauss(arg2,arg3,arg4);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_unnormedGauss(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  GRT::Float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ANBC_Model_unnormedGauss",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_unnormedGauss" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ANBC_Model_unnormedGauss" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ANBC_Model_unnormedGauss" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ANBC_Model_unnormedGauss" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = (GRT::Float)(arg1)->unnormedGauss(arg2,arg3,arg4);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_recomputeThresholdValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_Model_recomputeThresholdValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_recomputeThresholdValue" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ANBC_Model_recomputeThresholdValue" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  (arg1)->recomputeThresholdValue(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_N_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_Model_N_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_N_set" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ANBC_Model_N_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  if (arg1) (arg1)->N = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_N_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ANBC_Model_N_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_N_get" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  result =  ((arg1)->N);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_classLabel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_Model_classLabel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_classLabel_set" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ANBC_Model_classLabel_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  if (arg1) (arg1)->classLabel = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_classLabel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ANBC_Model_classLabel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_classLabel_get" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  result =  ((arg1)->classLabel);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_threshold_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_Model_threshold_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_threshold_set" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ANBC_Model_threshold_set" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  if (arg1) (arg1)->threshold = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_threshold_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ANBC_Model_threshold_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_threshold_get" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  result = (GRT::Float) ((arg1)->threshold);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_gamma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_Model_gamma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_gamma_set" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ANBC_Model_gamma_set" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  if (arg1) (arg1)->gamma = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_gamma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ANBC_Model_gamma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_gamma_get" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  result = (GRT::Float) ((arg1)->gamma);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_trainingMu_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_Model_trainingMu_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_trainingMu_set" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ANBC_Model_trainingMu_set" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  if (arg1) (arg1)->trainingMu = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_trainingMu_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ANBC_Model_trainingMu_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_trainingMu_get" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  result = (GRT::Float) ((arg1)->trainingMu);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_trainingSigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_Model_trainingSigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_trainingSigma_set" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ANBC_Model_trainingSigma_set" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  if (arg1) (arg1)->trainingSigma = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_trainingSigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ANBC_Model_trainingSigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_trainingSigma_get" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  result = (GRT::Float) ((arg1)->trainingSigma);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_mu_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_Model_mu_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_mu_set" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_Model_mu_set" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_Model_mu_set" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  if (arg1) (arg1)->mu = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_mu_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ANBC_Model_mu_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_mu_get" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  result = (GRT::VectorFloat *) & ((arg1)->mu);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_sigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_Model_sigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_sigma_set" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_Model_sigma_set" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_Model_sigma_set" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  if (arg1) (arg1)->sigma = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_sigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ANBC_Model_sigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_sigma_get" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  result = (GRT::VectorFloat *) & ((arg1)->sigma);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_weights_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_Model_weights_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_weights_set" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_Model_weights_set" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_Model_weights_set" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  if (arg1) (arg1)->weights = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_Model_weights_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC_Model *arg1 = (GRT::ANBC_Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ANBC_Model_weights_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC_Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_Model_weights_get" "', argument " "1"" of type '" "GRT::ANBC_Model *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC_Model * >(argp1);
  result = (GRT::VectorFloat *) & ((arg1)->weights);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ANBC_Model_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__ANBC_Model, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ANBC__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool arg2 ;
  double arg3 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::ANBC *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ANBC",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ANBC" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ANBC" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ANBC" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (GRT::ANBC *)new GRT::ANBC(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ANBC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ANBC__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool arg2 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::ANBC *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ANBC",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ANBC" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ANBC" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (GRT::ANBC *)new GRT::ANBC(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ANBC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ANBC__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ANBC *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ANBC",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ANBC" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (GRT::ANBC *)new GRT::ANBC(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ANBC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ANBC__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ANBC")) SWIG_fail;
  result = (GRT::ANBC *)new GRT::ANBC();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ANBC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ANBC__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ANBC *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ANBC",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__ANBC,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ANBC" "', argument " "1"" of type '" "GRT::ANBC const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ANBC" "', argument " "1"" of type '" "GRT::ANBC const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  result = (GRT::ANBC *)new GRT::ANBC((GRT::ANBC const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ANBC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ANBC(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ANBC__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__ANBC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ANBC__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ANBC__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ANBC__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ANBC__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ANBC'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ANBC::ANBC(bool,bool,double)\n"
    "    GRT::ANBC::ANBC(bool,bool)\n"
    "    GRT::ANBC::ANBC(bool)\n"
    "    GRT::ANBC::ANBC()\n"
    "    GRT::ANBC::ANBC(GRT::ANBC const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ANBC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ANBC",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ANBC" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  GRT::Classifier *arg2 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_deepCopyFrom" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_deepCopyFrom" "', argument " "2"" of type '" "GRT::Classifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Classifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_train_" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_predict_" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ANBC_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_reset" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  result = (bool)(arg1)->reset();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ANBC_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_clear" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_save" "', argument " "1"" of type '" "GRT::ANBC const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::ANBC const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_load" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_recomputeNullRejectionThresholds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ANBC_recomputeNullRejectionThresholds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_recomputeNullRejectionThresholds" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  result = (bool)(arg1)->recomputeNullRejectionThresholds();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_getNullRejectionThresholds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ANBC_getNullRejectionThresholds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_getNullRejectionThresholds" "', argument " "1"" of type '" "GRT::ANBC const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  result = ((GRT::ANBC const *)arg1)->getNullRejectionThresholds();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_getModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< GRT::ANBC_Model > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ANBC_getModels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_getModels" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  result = (arg1)->getModels();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< GRT::ANBC_Model >(static_cast< const GRT::Vector< GRT::ANBC_Model >& >(result))), SWIGTYPE_p_GRT__VectorT_GRT__ANBC_Model_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_setNullRejectionCoeff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_setNullRejectionCoeff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_setNullRejectionCoeff" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ANBC_setNullRejectionCoeff" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)(arg1)->setNullRejectionCoeff(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_setWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_setWeights",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_setWeights" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_setWeights" "', argument " "2"" of type '" "GRT::ClassificationData const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_setWeights" "', argument " "2"" of type '" "GRT::ClassificationData const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->setWeights((GRT::ClassificationData const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_clearWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ANBC_clearWeights",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_clearWeights" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  result = (bool)(arg1)->clearWeights();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":ANBC_getId")) SWIG_fail;
  result = GRT::ANBC::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_save__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_save" "', argument " "1"" of type '" "GRT::ANBC const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::ANBC const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ANBC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ANBC_save__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ANBC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ANBC_save__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ANBC_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ANBC::save(std::fstream &) const\n"
    "    save(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ANBC_load__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_load" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ANBC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ANBC_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ANBC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ANBC_load__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ANBC_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ANBC::load(std::fstream &)\n"
    "    load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ANBC_train___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_train_" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_train___SWIG_1_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  GRT::RegressionData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ANBC_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_train_" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ANBC_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  arg3 = reinterpret_cast< GRT::RegressionData * >(argp3);
  result = (bool)(arg1)->train_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_train___SWIG_1_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_train_" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_train___SWIG_1_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_train_" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_train___SWIG_1_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_train_" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_train___SWIG_1_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_train_" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ANBC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ANBC_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ANBC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ANBC_train___SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ANBC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ANBC_train___SWIG_1_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ANBC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ANBC_train___SWIG_1_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ANBC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ANBC_train___SWIG_1_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ANBC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ANBC_train___SWIG_1_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ANBC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ANBC_train___SWIG_1_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ANBC_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ANBC::train_(GRT::ClassificationData &)\n"
    "    train_(GRT::RegressionData &)\n"
    "    train_(GRT::RegressionData &,GRT::RegressionData &)\n"
    "    train_(GRT::TimeSeriesClassificationData &)\n"
    "    train_(GRT::ClassificationDataStream &)\n"
    "    train_(GRT::UnlabelledData &)\n"
    "    train_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ANBC_predict___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ANBC *arg1 = (GRT::ANBC *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ANBC_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ANBC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ANBC_predict_" "', argument " "1"" of type '" "GRT::ANBC *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ANBC * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ANBC_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ANBC_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ANBC_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ANBC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ANBC_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ANBC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ANBC_predict___SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ANBC_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ANBC::predict_(GRT::VectorFloat &)\n"
    "    predict_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *ANBC_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__ANBC, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BAG__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::BAG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BAG",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BAG" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (GRT::BAG *)new GRT::BAG(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__BAG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BAG__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BAG")) SWIG_fail;
  result = (GRT::BAG *)new GRT::BAG();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__BAG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BAG__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::BAG *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BAG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__BAG,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BAG" "', argument " "1"" of type '" "GRT::BAG const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BAG" "', argument " "1"" of type '" "GRT::BAG const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  result = (GRT::BAG *)new GRT::BAG((GRT::BAG const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__BAG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BAG(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_BAG__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__BAG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BAG__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BAG__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BAG'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::BAG::BAG(bool)\n"
    "    GRT::BAG::BAG()\n"
    "    GRT::BAG::BAG(GRT::BAG const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_BAG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BAG",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BAG" "', argument " "1"" of type '" "GRT::BAG *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  GRT::Classifier *arg2 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BAG_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_deepCopyFrom" "', argument " "1"" of type '" "GRT::BAG *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BAG_deepCopyFrom" "', argument " "2"" of type '" "GRT::Classifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Classifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BAG_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_train_" "', argument " "1"" of type '" "GRT::BAG *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BAG_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BAG_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BAG_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_predict_" "', argument " "1"" of type '" "GRT::BAG *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BAG_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BAG_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BAG_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_reset" "', argument " "1"" of type '" "GRT::BAG *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  result = (bool)(arg1)->reset();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BAG_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_clear" "', argument " "1"" of type '" "GRT::BAG *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BAG_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_save" "', argument " "1"" of type '" "GRT::BAG const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BAG_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BAG_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::BAG const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BAG_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_load" "', argument " "1"" of type '" "GRT::BAG *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BAG_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BAG_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_getEnsembleSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BAG_getEnsembleSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_getEnsembleSize" "', argument " "1"" of type '" "GRT::BAG const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  result = ((GRT::BAG const *)arg1)->getEnsembleSize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_getEnsembleWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BAG_getEnsembleWeights",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_getEnsembleWeights" "', argument " "1"" of type '" "GRT::BAG const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  result = ((GRT::BAG const *)arg1)->getEnsembleWeights();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_getEnsemble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< GRT::Classifier * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BAG_getEnsemble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_getEnsemble" "', argument " "1"" of type '" "GRT::BAG const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  result = ((GRT::BAG const *)arg1)->getEnsemble();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< GRT::Classifier * >(static_cast< const GRT::Vector< GRT::Classifier * >& >(result))), SWIGTYPE_p_GRT__VectorT_GRT__Classifier_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_addClassifierToEnsemble__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  GRT::Classifier *arg2 = 0 ;
  GRT::Float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BAG_addClassifierToEnsemble",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_addClassifierToEnsemble" "', argument " "1"" of type '" "GRT::BAG *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__Classifier,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BAG_addClassifierToEnsemble" "', argument " "2"" of type '" "GRT::Classifier const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BAG_addClassifierToEnsemble" "', argument " "2"" of type '" "GRT::Classifier const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BAG_addClassifierToEnsemble" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  result = (bool)(arg1)->addClassifierToEnsemble((GRT::Classifier const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_addClassifierToEnsemble__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  GRT::Classifier *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BAG_addClassifierToEnsemble",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_addClassifierToEnsemble" "', argument " "1"" of type '" "GRT::BAG *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__Classifier,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BAG_addClassifierToEnsemble" "', argument " "2"" of type '" "GRT::Classifier const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BAG_addClassifierToEnsemble" "', argument " "2"" of type '" "GRT::Classifier const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (bool)(arg1)->addClassifierToEnsemble((GRT::Classifier const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_addClassifierToEnsemble(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__BAG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__Classifier, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BAG_addClassifierToEnsemble__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__BAG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__Classifier, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BAG_addClassifierToEnsemble__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BAG_addClassifierToEnsemble'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::BAG::addClassifierToEnsemble(GRT::Classifier const &,GRT::Float)\n"
    "    GRT::BAG::addClassifierToEnsemble(GRT::Classifier const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BAG_clearEnsemble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BAG_clearEnsemble",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_clearEnsemble" "', argument " "1"" of type '" "GRT::BAG *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  result = (bool)(arg1)->clearEnsemble();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_setWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BAG_setWeights",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_setWeights" "', argument " "1"" of type '" "GRT::BAG *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BAG_setWeights" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BAG_setWeights" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->setWeights((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":BAG_getId")) SWIG_fail;
  result = GRT::BAG::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_save__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BAG_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_save" "', argument " "1"" of type '" "GRT::BAG const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BAG_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BAG_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::BAG const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__BAG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BAG_save__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__BAG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BAG_save__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BAG_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::BAG::save(std::fstream &) const\n"
    "    save(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BAG_load__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BAG_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_load" "', argument " "1"" of type '" "GRT::BAG *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BAG_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BAG_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__BAG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BAG_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__BAG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BAG_load__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BAG_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::BAG::load(std::fstream &)\n"
    "    load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BAG_train___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BAG_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_train_" "', argument " "1"" of type '" "GRT::BAG *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BAG_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BAG_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_train___SWIG_1_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  GRT::RegressionData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BAG_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_train_" "', argument " "1"" of type '" "GRT::BAG *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BAG_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BAG_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BAG_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BAG_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  arg3 = reinterpret_cast< GRT::RegressionData * >(argp3);
  result = (bool)(arg1)->train_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_train___SWIG_1_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BAG_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_train_" "', argument " "1"" of type '" "GRT::BAG *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BAG_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BAG_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_train___SWIG_1_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BAG_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_train_" "', argument " "1"" of type '" "GRT::BAG *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BAG_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BAG_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_train___SWIG_1_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BAG_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_train_" "', argument " "1"" of type '" "GRT::BAG *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BAG_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BAG_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_train___SWIG_1_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BAG_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_train_" "', argument " "1"" of type '" "GRT::BAG *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BAG_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BAG_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__BAG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BAG_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__BAG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BAG_train___SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__BAG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BAG_train___SWIG_1_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__BAG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BAG_train___SWIG_1_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__BAG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BAG_train___SWIG_1_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__BAG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BAG_train___SWIG_1_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__BAG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BAG_train___SWIG_1_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BAG_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::BAG::train_(GRT::ClassificationData &)\n"
    "    train_(GRT::RegressionData &)\n"
    "    train_(GRT::RegressionData &,GRT::RegressionData &)\n"
    "    train_(GRT::TimeSeriesClassificationData &)\n"
    "    train_(GRT::ClassificationDataStream &)\n"
    "    train_(GRT::UnlabelledData &)\n"
    "    train_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BAG_predict___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::BAG *arg1 = (GRT::BAG *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BAG_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__BAG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BAG_predict_" "', argument " "1"" of type '" "GRT::BAG *""'"); 
  }
  arg1 = reinterpret_cast< GRT::BAG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BAG_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BAG_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BAG_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__BAG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BAG_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__BAG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BAG_predict___SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BAG_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::BAG::predict_(GRT::VectorFloat &)\n"
    "    predict_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *BAG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__BAG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DecisionTreeNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  GRT::DecisionTreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DecisionTreeNode",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DecisionTreeNode" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (GRT::DecisionTreeNode *)new GRT::DecisionTreeNode(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionTreeNode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DecisionTreeNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DecisionTreeNode")) SWIG_fail;
  result = (GRT::DecisionTreeNode *)new GRT::DecisionTreeNode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionTreeNode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DecisionTreeNode(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DecisionTreeNode__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DecisionTreeNode__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DecisionTreeNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DecisionTreeNode::DecisionTreeNode(std::string const)\n"
    "    GRT::DecisionTreeNode::DecisionTreeNode()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DecisionTreeNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = (GRT::DecisionTreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DecisionTreeNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DecisionTreeNode" "', argument " "1"" of type '" "GRT::DecisionTreeNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeNode_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = (GRT::DecisionTreeNode *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  GRT::VectorFloat *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DecisionTreeNode_predict_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeNode_predict_" "', argument " "1"" of type '" "GRT::DecisionTreeNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTreeNode_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeNode_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DecisionTreeNode_predict_" "', argument " "3"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeNode_predict_" "', argument " "3"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg3 = reinterpret_cast< GRT::VectorFloat * >(argp3);
  result = (bool)(arg1)->predict_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeNode_computeBestSplit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = (GRT::DecisionTreeNode *) 0 ;
  UINT *arg2 = 0 ;
  UINT *arg3 = 0 ;
  GRT::ClassificationData *arg4 = 0 ;
  GRT::Vector< UINT > *arg5 = 0 ;
  GRT::Vector< UINT > *arg6 = 0 ;
  UINT *arg7 = 0 ;
  GRT::Float *arg8 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:DecisionTreeNode_computeBestSplit",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeNode_computeBestSplit" "', argument " "1"" of type '" "GRT::DecisionTreeNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UINT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTreeNode_computeBestSplit" "', argument " "2"" of type '" "UINT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeNode_computeBestSplit" "', argument " "2"" of type '" "UINT const &""'"); 
  }
  arg2 = reinterpret_cast< UINT * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_UINT,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DecisionTreeNode_computeBestSplit" "', argument " "3"" of type '" "UINT const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeNode_computeBestSplit" "', argument " "3"" of type '" "UINT const &""'"); 
  }
  arg3 = reinterpret_cast< UINT * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_GRT__ClassificationData,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DecisionTreeNode_computeBestSplit" "', argument " "4"" of type '" "GRT::ClassificationData const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeNode_computeBestSplit" "', argument " "4"" of type '" "GRT::ClassificationData const &""'"); 
  }
  arg4 = reinterpret_cast< GRT::ClassificationData * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_GRT__VectorT_UINT_t,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DecisionTreeNode_computeBestSplit" "', argument " "5"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeNode_computeBestSplit" "', argument " "5"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  arg5 = reinterpret_cast< GRT::Vector< UINT > * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_GRT__VectorT_UINT_t,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DecisionTreeNode_computeBestSplit" "', argument " "6"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeNode_computeBestSplit" "', argument " "6"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  arg6 = reinterpret_cast< GRT::Vector< UINT > * >(argp6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_UINT,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "DecisionTreeNode_computeBestSplit" "', argument " "7"" of type '" "UINT &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeNode_computeBestSplit" "', argument " "7"" of type '" "UINT &""'"); 
  }
  arg7 = reinterpret_cast< UINT * >(argp7);
  res8 = SWIG_ConvertPtr(obj7, &argp8, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "DecisionTreeNode_computeBestSplit" "', argument " "8"" of type '" "GRT::Float &""'"); 
  }
  if (!argp8) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeNode_computeBestSplit" "', argument " "8"" of type '" "GRT::Float &""'"); 
  }
  arg8 = reinterpret_cast< GRT::Float * >(argp8);
  result = (bool)(arg1)->computeBestSplit((UINT const &)*arg2,(UINT const &)*arg3,(GRT::ClassificationData const &)*arg4,(GRT::Vector< UINT > const &)*arg5,(GRT::Vector< UINT > const &)*arg6,*arg7,*arg8);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeNode_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = (GRT::DecisionTreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeNode_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeNode_clear" "', argument " "1"" of type '" "GRT::DecisionTreeNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeNode_getModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = (GRT::DecisionTreeNode *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTreeNode_getModel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeNode_getModel" "', argument " "1"" of type '" "GRT::DecisionTreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTreeNode_getModel" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeNode_getModel" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (bool)((GRT::DecisionTreeNode const *)arg1)->getModel(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeNode_deepCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = (GRT::DecisionTreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeNode_deepCopy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeNode_deepCopy" "', argument " "1"" of type '" "GRT::DecisionTreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  result = (Node *)((GRT::DecisionTreeNode const *)arg1)->deepCopy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeNode_getNodeSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = (GRT::DecisionTreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeNode_getNodeSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeNode_getNodeSize" "', argument " "1"" of type '" "GRT::DecisionTreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  result = ((GRT::DecisionTreeNode const *)arg1)->getNodeSize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeNode_getNumClasses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = (GRT::DecisionTreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeNode_getNumClasses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeNode_getNumClasses" "', argument " "1"" of type '" "GRT::DecisionTreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  result = ((GRT::DecisionTreeNode const *)arg1)->getNumClasses();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeNode_getClassProbabilities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = (GRT::DecisionTreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeNode_getClassProbabilities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeNode_getClassProbabilities" "', argument " "1"" of type '" "GRT::DecisionTreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  result = ((GRT::DecisionTreeNode const *)arg1)->getClassProbabilities();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeNode_setLeafNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = (GRT::DecisionTreeNode *) 0 ;
  UINT arg2 ;
  GRT::VectorFloat *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DecisionTreeNode_setLeafNode",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeNode_setLeafNode" "', argument " "1"" of type '" "GRT::DecisionTreeNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DecisionTreeNode_setLeafNode" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DecisionTreeNode_setLeafNode" "', argument " "3"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeNode_setLeafNode" "', argument " "3"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg3 = reinterpret_cast< GRT::VectorFloat * >(argp3);
  result = (bool)(arg1)->setLeafNode(arg2,(GRT::VectorFloat const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeNode_setNodeSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = (GRT::DecisionTreeNode *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTreeNode_setNodeSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeNode_setNodeSize" "', argument " "1"" of type '" "GRT::DecisionTreeNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DecisionTreeNode_setNodeSize" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNodeSize(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeNode_setClassProbabilities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = (GRT::DecisionTreeNode *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTreeNode_setClassProbabilities",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeNode_setClassProbabilities" "', argument " "1"" of type '" "GRT::DecisionTreeNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTreeNode_setClassProbabilities" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeNode_setClassProbabilities" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->setClassProbabilities((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeNode_getClassLabelIndexValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  GRT::Vector< UINT > *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTreeNode_getClassLabelIndexValue",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DecisionTreeNode_getClassLabelIndexValue" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_UINT_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTreeNode_getClassLabelIndexValue" "', argument " "2"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeNode_getClassLabelIndexValue" "', argument " "2"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< UINT > * >(argp2);
  result = GRT::DecisionTreeNode::getClassLabelIndexValue(arg1,(GRT::Vector< UINT > const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DecisionTreeNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__DecisionTreeNode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DecisionTreeThresholdNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeThresholdNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DecisionTreeThresholdNode")) SWIG_fail;
  result = (GRT::DecisionTreeThresholdNode *)new GRT::DecisionTreeThresholdNode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionTreeThresholdNode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DecisionTreeThresholdNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeThresholdNode *arg1 = (GRT::DecisionTreeThresholdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DecisionTreeThresholdNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeThresholdNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DecisionTreeThresholdNode" "', argument " "1"" of type '" "GRT::DecisionTreeThresholdNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeThresholdNode * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeThresholdNode_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeThresholdNode *arg1 = (GRT::DecisionTreeThresholdNode *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTreeThresholdNode_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeThresholdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeThresholdNode_predict_" "', argument " "1"" of type '" "GRT::DecisionTreeThresholdNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeThresholdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTreeThresholdNode_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeThresholdNode_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeThresholdNode_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeThresholdNode *arg1 = (GRT::DecisionTreeThresholdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeThresholdNode_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeThresholdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeThresholdNode_clear" "', argument " "1"" of type '" "GRT::DecisionTreeThresholdNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeThresholdNode * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeThresholdNode__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeThresholdNode *arg1 = (GRT::DecisionTreeThresholdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeThresholdNode__print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeThresholdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeThresholdNode__print" "', argument " "1"" of type '" "GRT::DecisionTreeThresholdNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeThresholdNode * >(argp1);
  result = (bool)((GRT::DecisionTreeThresholdNode const *)arg1)->print();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeThresholdNode_getModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeThresholdNode *arg1 = (GRT::DecisionTreeThresholdNode *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTreeThresholdNode_getModel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeThresholdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeThresholdNode_getModel" "', argument " "1"" of type '" "GRT::DecisionTreeThresholdNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeThresholdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTreeThresholdNode_getModel" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeThresholdNode_getModel" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (bool)((GRT::DecisionTreeThresholdNode const *)arg1)->getModel(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeThresholdNode_deepCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeThresholdNode *arg1 = (GRT::DecisionTreeThresholdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeThresholdNode_deepCopy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeThresholdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeThresholdNode_deepCopy" "', argument " "1"" of type '" "GRT::DecisionTreeThresholdNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeThresholdNode * >(argp1);
  result = (Node *)((GRT::DecisionTreeThresholdNode const *)arg1)->deepCopy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeThresholdNode_getFeatureIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeThresholdNode *arg1 = (GRT::DecisionTreeThresholdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeThresholdNode_getFeatureIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeThresholdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeThresholdNode_getFeatureIndex" "', argument " "1"" of type '" "GRT::DecisionTreeThresholdNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeThresholdNode * >(argp1);
  result = ((GRT::DecisionTreeThresholdNode const *)arg1)->getFeatureIndex();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeThresholdNode_getThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeThresholdNode *arg1 = (GRT::DecisionTreeThresholdNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeThresholdNode_getThreshold",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeThresholdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeThresholdNode_getThreshold" "', argument " "1"" of type '" "GRT::DecisionTreeThresholdNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeThresholdNode * >(argp1);
  result = (GRT::Float)((GRT::DecisionTreeThresholdNode const *)arg1)->getThreshold();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeThresholdNode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeThresholdNode *arg1 = (GRT::DecisionTreeThresholdNode *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  GRT::Float arg4 ;
  GRT::VectorFloat *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DecisionTreeThresholdNode_set",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeThresholdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeThresholdNode_set" "', argument " "1"" of type '" "GRT::DecisionTreeThresholdNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeThresholdNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DecisionTreeThresholdNode_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DecisionTreeThresholdNode_set" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DecisionTreeThresholdNode_set" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DecisionTreeThresholdNode_set" "', argument " "5"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeThresholdNode_set" "', argument " "5"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg5 = reinterpret_cast< GRT::VectorFloat * >(argp5);
  result = (bool)(arg1)->set(arg2,arg3,arg4,(GRT::VectorFloat const &)*arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeThresholdNode_predict___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeThresholdNode *arg1 = (GRT::DecisionTreeThresholdNode *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  GRT::VectorFloat *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DecisionTreeThresholdNode_predict_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeThresholdNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeThresholdNode_predict_" "', argument " "1"" of type '" "GRT::DecisionTreeThresholdNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeThresholdNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTreeThresholdNode_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeThresholdNode_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DecisionTreeThresholdNode_predict_" "', argument " "3"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeThresholdNode_predict_" "', argument " "3"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg3 = reinterpret_cast< GRT::VectorFloat * >(argp3);
  result = (bool)(arg1)->predict_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeThresholdNode_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DecisionTreeThresholdNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecisionTreeThresholdNode_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DecisionTreeThresholdNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DecisionTreeThresholdNode_predict___SWIG_1_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DecisionTreeThresholdNode_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DecisionTreeThresholdNode::predict_(GRT::VectorFloat &)\n"
    "    predict_(GRT::VectorFloat &,GRT::VectorFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *DecisionTreeThresholdNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__DecisionTreeThresholdNode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DecisionTreeTripleFeatureNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeTripleFeatureNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DecisionTreeTripleFeatureNode")) SWIG_fail;
  result = (GRT::DecisionTreeTripleFeatureNode *)new GRT::DecisionTreeTripleFeatureNode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionTreeTripleFeatureNode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DecisionTreeTripleFeatureNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeTripleFeatureNode *arg1 = (GRT::DecisionTreeTripleFeatureNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DecisionTreeTripleFeatureNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeTripleFeatureNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DecisionTreeTripleFeatureNode" "', argument " "1"" of type '" "GRT::DecisionTreeTripleFeatureNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeTripleFeatureNode * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeTripleFeatureNode_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeTripleFeatureNode *arg1 = (GRT::DecisionTreeTripleFeatureNode *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTreeTripleFeatureNode_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeTripleFeatureNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeTripleFeatureNode_predict_" "', argument " "1"" of type '" "GRT::DecisionTreeTripleFeatureNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeTripleFeatureNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTreeTripleFeatureNode_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeTripleFeatureNode_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeTripleFeatureNode_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeTripleFeatureNode *arg1 = (GRT::DecisionTreeTripleFeatureNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeTripleFeatureNode_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeTripleFeatureNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeTripleFeatureNode_clear" "', argument " "1"" of type '" "GRT::DecisionTreeTripleFeatureNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeTripleFeatureNode * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeTripleFeatureNode__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeTripleFeatureNode *arg1 = (GRT::DecisionTreeTripleFeatureNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeTripleFeatureNode__print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeTripleFeatureNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeTripleFeatureNode__print" "', argument " "1"" of type '" "GRT::DecisionTreeTripleFeatureNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeTripleFeatureNode * >(argp1);
  result = (bool)((GRT::DecisionTreeTripleFeatureNode const *)arg1)->print();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeTripleFeatureNode_getModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeTripleFeatureNode *arg1 = (GRT::DecisionTreeTripleFeatureNode *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTreeTripleFeatureNode_getModel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeTripleFeatureNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeTripleFeatureNode_getModel" "', argument " "1"" of type '" "GRT::DecisionTreeTripleFeatureNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeTripleFeatureNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTreeTripleFeatureNode_getModel" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeTripleFeatureNode_getModel" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (bool)((GRT::DecisionTreeTripleFeatureNode const *)arg1)->getModel(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeTripleFeatureNode_deepCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeTripleFeatureNode *arg1 = (GRT::DecisionTreeTripleFeatureNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeTripleFeatureNode_deepCopy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeTripleFeatureNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeTripleFeatureNode_deepCopy" "', argument " "1"" of type '" "GRT::DecisionTreeTripleFeatureNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeTripleFeatureNode * >(argp1);
  result = (Node *)((GRT::DecisionTreeTripleFeatureNode const *)arg1)->deepCopy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeTripleFeatureNode_getFeatureIndexA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeTripleFeatureNode *arg1 = (GRT::DecisionTreeTripleFeatureNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeTripleFeatureNode_getFeatureIndexA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeTripleFeatureNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeTripleFeatureNode_getFeatureIndexA" "', argument " "1"" of type '" "GRT::DecisionTreeTripleFeatureNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeTripleFeatureNode * >(argp1);
  result = ((GRT::DecisionTreeTripleFeatureNode const *)arg1)->getFeatureIndexA();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeTripleFeatureNode_getFeatureIndexB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeTripleFeatureNode *arg1 = (GRT::DecisionTreeTripleFeatureNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeTripleFeatureNode_getFeatureIndexB",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeTripleFeatureNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeTripleFeatureNode_getFeatureIndexB" "', argument " "1"" of type '" "GRT::DecisionTreeTripleFeatureNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeTripleFeatureNode * >(argp1);
  result = ((GRT::DecisionTreeTripleFeatureNode const *)arg1)->getFeatureIndexB();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeTripleFeatureNode_getFeatureIndexC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeTripleFeatureNode *arg1 = (GRT::DecisionTreeTripleFeatureNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeTripleFeatureNode_getFeatureIndexC",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeTripleFeatureNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeTripleFeatureNode_getFeatureIndexC" "', argument " "1"" of type '" "GRT::DecisionTreeTripleFeatureNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeTripleFeatureNode * >(argp1);
  result = ((GRT::DecisionTreeTripleFeatureNode const *)arg1)->getFeatureIndexC();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeTripleFeatureNode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeTripleFeatureNode *arg1 = (GRT::DecisionTreeTripleFeatureNode *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  UINT arg4 ;
  UINT arg5 ;
  GRT::VectorFloat *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:DecisionTreeTripleFeatureNode_set",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeTripleFeatureNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeTripleFeatureNode_set" "', argument " "1"" of type '" "GRT::DecisionTreeTripleFeatureNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeTripleFeatureNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DecisionTreeTripleFeatureNode_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DecisionTreeTripleFeatureNode_set" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DecisionTreeTripleFeatureNode_set" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DecisionTreeTripleFeatureNode_set" "', argument " "5"" of type '" "UINT""'");
  } 
  arg5 = static_cast< UINT >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "DecisionTreeTripleFeatureNode_set" "', argument " "6"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeTripleFeatureNode_set" "', argument " "6"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg6 = reinterpret_cast< GRT::VectorFloat * >(argp6);
  result = (bool)(arg1)->set(arg2,arg3,arg4,arg5,(GRT::VectorFloat const &)*arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeTripleFeatureNode_predict___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeTripleFeatureNode *arg1 = (GRT::DecisionTreeTripleFeatureNode *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  GRT::VectorFloat *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DecisionTreeTripleFeatureNode_predict_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeTripleFeatureNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeTripleFeatureNode_predict_" "', argument " "1"" of type '" "GRT::DecisionTreeTripleFeatureNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeTripleFeatureNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTreeTripleFeatureNode_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeTripleFeatureNode_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DecisionTreeTripleFeatureNode_predict_" "', argument " "3"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeTripleFeatureNode_predict_" "', argument " "3"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg3 = reinterpret_cast< GRT::VectorFloat * >(argp3);
  result = (bool)(arg1)->predict_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeTripleFeatureNode_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DecisionTreeTripleFeatureNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecisionTreeTripleFeatureNode_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DecisionTreeTripleFeatureNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DecisionTreeTripleFeatureNode_predict___SWIG_1_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DecisionTreeTripleFeatureNode_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DecisionTreeTripleFeatureNode::predict_(GRT::VectorFloat &)\n"
    "    predict_(GRT::VectorFloat &,GRT::VectorFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *DecisionTreeTripleFeatureNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__DecisionTreeTripleFeatureNode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DecisionTreeClusterNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeClusterNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DecisionTreeClusterNode")) SWIG_fail;
  result = (GRT::DecisionTreeClusterNode *)new GRT::DecisionTreeClusterNode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionTreeClusterNode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DecisionTreeClusterNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeClusterNode *arg1 = (GRT::DecisionTreeClusterNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DecisionTreeClusterNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeClusterNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DecisionTreeClusterNode" "', argument " "1"" of type '" "GRT::DecisionTreeClusterNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeClusterNode * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeClusterNode_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeClusterNode *arg1 = (GRT::DecisionTreeClusterNode *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTreeClusterNode_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeClusterNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeClusterNode_predict_" "', argument " "1"" of type '" "GRT::DecisionTreeClusterNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeClusterNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTreeClusterNode_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeClusterNode_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeClusterNode_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeClusterNode *arg1 = (GRT::DecisionTreeClusterNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeClusterNode_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeClusterNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeClusterNode_clear" "', argument " "1"" of type '" "GRT::DecisionTreeClusterNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeClusterNode * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeClusterNode__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeClusterNode *arg1 = (GRT::DecisionTreeClusterNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeClusterNode__print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeClusterNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeClusterNode__print" "', argument " "1"" of type '" "GRT::DecisionTreeClusterNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeClusterNode * >(argp1);
  result = (bool)((GRT::DecisionTreeClusterNode const *)arg1)->print();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeClusterNode_computeFeatureWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeClusterNode *arg1 = (GRT::DecisionTreeClusterNode *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTreeClusterNode_computeFeatureWeights",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeClusterNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeClusterNode_computeFeatureWeights" "', argument " "1"" of type '" "GRT::DecisionTreeClusterNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeClusterNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTreeClusterNode_computeFeatureWeights" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeClusterNode_computeFeatureWeights" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)((GRT::DecisionTreeClusterNode const *)arg1)->computeFeatureWeights(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeClusterNode_computeLeafNodeWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeClusterNode *arg1 = (GRT::DecisionTreeClusterNode *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTreeClusterNode_computeLeafNodeWeights",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeClusterNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeClusterNode_computeLeafNodeWeights" "', argument " "1"" of type '" "GRT::DecisionTreeClusterNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeClusterNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTreeClusterNode_computeLeafNodeWeights" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeClusterNode_computeLeafNodeWeights" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)((GRT::DecisionTreeClusterNode const *)arg1)->computeLeafNodeWeights(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeClusterNode_getModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeClusterNode *arg1 = (GRT::DecisionTreeClusterNode *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTreeClusterNode_getModel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeClusterNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeClusterNode_getModel" "', argument " "1"" of type '" "GRT::DecisionTreeClusterNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeClusterNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTreeClusterNode_getModel" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeClusterNode_getModel" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (bool)((GRT::DecisionTreeClusterNode const *)arg1)->getModel(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeClusterNode_deepCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeClusterNode *arg1 = (GRT::DecisionTreeClusterNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeClusterNode_deepCopy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeClusterNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeClusterNode_deepCopy" "', argument " "1"" of type '" "GRT::DecisionTreeClusterNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeClusterNode * >(argp1);
  result = (Node *)((GRT::DecisionTreeClusterNode const *)arg1)->deepCopy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeClusterNode_getFeatureIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeClusterNode *arg1 = (GRT::DecisionTreeClusterNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeClusterNode_getFeatureIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeClusterNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeClusterNode_getFeatureIndex" "', argument " "1"" of type '" "GRT::DecisionTreeClusterNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeClusterNode * >(argp1);
  result = ((GRT::DecisionTreeClusterNode const *)arg1)->getFeatureIndex();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeClusterNode_getThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeClusterNode *arg1 = (GRT::DecisionTreeClusterNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTreeClusterNode_getThreshold",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeClusterNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeClusterNode_getThreshold" "', argument " "1"" of type '" "GRT::DecisionTreeClusterNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeClusterNode * >(argp1);
  result = (GRT::Float)((GRT::DecisionTreeClusterNode const *)arg1)->getThreshold();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeClusterNode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeClusterNode *arg1 = (GRT::DecisionTreeClusterNode *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  GRT::Float arg4 ;
  GRT::VectorFloat *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DecisionTreeClusterNode_set",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeClusterNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeClusterNode_set" "', argument " "1"" of type '" "GRT::DecisionTreeClusterNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeClusterNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DecisionTreeClusterNode_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DecisionTreeClusterNode_set" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DecisionTreeClusterNode_set" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DecisionTreeClusterNode_set" "', argument " "5"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeClusterNode_set" "', argument " "5"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg5 = reinterpret_cast< GRT::VectorFloat * >(argp5);
  result = (bool)(arg1)->set(arg2,arg3,arg4,(GRT::VectorFloat const &)*arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeClusterNode_predict___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeClusterNode *arg1 = (GRT::DecisionTreeClusterNode *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  GRT::VectorFloat *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DecisionTreeClusterNode_predict_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTreeClusterNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTreeClusterNode_predict_" "', argument " "1"" of type '" "GRT::DecisionTreeClusterNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeClusterNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTreeClusterNode_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeClusterNode_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DecisionTreeClusterNode_predict_" "', argument " "3"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTreeClusterNode_predict_" "', argument " "3"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg3 = reinterpret_cast< GRT::VectorFloat * >(argp3);
  result = (bool)(arg1)->predict_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTreeClusterNode_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DecisionTreeClusterNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecisionTreeClusterNode_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DecisionTreeClusterNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DecisionTreeClusterNode_predict___SWIG_1_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DecisionTreeClusterNode_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DecisionTreeClusterNode::predict_(GRT::VectorFloat &)\n"
    "    predict_(GRT::VectorFloat &,GRT::VectorFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *DecisionTreeClusterNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__DecisionTreeClusterNode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DecisionTree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = 0 ;
  UINT arg2 ;
  UINT arg3 ;
  bool arg4 ;
  Tree::TrainingMode arg5 ;
  UINT arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  GRT::DecisionTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_DecisionTree",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DecisionTreeNode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DecisionTree" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DecisionTree" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DecisionTree" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DecisionTree" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DecisionTree" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_Tree__TrainingMode,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_DecisionTree" "', argument " "5"" of type '" "Tree::TrainingMode const""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DecisionTree" "', argument " "5"" of type '" "Tree::TrainingMode const""'");
    } else {
      Tree::TrainingMode * temp = reinterpret_cast< Tree::TrainingMode * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_DecisionTree" "', argument " "6"" of type '" "UINT""'");
  } 
  arg6 = static_cast< UINT >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_DecisionTree" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  result = (GRT::DecisionTree *)new GRT::DecisionTree((GRT::DecisionTreeNode const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DecisionTree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = 0 ;
  UINT arg2 ;
  UINT arg3 ;
  bool arg4 ;
  Tree::TrainingMode arg5 ;
  UINT arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  GRT::DecisionTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_DecisionTree",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DecisionTreeNode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DecisionTree" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DecisionTree" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DecisionTree" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DecisionTree" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DecisionTree" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_Tree__TrainingMode,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_DecisionTree" "', argument " "5"" of type '" "Tree::TrainingMode const""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DecisionTree" "', argument " "5"" of type '" "Tree::TrainingMode const""'");
    } else {
      Tree::TrainingMode * temp = reinterpret_cast< Tree::TrainingMode * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_DecisionTree" "', argument " "6"" of type '" "UINT""'");
  } 
  arg6 = static_cast< UINT >(val6);
  result = (GRT::DecisionTree *)new GRT::DecisionTree((GRT::DecisionTreeNode const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DecisionTree__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = 0 ;
  UINT arg2 ;
  UINT arg3 ;
  bool arg4 ;
  Tree::TrainingMode arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::DecisionTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_DecisionTree",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DecisionTreeNode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DecisionTree" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DecisionTree" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DecisionTree" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DecisionTree" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DecisionTree" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_Tree__TrainingMode,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_DecisionTree" "', argument " "5"" of type '" "Tree::TrainingMode const""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DecisionTree" "', argument " "5"" of type '" "Tree::TrainingMode const""'");
    } else {
      Tree::TrainingMode * temp = reinterpret_cast< Tree::TrainingMode * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (GRT::DecisionTree *)new GRT::DecisionTree((GRT::DecisionTreeNode const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DecisionTree__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = 0 ;
  UINT arg2 ;
  UINT arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::DecisionTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_DecisionTree",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DecisionTreeNode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DecisionTree" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DecisionTree" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DecisionTree" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DecisionTree" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DecisionTree" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (GRT::DecisionTree *)new GRT::DecisionTree((GRT::DecisionTreeNode const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DecisionTree__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = 0 ;
  UINT arg2 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::DecisionTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_DecisionTree",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DecisionTreeNode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DecisionTree" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DecisionTree" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DecisionTree" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DecisionTree" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (GRT::DecisionTree *)new GRT::DecisionTree((GRT::DecisionTreeNode const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DecisionTree__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::DecisionTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DecisionTree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DecisionTreeNode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DecisionTree" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DecisionTree" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DecisionTree" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (GRT::DecisionTree *)new GRT::DecisionTree((GRT::DecisionTreeNode const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DecisionTree__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::DecisionTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DecisionTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DecisionTreeNode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DecisionTree" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DecisionTree" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  result = (GRT::DecisionTree *)new GRT::DecisionTree((GRT::DecisionTreeNode const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DecisionTree__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DecisionTree")) SWIG_fail;
  result = (GRT::DecisionTree *)new GRT::DecisionTree();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DecisionTree__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::DecisionTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DecisionTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DecisionTree,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DecisionTree" "', argument " "1"" of type '" "GRT::DecisionTree const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DecisionTree" "', argument " "1"" of type '" "GRT::DecisionTree const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  result = (GRT::DecisionTree *)new GRT::DecisionTree((GRT::DecisionTree const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DecisionTree(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DecisionTree__SWIG_7(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DecisionTreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DecisionTree__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DecisionTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DecisionTree__SWIG_8(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DecisionTreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DecisionTree__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DecisionTreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_DecisionTree__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DecisionTreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_DecisionTree__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DecisionTreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_Tree__TrainingMode, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_DecisionTree__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DecisionTreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_Tree__TrainingMode, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_DecisionTree__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DecisionTreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_Tree__TrainingMode, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_DecisionTree__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DecisionTree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DecisionTree::DecisionTree(GRT::DecisionTreeNode const &,UINT const,UINT const,bool const,Tree::TrainingMode const,UINT const,bool const)\n"
    "    GRT::DecisionTree::DecisionTree(GRT::DecisionTreeNode const &,UINT const,UINT const,bool const,Tree::TrainingMode const,UINT const)\n"
    "    GRT::DecisionTree::DecisionTree(GRT::DecisionTreeNode const &,UINT const,UINT const,bool const,Tree::TrainingMode const)\n"
    "    GRT::DecisionTree::DecisionTree(GRT::DecisionTreeNode const &,UINT const,UINT const,bool const)\n"
    "    GRT::DecisionTree::DecisionTree(GRT::DecisionTreeNode const &,UINT const,UINT const)\n"
    "    GRT::DecisionTree::DecisionTree(GRT::DecisionTreeNode const &,UINT const)\n"
    "    GRT::DecisionTree::DecisionTree(GRT::DecisionTreeNode const &)\n"
    "    GRT::DecisionTree::DecisionTree()\n"
    "    GRT::DecisionTree::DecisionTree(GRT::DecisionTree const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DecisionTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DecisionTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DecisionTree" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  GRT::Classifier *arg2 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_deepCopyFrom" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTree_deepCopyFrom" "', argument " "2"" of type '" "GRT::Classifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Classifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_train_" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTree_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTree_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_predict_" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTree_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTree_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTree_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_clear" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_recomputeNullRejectionThresholds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTree_recomputeNullRejectionThresholds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_recomputeNullRejectionThresholds" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  result = (bool)(arg1)->recomputeNullRejectionThresholds();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_save" "', argument " "1"" of type '" "GRT::DecisionTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTree_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTree_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::DecisionTree const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_load" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTree_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTree_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_getModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_getModel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_getModel" "', argument " "1"" of type '" "GRT::DecisionTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTree_getModel" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTree_getModel" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  result = (bool)((GRT::DecisionTree const *)arg1)->getModel(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_deepCopyTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::DecisionTreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTree_deepCopyTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_deepCopyTree" "', argument " "1"" of type '" "GRT::DecisionTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  result = (GRT::DecisionTreeNode *)((GRT::DecisionTree const *)arg1)->deepCopyTree();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionTreeNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_deepCopyDecisionTreeNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::DecisionTreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTree_deepCopyDecisionTreeNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_deepCopyDecisionTreeNode" "', argument " "1"" of type '" "GRT::DecisionTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  result = (GRT::DecisionTreeNode *)((GRT::DecisionTree const *)arg1)->deepCopyDecisionTreeNode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionTreeNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_getTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::DecisionTreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTree_getTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_getTree" "', argument " "1"" of type '" "GRT::DecisionTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  result = (GRT::DecisionTreeNode *)((GRT::DecisionTree const *)arg1)->getTree();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionTreeNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_getTrainingMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Tree::TrainingMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTree_getTrainingMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_getTrainingMode" "', argument " "1"" of type '" "GRT::DecisionTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  result = ((GRT::DecisionTree const *)arg1)->getTrainingMode();
  resultobj = SWIG_NewPointerObj((new Tree::TrainingMode(static_cast< const Tree::TrainingMode& >(result))), SWIGTYPE_p_Tree__TrainingMode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_getNumSplittingSteps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTree_getNumSplittingSteps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_getNumSplittingSteps" "', argument " "1"" of type '" "GRT::DecisionTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  result = ((GRT::DecisionTree const *)arg1)->getNumSplittingSteps();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_getMinNumSamplesPerNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTree_getMinNumSamplesPerNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_getMinNumSamplesPerNode" "', argument " "1"" of type '" "GRT::DecisionTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  result = ((GRT::DecisionTree const *)arg1)->getMinNumSamplesPerNode();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_getMaxDepth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTree_getMaxDepth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_getMaxDepth" "', argument " "1"" of type '" "GRT::DecisionTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  result = ((GRT::DecisionTree const *)arg1)->getMaxDepth();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_getPredictedNodeID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTree_getPredictedNodeID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_getPredictedNodeID" "', argument " "1"" of type '" "GRT::DecisionTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  result = ((GRT::DecisionTree const *)arg1)->getPredictedNodeID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_getRemoveFeaturesAtEachSplit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionTree_getRemoveFeaturesAtEachSplit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_getRemoveFeaturesAtEachSplit" "', argument " "1"" of type '" "GRT::DecisionTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  result = (bool)((GRT::DecisionTree const *)arg1)->getRemoveFeaturesAtEachSplit();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_setTrainingMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  Tree::TrainingMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_setTrainingMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_setTrainingMode" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Tree__TrainingMode,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTree_setTrainingMode" "', argument " "2"" of type '" "Tree::TrainingMode const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTree_setTrainingMode" "', argument " "2"" of type '" "Tree::TrainingMode const""'");
    } else {
      Tree::TrainingMode * temp = reinterpret_cast< Tree::TrainingMode * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->setTrainingMode(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_setNumSplittingSteps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_setNumSplittingSteps",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_setNumSplittingSteps" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DecisionTree_setNumSplittingSteps" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNumSplittingSteps(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_setMinNumSamplesPerNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_setMinNumSamplesPerNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_setMinNumSamplesPerNode" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DecisionTree_setMinNumSamplesPerNode" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setMinNumSamplesPerNode(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_setMaxDepth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_setMaxDepth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_setMaxDepth" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DecisionTree_setMaxDepth" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setMaxDepth(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_setRemoveFeaturesAtEachSplit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_setRemoveFeaturesAtEachSplit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_setRemoveFeaturesAtEachSplit" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DecisionTree_setRemoveFeaturesAtEachSplit" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setRemoveFeaturesAtEachSplit(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_setRemoveFeaturesAtEachSpilt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_setRemoveFeaturesAtEachSpilt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_setRemoveFeaturesAtEachSpilt" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DecisionTree_setRemoveFeaturesAtEachSpilt" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setRemoveFeaturesAtEachSpilt(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_setDecisionTreeNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  GRT::DecisionTreeNode *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_setDecisionTreeNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_setDecisionTreeNode" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__DecisionTreeNode,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTree_setDecisionTreeNode" "', argument " "2"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTree_setDecisionTreeNode" "', argument " "2"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::DecisionTreeNode * >(argp2);
  result = (bool)(arg1)->setDecisionTreeNode((GRT::DecisionTreeNode const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":DecisionTree_getId")) SWIG_fail;
  result = GRT::DecisionTree::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_save__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_save" "', argument " "1"" of type '" "GRT::DecisionTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTree_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTree_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::DecisionTree const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DecisionTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecisionTree_save__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DecisionTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecisionTree_save__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DecisionTree_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DecisionTree::save(std::fstream &) const\n"
    "    save(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DecisionTree_load__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_load" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTree_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTree_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DecisionTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecisionTree_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DecisionTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecisionTree_load__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DecisionTree_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DecisionTree::load(std::fstream &)\n"
    "    load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DecisionTree_train___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_train_" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTree_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTree_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_train___SWIG_1_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  GRT::RegressionData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DecisionTree_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_train_" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTree_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTree_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DecisionTree_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTree_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  arg3 = reinterpret_cast< GRT::RegressionData * >(argp3);
  result = (bool)(arg1)->train_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_train___SWIG_1_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_train_" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTree_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTree_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_train___SWIG_1_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_train_" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTree_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTree_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_train___SWIG_1_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_train_" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTree_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTree_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_train___SWIG_1_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_train_" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTree_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTree_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DecisionTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecisionTree_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DecisionTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecisionTree_train___SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DecisionTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecisionTree_train___SWIG_1_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DecisionTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecisionTree_train___SWIG_1_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DecisionTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecisionTree_train___SWIG_1_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DecisionTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecisionTree_train___SWIG_1_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DecisionTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DecisionTree_train___SWIG_1_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DecisionTree_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DecisionTree::train_(GRT::ClassificationData &)\n"
    "    train_(GRT::RegressionData &)\n"
    "    train_(GRT::RegressionData &,GRT::RegressionData &)\n"
    "    train_(GRT::TimeSeriesClassificationData &)\n"
    "    train_(GRT::ClassificationDataStream &)\n"
    "    train_(GRT::UnlabelledData &)\n"
    "    train_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DecisionTree_predict___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTree *arg1 = (GRT::DecisionTree *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionTree_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DecisionTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DecisionTree_predict_" "', argument " "1"" of type '" "GRT::DecisionTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionTree_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DecisionTree_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionTree_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DecisionTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecisionTree_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DecisionTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DecisionTree_predict___SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DecisionTree_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DecisionTree::predict_(GRT::VectorFloat &)\n"
    "    predict_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *DecisionTree_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__DecisionTree, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IndexDist__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  GRT::Float arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::IndexDist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_IndexDist",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IndexDist" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexDist" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IndexDist" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  result = (GRT::IndexDist *)new GRT::IndexDist(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__IndexDist, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexDist__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::IndexDist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IndexDist",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IndexDist" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexDist" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (GRT::IndexDist *)new GRT::IndexDist(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__IndexDist, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexDist__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::IndexDist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IndexDist",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IndexDist" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (GRT::IndexDist *)new GRT::IndexDist(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__IndexDist, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexDist__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::IndexDist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IndexDist")) SWIG_fail;
  result = (GRT::IndexDist *)new GRT::IndexDist();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__IndexDist, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexDist(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IndexDist__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IndexDist__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IndexDist__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_IndexDist__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_IndexDist'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::IndexDist::IndexDist(int,int,GRT::Float)\n"
    "    GRT::IndexDist::IndexDist(int,int)\n"
    "    GRT::IndexDist::IndexDist(int)\n"
    "    GRT::IndexDist::IndexDist()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_IndexDist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::IndexDist *arg1 = (GRT::IndexDist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IndexDist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__IndexDist, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IndexDist" "', argument " "1"" of type '" "GRT::IndexDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::IndexDist * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexDist_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::IndexDist *arg1 = (GRT::IndexDist *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexDist_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__IndexDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexDist_x_set" "', argument " "1"" of type '" "GRT::IndexDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::IndexDist * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexDist_x_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexDist_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::IndexDist *arg1 = (GRT::IndexDist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexDist_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__IndexDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexDist_x_get" "', argument " "1"" of type '" "GRT::IndexDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::IndexDist * >(argp1);
  result = (int) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexDist_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::IndexDist *arg1 = (GRT::IndexDist *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexDist_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__IndexDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexDist_y_set" "', argument " "1"" of type '" "GRT::IndexDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::IndexDist * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexDist_y_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexDist_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::IndexDist *arg1 = (GRT::IndexDist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexDist_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__IndexDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexDist_y_get" "', argument " "1"" of type '" "GRT::IndexDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::IndexDist * >(argp1);
  result = (int) ((arg1)->y);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexDist_dist_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::IndexDist *arg1 = (GRT::IndexDist *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexDist_dist_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__IndexDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexDist_dist_set" "', argument " "1"" of type '" "GRT::IndexDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::IndexDist * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexDist_dist_set" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  if (arg1) (arg1)->dist = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexDist_dist_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::IndexDist *arg1 = (GRT::IndexDist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexDist_dist_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__IndexDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexDist_dist_get" "', argument " "1"" of type '" "GRT::IndexDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::IndexDist * >(argp1);
  result = (GRT::Float) ((arg1)->dist);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IndexDist_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__IndexDist, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DTWTemplate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTWTemplate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DTWTemplate")) SWIG_fail;
  result = (GRT::DTWTemplate *)new GRT::DTWTemplate();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DTWTemplate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DTWTemplate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTWTemplate *arg1 = (GRT::DTWTemplate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DTWTemplate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTWTemplate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DTWTemplate" "', argument " "1"" of type '" "GRT::DTWTemplate *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTWTemplate * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTWTemplate_classLabel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTWTemplate *arg1 = (GRT::DTWTemplate *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTWTemplate_classLabel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTWTemplate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTWTemplate_classLabel_set" "', argument " "1"" of type '" "GRT::DTWTemplate *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTWTemplate * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DTWTemplate_classLabel_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  if (arg1) (arg1)->classLabel = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTWTemplate_classLabel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTWTemplate *arg1 = (GRT::DTWTemplate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DTWTemplate_classLabel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTWTemplate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTWTemplate_classLabel_get" "', argument " "1"" of type '" "GRT::DTWTemplate *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTWTemplate * >(argp1);
  result =  ((arg1)->classLabel);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTWTemplate_timeSeries_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTWTemplate *arg1 = (GRT::DTWTemplate *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTWTemplate_timeSeries_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTWTemplate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTWTemplate_timeSeries_set" "', argument " "1"" of type '" "GRT::DTWTemplate *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTWTemplate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTWTemplate_timeSeries_set" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DTWTemplate_timeSeries_set" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  if (arg1) (arg1)->timeSeries = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTWTemplate_timeSeries_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTWTemplate *arg1 = (GRT::DTWTemplate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DTWTemplate_timeSeries_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTWTemplate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTWTemplate_timeSeries_get" "', argument " "1"" of type '" "GRT::DTWTemplate *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTWTemplate * >(argp1);
  result = (GRT::MatrixFloat *) & ((arg1)->timeSeries);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTWTemplate_trainingMu_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTWTemplate *arg1 = (GRT::DTWTemplate *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTWTemplate_trainingMu_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTWTemplate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTWTemplate_trainingMu_set" "', argument " "1"" of type '" "GRT::DTWTemplate *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTWTemplate * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DTWTemplate_trainingMu_set" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  if (arg1) (arg1)->trainingMu = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTWTemplate_trainingMu_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTWTemplate *arg1 = (GRT::DTWTemplate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DTWTemplate_trainingMu_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTWTemplate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTWTemplate_trainingMu_get" "', argument " "1"" of type '" "GRT::DTWTemplate *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTWTemplate * >(argp1);
  result = (GRT::Float) ((arg1)->trainingMu);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTWTemplate_trainingSigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTWTemplate *arg1 = (GRT::DTWTemplate *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTWTemplate_trainingSigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTWTemplate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTWTemplate_trainingSigma_set" "', argument " "1"" of type '" "GRT::DTWTemplate *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTWTemplate * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DTWTemplate_trainingSigma_set" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  if (arg1) (arg1)->trainingSigma = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTWTemplate_trainingSigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTWTemplate *arg1 = (GRT::DTWTemplate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DTWTemplate_trainingSigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTWTemplate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTWTemplate_trainingSigma_get" "', argument " "1"" of type '" "GRT::DTWTemplate *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTWTemplate * >(argp1);
  result = (GRT::Float) ((arg1)->trainingSigma);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTWTemplate_averageTemplateLength_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTWTemplate *arg1 = (GRT::DTWTemplate *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTWTemplate_averageTemplateLength_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTWTemplate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTWTemplate_averageTemplateLength_set" "', argument " "1"" of type '" "GRT::DTWTemplate *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTWTemplate * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DTWTemplate_averageTemplateLength_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  if (arg1) (arg1)->averageTemplateLength = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTWTemplate_averageTemplateLength_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTWTemplate *arg1 = (GRT::DTWTemplate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DTWTemplate_averageTemplateLength_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTWTemplate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTWTemplate_averageTemplateLength_get" "', argument " "1"" of type '" "GRT::DTWTemplate *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTWTemplate * >(argp1);
  result =  ((arg1)->averageTemplateLength);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DTWTemplate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__DTWTemplate, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DTW__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool arg2 ;
  GRT::Float arg3 ;
  UINT arg4 ;
  bool arg5 ;
  GRT::Float arg6 ;
  bool arg7 ;
  bool arg8 ;
  UINT arg9 ;
  GRT::Float arg10 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  GRT::DTW *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:new_DTW",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DTW" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DTW" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DTW" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DTW" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_DTW" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_DTW" "', argument " "6"" of type '" "GRT::Float""'");
  } 
  arg6 = static_cast< GRT::Float >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_DTW" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_DTW" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_DTW" "', argument " "9"" of type '" "UINT""'");
  } 
  arg9 = static_cast< UINT >(val9);
  ecode10 = SWIG_AsVal_float(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_DTW" "', argument " "10"" of type '" "GRT::Float""'");
  } 
  arg10 = static_cast< GRT::Float >(val10);
  result = (GRT::DTW *)new GRT::DTW(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DTW, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DTW__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool arg2 ;
  GRT::Float arg3 ;
  UINT arg4 ;
  bool arg5 ;
  GRT::Float arg6 ;
  bool arg7 ;
  bool arg8 ;
  UINT arg9 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  GRT::DTW *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_DTW",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DTW" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DTW" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DTW" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DTW" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_DTW" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_DTW" "', argument " "6"" of type '" "GRT::Float""'");
  } 
  arg6 = static_cast< GRT::Float >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_DTW" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_DTW" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  ecode9 = SWIG_AsVal_int(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_DTW" "', argument " "9"" of type '" "UINT""'");
  } 
  arg9 = static_cast< UINT >(val9);
  result = (GRT::DTW *)new GRT::DTW(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DTW, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DTW__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool arg2 ;
  GRT::Float arg3 ;
  UINT arg4 ;
  bool arg5 ;
  GRT::Float arg6 ;
  bool arg7 ;
  bool arg8 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  GRT::DTW *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_DTW",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DTW" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DTW" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DTW" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DTW" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_DTW" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_DTW" "', argument " "6"" of type '" "GRT::Float""'");
  } 
  arg6 = static_cast< GRT::Float >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_DTW" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_DTW" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  result = (GRT::DTW *)new GRT::DTW(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DTW, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DTW__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool arg2 ;
  GRT::Float arg3 ;
  UINT arg4 ;
  bool arg5 ;
  GRT::Float arg6 ;
  bool arg7 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  GRT::DTW *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_DTW",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DTW" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DTW" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DTW" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DTW" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_DTW" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_DTW" "', argument " "6"" of type '" "GRT::Float""'");
  } 
  arg6 = static_cast< GRT::Float >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_DTW" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  result = (GRT::DTW *)new GRT::DTW(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DTW, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DTW__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool arg2 ;
  GRT::Float arg3 ;
  UINT arg4 ;
  bool arg5 ;
  GRT::Float arg6 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  GRT::DTW *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_DTW",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DTW" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DTW" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DTW" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DTW" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_DTW" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_DTW" "', argument " "6"" of type '" "GRT::Float""'");
  } 
  arg6 = static_cast< GRT::Float >(val6);
  result = (GRT::DTW *)new GRT::DTW(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DTW, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DTW__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool arg2 ;
  GRT::Float arg3 ;
  UINT arg4 ;
  bool arg5 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::DTW *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_DTW",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DTW" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DTW" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DTW" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DTW" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_DTW" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (GRT::DTW *)new GRT::DTW(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DTW, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DTW__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool arg2 ;
  GRT::Float arg3 ;
  UINT arg4 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::DTW *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_DTW",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DTW" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DTW" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DTW" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DTW" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  result = (GRT::DTW *)new GRT::DTW(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DTW, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DTW__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool arg2 ;
  GRT::Float arg3 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::DTW *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_DTW",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DTW" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DTW" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DTW" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  result = (GRT::DTW *)new GRT::DTW(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DTW, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DTW__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool arg2 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::DTW *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DTW",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DTW" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DTW" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (GRT::DTW *)new GRT::DTW(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DTW, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DTW__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::DTW *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DTW",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DTW" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (GRT::DTW *)new GRT::DTW(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DTW, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DTW__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DTW")) SWIG_fail;
  result = (GRT::DTW *)new GRT::DTW();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DTW, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DTW__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::DTW *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DTW",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DTW,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DTW" "', argument " "1"" of type '" "GRT::DTW const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DTW" "', argument " "1"" of type '" "GRT::DTW const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  result = (GRT::DTW *)new GRT::DTW((GRT::DTW const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DTW, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DTW(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[11] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 10) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DTW__SWIG_10(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DTW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DTW__SWIG_11(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DTW__SWIG_9(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DTW__SWIG_8(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_DTW__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_DTW__SWIG_6(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_DTW__SWIG_5(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_DTW__SWIG_4(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_DTW__SWIG_3(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_bool(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_new_DTW__SWIG_2(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_bool(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_DTW__SWIG_1(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_bool(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_float(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        return _wrap_new_DTW__SWIG_0(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DTW'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DTW::DTW(bool,bool,GRT::Float,UINT,bool,GRT::Float,bool,bool,UINT,GRT::Float)\n"
    "    GRT::DTW::DTW(bool,bool,GRT::Float,UINT,bool,GRT::Float,bool,bool,UINT)\n"
    "    GRT::DTW::DTW(bool,bool,GRT::Float,UINT,bool,GRT::Float,bool,bool)\n"
    "    GRT::DTW::DTW(bool,bool,GRT::Float,UINT,bool,GRT::Float,bool)\n"
    "    GRT::DTW::DTW(bool,bool,GRT::Float,UINT,bool,GRT::Float)\n"
    "    GRT::DTW::DTW(bool,bool,GRT::Float,UINT,bool)\n"
    "    GRT::DTW::DTW(bool,bool,GRT::Float,UINT)\n"
    "    GRT::DTW::DTW(bool,bool,GRT::Float)\n"
    "    GRT::DTW::DTW(bool,bool)\n"
    "    GRT::DTW::DTW(bool)\n"
    "    GRT::DTW::DTW()\n"
    "    GRT::DTW::DTW(GRT::DTW const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DTW(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DTW",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DTW" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  GRT::Classifier *arg2 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_deepCopyFrom" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTW_deepCopyFrom" "', argument " "2"" of type '" "GRT::Classifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Classifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_train_" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTW_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DTW_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_predict_" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTW_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DTW_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_predict___SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_predict_" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTW_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DTW_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DTW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DTW_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DTW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DTW_predict___SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DTW_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DTW::predict_(GRT::VectorFloat &)\n"
    "    GRT::DTW::predict_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DTW_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DTW_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_reset" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  result = (bool)(arg1)->reset();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DTW_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_clear" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_save" "', argument " "1"" of type '" "GRT::DTW const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTW_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DTW_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::DTW const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_load" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTW_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DTW_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_recomputeNullRejectionThresholds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DTW_recomputeNullRejectionThresholds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_recomputeNullRejectionThresholds" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  result = (bool)(arg1)->recomputeNullRejectionThresholds();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_getNumTemplates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DTW_getNumTemplates",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_getNumTemplates" "', argument " "1"" of type '" "GRT::DTW const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  result = ((GRT::DTW const *)arg1)->getNumTemplates();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_setRejectionMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_setRejectionMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_setRejectionMode" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DTW_setRejectionMode" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setRejectionMode(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_setNullRejectionThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_setNullRejectionThreshold",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_setNullRejectionThreshold" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DTW_setNullRejectionThreshold" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setNullRejectionThreshold(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_setOffsetTimeseriesUsingFirstSample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_setOffsetTimeseriesUsingFirstSample",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_setOffsetTimeseriesUsingFirstSample" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DTW_setOffsetTimeseriesUsingFirstSample" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setOffsetTimeseriesUsingFirstSample(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_setContrainWarpingPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_setContrainWarpingPath",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_setContrainWarpingPath" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DTW_setContrainWarpingPath" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setContrainWarpingPath(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_setWarpingRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_setWarpingRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_setWarpingRadius" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DTW_setWarpingRadius" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setWarpingRadius(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_getRejectionMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DTW_getRejectionMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_getRejectionMode" "', argument " "1"" of type '" "GRT::DTW const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  result = ((GRT::DTW const *)arg1)->getRejectionMode();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_enableZNormalization__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DTW_enableZNormalization",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_enableZNormalization" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DTW_enableZNormalization" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DTW_enableZNormalization" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->enableZNormalization(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_enableZNormalization__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_enableZNormalization",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_enableZNormalization" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DTW_enableZNormalization" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->enableZNormalization(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_enableZNormalization(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DTW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DTW_enableZNormalization__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DTW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DTW_enableZNormalization__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DTW_enableZNormalization'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DTW::enableZNormalization(bool,bool)\n"
    "    GRT::DTW::enableZNormalization(bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DTW_enableTrimTrainingData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  bool arg2 ;
  GRT::Float arg3 ;
  GRT::Float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DTW_enableTrimTrainingData",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_enableTrimTrainingData" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DTW_enableTrimTrainingData" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DTW_enableTrimTrainingData" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DTW_enableTrimTrainingData" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = (bool)(arg1)->enableTrimTrainingData(arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_getModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< GRT::DTWTemplate > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DTW_getModels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_getModels" "', argument " "1"" of type '" "GRT::DTW const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  result = ((GRT::DTW const *)arg1)->getModels();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< GRT::DTWTemplate >(static_cast< const GRT::Vector< GRT::DTWTemplate >& >(result))), SWIGTYPE_p_GRT__VectorT_GRT__DTWTemplate_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_setModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  SwigValueWrapper< GRT::Vector< GRT::DTWTemplate > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_setModels",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_setModels" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_GRT__DTWTemplate_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTW_setModels" "', argument " "2"" of type '" "GRT::Vector< GRT::DTWTemplate >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DTW_setModels" "', argument " "2"" of type '" "GRT::Vector< GRT::DTWTemplate >""'");
    } else {
      GRT::Vector< GRT::DTWTemplate > * temp = reinterpret_cast< GRT::Vector< GRT::DTWTemplate > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->setModels(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_getInputDataBuffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< GRT::VectorFloat > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DTW_getInputDataBuffer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_getInputDataBuffer" "', argument " "1"" of type '" "GRT::DTW const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  result = ((GRT::DTW const *)arg1)->getInputDataBuffer();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< GRT::VectorFloat >(static_cast< const GRT::Vector< GRT::VectorFloat >& >(result))), SWIGTYPE_p_GRT__VectorT_GRT__VectorFloat_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_getDistanceMatrices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< GRT::MatrixFloat > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DTW_getDistanceMatrices",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_getDistanceMatrices" "', argument " "1"" of type '" "GRT::DTW const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  result = (GRT::Vector< GRT::MatrixFloat > *) &((GRT::DTW const *)arg1)->getDistanceMatrices();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorT_GRT__MatrixFloat_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_getWarpingPaths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< GRT::Vector< GRT::IndexDist > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DTW_getWarpingPaths",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_getWarpingPaths" "', argument " "1"" of type '" "GRT::DTW const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  result = (GRT::Vector< GRT::Vector< GRT::IndexDist > > *) &((GRT::DTW const *)arg1)->getWarpingPaths();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorT_GRT__VectorT_GRT__IndexDist_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":DTW_getId")) SWIG_fail;
  result = GRT::DTW::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_save__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_save" "', argument " "1"" of type '" "GRT::DTW const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTW_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DTW_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::DTW const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DTW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DTW_save__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DTW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DTW_save__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DTW_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DTW::save(std::fstream &) const\n"
    "    save(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DTW_load__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_load" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTW_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DTW_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DTW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DTW_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DTW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DTW_load__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DTW_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DTW::load(std::fstream &)\n"
    "    load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DTW_train___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_train_" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTW_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DTW_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_train___SWIG_1_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_train_" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTW_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DTW_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_train___SWIG_1_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  GRT::RegressionData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DTW_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_train_" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTW_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DTW_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DTW_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DTW_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  arg3 = reinterpret_cast< GRT::RegressionData * >(argp3);
  result = (bool)(arg1)->train_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_train___SWIG_1_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_train_" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTW_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DTW_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_train___SWIG_1_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_train_" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTW_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DTW_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_train___SWIG_1_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DTW *arg1 = (GRT::DTW *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DTW_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DTW, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTW_train_" "', argument " "1"" of type '" "GRT::DTW *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DTW * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTW_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DTW_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTW_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DTW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DTW_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DTW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DTW_train___SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DTW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DTW_train___SWIG_1_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DTW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DTW_train___SWIG_1_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DTW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DTW_train___SWIG_1_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DTW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DTW_train___SWIG_1_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DTW, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DTW_train___SWIG_1_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DTW_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DTW::train_(GRT::TimeSeriesClassificationData &)\n"
    "    train_(GRT::ClassificationData &)\n"
    "    train_(GRT::RegressionData &)\n"
    "    train_(GRT::RegressionData &,GRT::RegressionData &)\n"
    "    train_(GRT::ClassificationDataStream &)\n"
    "    train_(GRT::UnlabelledData &)\n"
    "    train_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *DTW_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__DTW, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FSMParticle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::FSMParticle *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FSMParticle",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FSMParticle" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (GRT::FSMParticle *)new GRT::FSMParticle(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__FSMParticle, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FSMParticle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FSMParticle *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FSMParticle")) SWIG_fail;
  result = (GRT::FSMParticle *)new GRT::FSMParticle();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__FSMParticle, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FSMParticle__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FSMParticle *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::FSMParticle *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FSMParticle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__FSMParticle,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FSMParticle" "', argument " "1"" of type '" "GRT::FSMParticle const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FSMParticle" "', argument " "1"" of type '" "GRT::FSMParticle const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::FSMParticle * >(argp1);
  result = (GRT::FSMParticle *)new GRT::FSMParticle((GRT::FSMParticle const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__FSMParticle, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FSMParticle(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FSMParticle__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__FSMParticle, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FSMParticle__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FSMParticle__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FSMParticle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::FSMParticle::FSMParticle(unsigned int const)\n"
    "    GRT::FSMParticle::FSMParticle()\n"
    "    GRT::FSMParticle::FSMParticle(GRT::FSMParticle const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FSMParticle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FSMParticle *arg1 = (GRT::FSMParticle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FSMParticle",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FSMParticle, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FSMParticle" "', argument " "1"" of type '" "GRT::FSMParticle *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FSMParticle * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FSMParticle_currentState_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FSMParticle *arg1 = (GRT::FSMParticle *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FSMParticle_currentState_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FSMParticle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FSMParticle_currentState_set" "', argument " "1"" of type '" "GRT::FSMParticle *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FSMParticle * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FSMParticle_currentState_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->currentState = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FSMParticle_currentState_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FSMParticle *arg1 = (GRT::FSMParticle *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FSMParticle_currentState_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FSMParticle, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FSMParticle_currentState_get" "', argument " "1"" of type '" "GRT::FSMParticle *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FSMParticle * >(argp1);
  result = (int) ((arg1)->currentState);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FSMParticle_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__FSMParticle, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FiniteStateMachine__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  GRT::Float arg3 ;
  GRT::Float arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::FiniteStateMachine *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_FiniteStateMachine",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FiniteStateMachine" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FiniteStateMachine" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FiniteStateMachine" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_FiniteStateMachine" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = (GRT::FiniteStateMachine *)new GRT::FiniteStateMachine(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__FiniteStateMachine, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FiniteStateMachine__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  GRT::Float arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::FiniteStateMachine *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_FiniteStateMachine",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FiniteStateMachine" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FiniteStateMachine" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FiniteStateMachine" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  result = (GRT::FiniteStateMachine *)new GRT::FiniteStateMachine(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__FiniteStateMachine, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FiniteStateMachine__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::FiniteStateMachine *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_FiniteStateMachine",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FiniteStateMachine" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FiniteStateMachine" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (GRT::FiniteStateMachine *)new GRT::FiniteStateMachine(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__FiniteStateMachine, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FiniteStateMachine__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::FiniteStateMachine *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FiniteStateMachine",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FiniteStateMachine" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  result = (GRT::FiniteStateMachine *)new GRT::FiniteStateMachine(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__FiniteStateMachine, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FiniteStateMachine__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FiniteStateMachine")) SWIG_fail;
  result = (GRT::FiniteStateMachine *)new GRT::FiniteStateMachine();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__FiniteStateMachine, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FiniteStateMachine__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::FiniteStateMachine *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FiniteStateMachine",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__FiniteStateMachine,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FiniteStateMachine" "', argument " "1"" of type '" "GRT::FiniteStateMachine const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FiniteStateMachine" "', argument " "1"" of type '" "GRT::FiniteStateMachine const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  result = (GRT::FiniteStateMachine *)new GRT::FiniteStateMachine((GRT::FiniteStateMachine const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__FiniteStateMachine, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FiniteStateMachine(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FiniteStateMachine__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__FiniteStateMachine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FiniteStateMachine__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FiniteStateMachine__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FiniteStateMachine__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_FiniteStateMachine__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_FiniteStateMachine__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FiniteStateMachine'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::FiniteStateMachine::FiniteStateMachine(UINT const,UINT const,GRT::Float const,GRT::Float const)\n"
    "    GRT::FiniteStateMachine::FiniteStateMachine(UINT const,UINT const,GRT::Float const)\n"
    "    GRT::FiniteStateMachine::FiniteStateMachine(UINT const,UINT const)\n"
    "    GRT::FiniteStateMachine::FiniteStateMachine(UINT const)\n"
    "    GRT::FiniteStateMachine::FiniteStateMachine()\n"
    "    GRT::FiniteStateMachine::FiniteStateMachine(GRT::FiniteStateMachine const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FiniteStateMachine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FiniteStateMachine",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FiniteStateMachine" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  GRT::Classifier *arg2 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FiniteStateMachine_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_deepCopyFrom" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FiniteStateMachine_deepCopyFrom" "', argument " "2"" of type '" "GRT::Classifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Classifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FiniteStateMachine_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_train_" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FiniteStateMachine_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteStateMachine_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_train___SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FiniteStateMachine_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_train_" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FiniteStateMachine_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteStateMachine_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_train___SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  GRT::TimeSeriesClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FiniteStateMachine_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_train_" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FiniteStateMachine_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteStateMachine_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FiniteStateMachine_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_predict_" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FiniteStateMachine_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteStateMachine_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FiniteStateMachine_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_reset" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  result = (bool)(arg1)->reset();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FiniteStateMachine_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_clear" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FiniteStateMachine__print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine__print" "', argument " "1"" of type '" "GRT::FiniteStateMachine const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  result = (bool)((GRT::FiniteStateMachine const *)arg1)->print();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FiniteStateMachine_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_save" "', argument " "1"" of type '" "GRT::FiniteStateMachine const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FiniteStateMachine_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteStateMachine_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::FiniteStateMachine const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FiniteStateMachine_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_load" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FiniteStateMachine_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteStateMachine_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_setNumParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FiniteStateMachine_setNumParticles",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_setNumParticles" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FiniteStateMachine_setNumParticles" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNumParticles(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_setNumClustersPerState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FiniteStateMachine_setNumClustersPerState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_setNumClustersPerState" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FiniteStateMachine_setNumClustersPerState" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNumClustersPerState(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_setStateTransitionSmoothingCoeff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FiniteStateMachine_setStateTransitionSmoothingCoeff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_setStateTransitionSmoothingCoeff" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FiniteStateMachine_setStateTransitionSmoothingCoeff" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setStateTransitionSmoothingCoeff(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_setMeasurementNoise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FiniteStateMachine_setMeasurementNoise",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_setMeasurementNoise" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FiniteStateMachine_setMeasurementNoise" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setMeasurementNoise(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":FiniteStateMachine_getId")) SWIG_fail;
  result = GRT::FiniteStateMachine::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_save__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FiniteStateMachine_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_save" "', argument " "1"" of type '" "GRT::FiniteStateMachine const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FiniteStateMachine_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteStateMachine_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::FiniteStateMachine const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FiniteStateMachine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FiniteStateMachine_save__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FiniteStateMachine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FiniteStateMachine_save__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FiniteStateMachine_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::FiniteStateMachine::save(std::fstream &) const\n"
    "    save(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_load__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FiniteStateMachine_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_load" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FiniteStateMachine_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteStateMachine_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FiniteStateMachine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FiniteStateMachine_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FiniteStateMachine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FiniteStateMachine_load__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FiniteStateMachine_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::FiniteStateMachine::load(std::fstream &)\n"
    "    load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_train___SWIG_3_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FiniteStateMachine_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_train_" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FiniteStateMachine_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteStateMachine_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_train___SWIG_3_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  GRT::RegressionData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FiniteStateMachine_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_train_" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FiniteStateMachine_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteStateMachine_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FiniteStateMachine_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteStateMachine_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  arg3 = reinterpret_cast< GRT::RegressionData * >(argp3);
  result = (bool)(arg1)->train_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_train___SWIG_3_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FiniteStateMachine_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_train_" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FiniteStateMachine_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteStateMachine_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_train___SWIG_3_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FiniteStateMachine_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_train_" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FiniteStateMachine_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteStateMachine_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_train___SWIG_3_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FiniteStateMachine_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_train_" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FiniteStateMachine_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteStateMachine_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FiniteStateMachine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FiniteStateMachine_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FiniteStateMachine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FiniteStateMachine_train___SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FiniteStateMachine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FiniteStateMachine_train___SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FiniteStateMachine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FiniteStateMachine_train___SWIG_3_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FiniteStateMachine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FiniteStateMachine_train___SWIG_3_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FiniteStateMachine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FiniteStateMachine_train___SWIG_3_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FiniteStateMachine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FiniteStateMachine_train___SWIG_3_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FiniteStateMachine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FiniteStateMachine_train___SWIG_3_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FiniteStateMachine_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::FiniteStateMachine::train_(GRT::ClassificationData &)\n"
    "    GRT::FiniteStateMachine::train_(GRT::TimeSeriesClassificationData &)\n"
    "    GRT::FiniteStateMachine::train_(GRT::TimeSeriesClassificationDataStream &)\n"
    "    train_(GRT::RegressionData &)\n"
    "    train_(GRT::RegressionData &,GRT::RegressionData &)\n"
    "    train_(GRT::ClassificationDataStream &)\n"
    "    train_(GRT::UnlabelledData &)\n"
    "    train_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_predict___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FiniteStateMachine *arg1 = (GRT::FiniteStateMachine *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FiniteStateMachine_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FiniteStateMachine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FiniteStateMachine_predict_" "', argument " "1"" of type '" "GRT::FiniteStateMachine *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FiniteStateMachine * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FiniteStateMachine_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FiniteStateMachine_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FiniteStateMachine_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FiniteStateMachine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FiniteStateMachine_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FiniteStateMachine, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FiniteStateMachine_predict___SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FiniteStateMachine_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::FiniteStateMachine::predict_(GRT::VectorFloat &)\n"
    "    predict_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *FiniteStateMachine_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__FiniteStateMachine, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GuassModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GuassModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GuassModel")) SWIG_fail;
  result = (GRT::GuassModel *)new GRT::GuassModel();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GuassModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GuassModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GuassModel *arg1 = (GRT::GuassModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GuassModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GuassModel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GuassModel" "', argument " "1"" of type '" "GRT::GuassModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GuassModel * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GuassModel_printModelValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GuassModel *arg1 = (GRT::GuassModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GuassModel_printModelValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GuassModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuassModel_printModelValues" "', argument " "1"" of type '" "GRT::GuassModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GuassModel * >(argp1);
  result = (bool)((GRT::GuassModel const *)arg1)->printModelValues();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GuassModel_det_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GuassModel *arg1 = (GRT::GuassModel *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GuassModel_det_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GuassModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuassModel_det_set" "', argument " "1"" of type '" "GRT::GuassModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GuassModel * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GuassModel_det_set" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  if (arg1) (arg1)->det = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GuassModel_det_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GuassModel *arg1 = (GRT::GuassModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GuassModel_det_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GuassModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuassModel_det_get" "', argument " "1"" of type '" "GRT::GuassModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GuassModel * >(argp1);
  result = (GRT::Float) ((arg1)->det);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GuassModel_mu_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GuassModel *arg1 = (GRT::GuassModel *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GuassModel_mu_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GuassModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuassModel_mu_set" "', argument " "1"" of type '" "GRT::GuassModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GuassModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GuassModel_mu_set" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GuassModel_mu_set" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  if (arg1) (arg1)->mu = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GuassModel_mu_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GuassModel *arg1 = (GRT::GuassModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GuassModel_mu_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GuassModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuassModel_mu_get" "', argument " "1"" of type '" "GRT::GuassModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GuassModel * >(argp1);
  result = (GRT::VectorFloat *) & ((arg1)->mu);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GuassModel_sigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GuassModel *arg1 = (GRT::GuassModel *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GuassModel_sigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GuassModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuassModel_sigma_set" "', argument " "1"" of type '" "GRT::GuassModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GuassModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GuassModel_sigma_set" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GuassModel_sigma_set" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  if (arg1) (arg1)->sigma = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GuassModel_sigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GuassModel *arg1 = (GRT::GuassModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GuassModel_sigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GuassModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuassModel_sigma_get" "', argument " "1"" of type '" "GRT::GuassModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GuassModel * >(argp1);
  result = (GRT::MatrixFloat *) & ((arg1)->sigma);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GuassModel_invSigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GuassModel *arg1 = (GRT::GuassModel *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GuassModel_invSigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GuassModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuassModel_invSigma_set" "', argument " "1"" of type '" "GRT::GuassModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GuassModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GuassModel_invSigma_set" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GuassModel_invSigma_set" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  if (arg1) (arg1)->invSigma = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GuassModel_invSigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GuassModel *arg1 = (GRT::GuassModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GuassModel_invSigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GuassModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GuassModel_invSigma_get" "', argument " "1"" of type '" "GRT::GuassModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GuassModel * >(argp1);
  result = (GRT::MatrixFloat *) & ((arg1)->invSigma);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GuassModel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__GuassModel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MixtureModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MixtureModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MixtureModel")) SWIG_fail;
  result = (GRT::MixtureModel *)new GRT::MixtureModel();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MixtureModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MixtureModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MixtureModel *arg1 = (GRT::MixtureModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MixtureModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MixtureModel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MixtureModel" "', argument " "1"" of type '" "GRT::MixtureModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MixtureModel * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel_computeMixtureLikelihood(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MixtureModel *arg1 = (GRT::MixtureModel *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixtureModel_computeMixtureLikelihood",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MixtureModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel_computeMixtureLikelihood" "', argument " "1"" of type '" "GRT::MixtureModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MixtureModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MixtureModel_computeMixtureLikelihood" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MixtureModel_computeMixtureLikelihood" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (GRT::Float)(arg1)->computeMixtureLikelihood((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel_resize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MixtureModel *arg1 = (GRT::MixtureModel *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixtureModel_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MixtureModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel_resize" "', argument " "1"" of type '" "GRT::MixtureModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MixtureModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixtureModel_resize" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->resize(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel_recomputeNullRejectionThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MixtureModel *arg1 = (GRT::MixtureModel *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixtureModel_recomputeNullRejectionThreshold",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MixtureModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel_recomputeNullRejectionThreshold" "', argument " "1"" of type '" "GRT::MixtureModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MixtureModel * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixtureModel_recomputeNullRejectionThreshold" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->recomputeNullRejectionThreshold(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel_recomputeNormalizationFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MixtureModel *arg1 = (GRT::MixtureModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixtureModel_recomputeNormalizationFactor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MixtureModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel_recomputeNormalizationFactor" "', argument " "1"" of type '" "GRT::MixtureModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MixtureModel * >(argp1);
  result = (bool)(arg1)->recomputeNormalizationFactor();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel_printModelValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MixtureModel *arg1 = (GRT::MixtureModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixtureModel_printModelValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MixtureModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel_printModelValues" "', argument " "1"" of type '" "GRT::MixtureModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MixtureModel * >(argp1);
  result = (bool)((GRT::MixtureModel const *)arg1)->printModelValues();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel_getK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MixtureModel *arg1 = (GRT::MixtureModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixtureModel_getK",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MixtureModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel_getK" "', argument " "1"" of type '" "GRT::MixtureModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MixtureModel * >(argp1);
  result = ((GRT::MixtureModel const *)arg1)->getK();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel_getClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MixtureModel *arg1 = (GRT::MixtureModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixtureModel_getClassLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MixtureModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel_getClassLabel" "', argument " "1"" of type '" "GRT::MixtureModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MixtureModel * >(argp1);
  result = ((GRT::MixtureModel const *)arg1)->getClassLabel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel_getTrainingMu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MixtureModel *arg1 = (GRT::MixtureModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixtureModel_getTrainingMu",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MixtureModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel_getTrainingMu" "', argument " "1"" of type '" "GRT::MixtureModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MixtureModel * >(argp1);
  result = (GRT::Float)((GRT::MixtureModel const *)arg1)->getTrainingMu();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel_getTrainingSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MixtureModel *arg1 = (GRT::MixtureModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixtureModel_getTrainingSigma",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MixtureModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel_getTrainingSigma" "', argument " "1"" of type '" "GRT::MixtureModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MixtureModel * >(argp1);
  result = (GRT::Float)((GRT::MixtureModel const *)arg1)->getTrainingSigma();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel_getNullRejectionThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MixtureModel *arg1 = (GRT::MixtureModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixtureModel_getNullRejectionThreshold",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MixtureModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel_getNullRejectionThreshold" "', argument " "1"" of type '" "GRT::MixtureModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MixtureModel * >(argp1);
  result = (GRT::Float)((GRT::MixtureModel const *)arg1)->getNullRejectionThreshold();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel_getNormalizationFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MixtureModel *arg1 = (GRT::MixtureModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MixtureModel_getNormalizationFactor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MixtureModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel_getNormalizationFactor" "', argument " "1"" of type '" "GRT::MixtureModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MixtureModel * >(argp1);
  result = (GRT::Float)((GRT::MixtureModel const *)arg1)->getNormalizationFactor();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel_setClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MixtureModel *arg1 = (GRT::MixtureModel *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixtureModel_setClassLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MixtureModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel_setClassLabel" "', argument " "1"" of type '" "GRT::MixtureModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MixtureModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixtureModel_setClassLabel" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setClassLabel(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel_setNormalizationFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MixtureModel *arg1 = (GRT::MixtureModel *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixtureModel_setNormalizationFactor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MixtureModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel_setNormalizationFactor" "', argument " "1"" of type '" "GRT::MixtureModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MixtureModel * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixtureModel_setNormalizationFactor" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setNormalizationFactor(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel_setTrainingMuAndSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MixtureModel *arg1 = (GRT::MixtureModel *) 0 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MixtureModel_setTrainingMuAndSigma",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MixtureModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel_setTrainingMuAndSigma" "', argument " "1"" of type '" "GRT::MixtureModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MixtureModel * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixtureModel_setTrainingMuAndSigma" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MixtureModel_setTrainingMuAndSigma" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  result = (bool)(arg1)->setTrainingMuAndSigma(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MixtureModel_setNullRejectionThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MixtureModel *arg1 = (GRT::MixtureModel *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MixtureModel_setNullRejectionThreshold",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MixtureModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MixtureModel_setNullRejectionThreshold" "', argument " "1"" of type '" "GRT::MixtureModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MixtureModel * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MixtureModel_setNullRejectionThreshold" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setNullRejectionThreshold(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MixtureModel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__MixtureModel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GMM__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  bool arg2 ;
  bool arg3 ;
  GRT::Float arg4 ;
  UINT arg5 ;
  GRT::Float arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  GRT::GMM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_GMM",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GMM" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GMM" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GMM" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GMM" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_GMM" "', argument " "5"" of type '" "UINT""'");
  } 
  arg5 = static_cast< UINT >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_GMM" "', argument " "6"" of type '" "GRT::Float""'");
  } 
  arg6 = static_cast< GRT::Float >(val6);
  result = (GRT::GMM *)new GRT::GMM(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GMM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GMM__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  bool arg2 ;
  bool arg3 ;
  GRT::Float arg4 ;
  UINT arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::GMM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_GMM",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GMM" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GMM" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GMM" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GMM" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_GMM" "', argument " "5"" of type '" "UINT""'");
  } 
  arg5 = static_cast< UINT >(val5);
  result = (GRT::GMM *)new GRT::GMM(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GMM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GMM__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  bool arg2 ;
  bool arg3 ;
  GRT::Float arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::GMM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_GMM",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GMM" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GMM" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GMM" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GMM" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = (GRT::GMM *)new GRT::GMM(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GMM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GMM__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  bool arg2 ;
  bool arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::GMM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_GMM",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GMM" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GMM" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GMM" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (GRT::GMM *)new GRT::GMM(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GMM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GMM__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::GMM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_GMM",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GMM" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GMM" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (GRT::GMM *)new GRT::GMM(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GMM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GMM__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::GMM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GMM",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GMM" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  result = (GRT::GMM *)new GRT::GMM(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GMM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GMM__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GMM")) SWIG_fail;
  result = (GRT::GMM *)new GRT::GMM();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GMM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GMM__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::GMM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GMM",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__GMM,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GMM" "', argument " "1"" of type '" "GRT::GMM const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GMM" "', argument " "1"" of type '" "GRT::GMM const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  result = (GRT::GMM *)new GRT::GMM((GRT::GMM const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GMM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GMM(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GMM__SWIG_6(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__GMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GMM__SWIG_7(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_GMM__SWIG_5(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_GMM__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_GMM__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_GMM__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_GMM__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_GMM__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GMM'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GMM::GMM(UINT,bool,bool,GRT::Float,UINT,GRT::Float)\n"
    "    GRT::GMM::GMM(UINT,bool,bool,GRT::Float,UINT)\n"
    "    GRT::GMM::GMM(UINT,bool,bool,GRT::Float)\n"
    "    GRT::GMM::GMM(UINT,bool,bool)\n"
    "    GRT::GMM::GMM(UINT,bool)\n"
    "    GRT::GMM::GMM(UINT)\n"
    "    GRT::GMM::GMM()\n"
    "    GRT::GMM::GMM(GRT::GMM const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_GMM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GMM",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GMM" "', argument " "1"" of type '" "GRT::GMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  GRT::Classifier *arg2 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GMM_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_deepCopyFrom" "', argument " "1"" of type '" "GRT::GMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GMM_deepCopyFrom" "', argument " "2"" of type '" "GRT::Classifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Classifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GMM_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_train_" "', argument " "1"" of type '" "GRT::GMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GMM_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GMM_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GMM_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_predict_" "', argument " "1"" of type '" "GRT::GMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GMM_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GMM_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GMM_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_clear" "', argument " "1"" of type '" "GRT::GMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GMM_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_save" "', argument " "1"" of type '" "GRT::GMM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GMM_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GMM_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::GMM const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GMM_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_load" "', argument " "1"" of type '" "GRT::GMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GMM_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GMM_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_recomputeNullRejectionThresholds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GMM_recomputeNullRejectionThresholds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_recomputeNullRejectionThresholds" "', argument " "1"" of type '" "GRT::GMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  result = (bool)(arg1)->recomputeNullRejectionThresholds();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_getNumMixtureModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GMM_getNumMixtureModels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_getNumMixtureModels" "', argument " "1"" of type '" "GRT::GMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  result = (arg1)->getNumMixtureModels();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_getModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< GRT::MixtureModel > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GMM_getModels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_getModels" "', argument " "1"" of type '" "GRT::GMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  result = (arg1)->getModels();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< GRT::MixtureModel >(static_cast< const GRT::Vector< GRT::MixtureModel >& >(result))), SWIGTYPE_p_GRT__VectorT_GRT__MixtureModel_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_setNumMixtureModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GMM_setNumMixtureModels",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_setNumMixtureModels" "', argument " "1"" of type '" "GRT::GMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GMM_setNumMixtureModels" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNumMixtureModels(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_setMaxIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GMM_setMaxIter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_setMaxIter" "', argument " "1"" of type '" "GRT::GMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GMM_setMaxIter" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setMaxIter(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":GMM_getId")) SWIG_fail;
  result = GRT::GMM::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_save__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GMM_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_save" "', argument " "1"" of type '" "GRT::GMM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GMM_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GMM_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::GMM const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GMM_save__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GMM_save__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GMM_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GMM::save(std::fstream &) const\n"
    "    save(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GMM_load__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GMM_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_load" "', argument " "1"" of type '" "GRT::GMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GMM_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GMM_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GMM_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GMM_load__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GMM_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GMM::load(std::fstream &)\n"
    "    load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GMM_train___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GMM_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_train_" "', argument " "1"" of type '" "GRT::GMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GMM_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GMM_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_train___SWIG_1_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  GRT::RegressionData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GMM_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_train_" "', argument " "1"" of type '" "GRT::GMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GMM_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GMM_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GMM_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GMM_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  arg3 = reinterpret_cast< GRT::RegressionData * >(argp3);
  result = (bool)(arg1)->train_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_train___SWIG_1_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GMM_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_train_" "', argument " "1"" of type '" "GRT::GMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GMM_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GMM_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_train___SWIG_1_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GMM_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_train_" "', argument " "1"" of type '" "GRT::GMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GMM_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GMM_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_train___SWIG_1_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GMM_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_train_" "', argument " "1"" of type '" "GRT::GMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GMM_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GMM_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_train___SWIG_1_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GMM_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_train_" "', argument " "1"" of type '" "GRT::GMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GMM_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GMM_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GMM_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GMM_train___SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GMM_train___SWIG_1_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GMM_train___SWIG_1_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GMM_train___SWIG_1_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GMM_train___SWIG_1_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_GMM_train___SWIG_1_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GMM_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GMM::train_(GRT::ClassificationData &)\n"
    "    train_(GRT::RegressionData &)\n"
    "    train_(GRT::RegressionData &,GRT::RegressionData &)\n"
    "    train_(GRT::TimeSeriesClassificationData &)\n"
    "    train_(GRT::ClassificationDataStream &)\n"
    "    train_(GRT::UnlabelledData &)\n"
    "    train_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GMM_predict___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GMM *arg1 = (GRT::GMM *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GMM_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GMM_predict_" "', argument " "1"" of type '" "GRT::GMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GMM_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GMM_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GMM_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GMM_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GMM_predict___SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GMM_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GMM::predict_(GRT::VectorFloat &)\n"
    "    predict_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *GMM_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__GMM, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ContinuousHiddenMarkovModel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  bool arg3 ;
  GRT::Float arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::ContinuousHiddenMarkovModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ContinuousHiddenMarkovModel",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ContinuousHiddenMarkovModel" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ContinuousHiddenMarkovModel" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ContinuousHiddenMarkovModel" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ContinuousHiddenMarkovModel" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = (GRT::ContinuousHiddenMarkovModel *)new GRT::ContinuousHiddenMarkovModel(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ContinuousHiddenMarkovModel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  bool arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::ContinuousHiddenMarkovModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ContinuousHiddenMarkovModel",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ContinuousHiddenMarkovModel" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ContinuousHiddenMarkovModel" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ContinuousHiddenMarkovModel" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (GRT::ContinuousHiddenMarkovModel *)new GRT::ContinuousHiddenMarkovModel(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ContinuousHiddenMarkovModel__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::ContinuousHiddenMarkovModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ContinuousHiddenMarkovModel",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ContinuousHiddenMarkovModel" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ContinuousHiddenMarkovModel" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (GRT::ContinuousHiddenMarkovModel *)new GRT::ContinuousHiddenMarkovModel(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ContinuousHiddenMarkovModel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ContinuousHiddenMarkovModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ContinuousHiddenMarkovModel",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ContinuousHiddenMarkovModel" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  result = (GRT::ContinuousHiddenMarkovModel *)new GRT::ContinuousHiddenMarkovModel(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ContinuousHiddenMarkovModel__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ContinuousHiddenMarkovModel")) SWIG_fail;
  result = (GRT::ContinuousHiddenMarkovModel *)new GRT::ContinuousHiddenMarkovModel();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ContinuousHiddenMarkovModel__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ContinuousHiddenMarkovModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ContinuousHiddenMarkovModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ContinuousHiddenMarkovModel" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ContinuousHiddenMarkovModel" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  result = (GRT::ContinuousHiddenMarkovModel *)new GRT::ContinuousHiddenMarkovModel((GRT::ContinuousHiddenMarkovModel const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ContinuousHiddenMarkovModel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ContinuousHiddenMarkovModel__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ContinuousHiddenMarkovModel__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ContinuousHiddenMarkovModel__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ContinuousHiddenMarkovModel__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ContinuousHiddenMarkovModel__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ContinuousHiddenMarkovModel__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ContinuousHiddenMarkovModel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ContinuousHiddenMarkovModel::ContinuousHiddenMarkovModel(UINT const,UINT const,bool const,GRT::Float const)\n"
    "    GRT::ContinuousHiddenMarkovModel::ContinuousHiddenMarkovModel(UINT const,UINT const,bool const)\n"
    "    GRT::ContinuousHiddenMarkovModel::ContinuousHiddenMarkovModel(UINT const,UINT const)\n"
    "    GRT::ContinuousHiddenMarkovModel::ContinuousHiddenMarkovModel(UINT const)\n"
    "    GRT::ContinuousHiddenMarkovModel::ContinuousHiddenMarkovModel()\n"
    "    GRT::ContinuousHiddenMarkovModel::ContinuousHiddenMarkovModel(GRT::ContinuousHiddenMarkovModel const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ContinuousHiddenMarkovModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ContinuousHiddenMarkovModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ContinuousHiddenMarkovModel" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousHiddenMarkovModel_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_predict_" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ContinuousHiddenMarkovModel_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ContinuousHiddenMarkovModel_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_predict___SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousHiddenMarkovModel_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_predict_" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ContinuousHiddenMarkovModel_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ContinuousHiddenMarkovModel_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ContinuousHiddenMarkovModel_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ContinuousHiddenMarkovModel_predict___SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ContinuousHiddenMarkovModel_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ContinuousHiddenMarkovModel::predict_(GRT::VectorFloat &)\n"
    "    GRT::ContinuousHiddenMarkovModel::predict_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  GRT::TimeSeriesClassificationSample *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousHiddenMarkovModel_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationSample,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationSample &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationSample &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationSample * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ContinuousHiddenMarkovModel_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_reset" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  result = (bool)(arg1)->reset();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ContinuousHiddenMarkovModel_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_clear" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousHiddenMarkovModel_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_save" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ContinuousHiddenMarkovModel_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ContinuousHiddenMarkovModel_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::ContinuousHiddenMarkovModel const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousHiddenMarkovModel_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_load" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ContinuousHiddenMarkovModel_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ContinuousHiddenMarkovModel_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ContinuousHiddenMarkovModel__print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel__print" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  result = (bool)((GRT::ContinuousHiddenMarkovModel const *)arg1)->print();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_getNumStates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ContinuousHiddenMarkovModel_getNumStates",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_getNumStates" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  result = ((GRT::ContinuousHiddenMarkovModel const *)arg1)->getNumStates();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_getClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ContinuousHiddenMarkovModel_getClassLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_getClassLabel" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  result = ((GRT::ContinuousHiddenMarkovModel const *)arg1)->getClassLabel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_getLoglikelihood(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ContinuousHiddenMarkovModel_getLoglikelihood",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_getLoglikelihood" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  result = (GRT::Float)((GRT::ContinuousHiddenMarkovModel const *)arg1)->getLoglikelihood();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_getPhase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ContinuousHiddenMarkovModel_getPhase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_getPhase" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  result = (GRT::Float)((GRT::ContinuousHiddenMarkovModel const *)arg1)->getPhase();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_getEstimatedStates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< UINT > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ContinuousHiddenMarkovModel_getEstimatedStates",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_getEstimatedStates" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  result = ((GRT::ContinuousHiddenMarkovModel const *)arg1)->getEstimatedStates();
  
  resultobj = PyList_New((&result)->size());
  for (int i = 0; i < (&result)->size(); ++i) {
    PyList_SetItem(resultobj, i, PyInt_FromLong(result[i]));
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_getAlpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ContinuousHiddenMarkovModel_getAlpha",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_getAlpha" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  result = ((GRT::ContinuousHiddenMarkovModel const *)arg1)->getAlpha();
  
  {
    npy_intp dims[2]{
      (&result)->getNumRows(), (&result)->getNumCols()
    };
    resultobj = PyArray_SimpleNew(2, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->getNumRows(); ++i) {
      for (size_t j = 0; j < (&result)->getNumCols(); ++j) {
        float* d_ptr = static_cast<float*>(PyArray_GETPTR2(arr_ptr, i, j));
        *d_ptr = result[i][j];
      }
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_setDownsampleFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousHiddenMarkovModel_setDownsampleFactor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_setDownsampleFactor" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ContinuousHiddenMarkovModel_setDownsampleFactor" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setDownsampleFactor(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_setModelType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousHiddenMarkovModel_setModelType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_setModelType" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ContinuousHiddenMarkovModel_setModelType" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setModelType(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_setDelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousHiddenMarkovModel_setDelta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_setDelta" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ContinuousHiddenMarkovModel_setDelta" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setDelta(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_setSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousHiddenMarkovModel_setSigma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_setSigma" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ContinuousHiddenMarkovModel_setSigma" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setSigma(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_setAutoEstimateSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousHiddenMarkovModel_setAutoEstimateSigma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_setAutoEstimateSigma" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ContinuousHiddenMarkovModel_setAutoEstimateSigma" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setAutoEstimateSigma(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_save__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousHiddenMarkovModel_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_save" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ContinuousHiddenMarkovModel_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ContinuousHiddenMarkovModel_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::ContinuousHiddenMarkovModel const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ContinuousHiddenMarkovModel_save__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ContinuousHiddenMarkovModel_save__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ContinuousHiddenMarkovModel_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ContinuousHiddenMarkovModel::save(std::fstream &) const\n"
    "    save(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_load__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousHiddenMarkovModel_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_load" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ContinuousHiddenMarkovModel_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ContinuousHiddenMarkovModel_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ContinuousHiddenMarkovModel_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ContinuousHiddenMarkovModel_load__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ContinuousHiddenMarkovModel_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ContinuousHiddenMarkovModel::load(std::fstream &)\n"
    "    load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_train___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousHiddenMarkovModel_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_train___SWIG_1_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousHiddenMarkovModel_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_train___SWIG_1_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  GRT::RegressionData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ContinuousHiddenMarkovModel_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  arg3 = reinterpret_cast< GRT::RegressionData * >(argp3);
  result = (bool)(arg1)->train_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_train___SWIG_1_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousHiddenMarkovModel_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_train___SWIG_1_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousHiddenMarkovModel_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_train___SWIG_1_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousHiddenMarkovModel_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_train___SWIG_1_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ContinuousHiddenMarkovModel *arg1 = (GRT::ContinuousHiddenMarkovModel *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ContinuousHiddenMarkovModel_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "1"" of type '" "GRT::ContinuousHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ContinuousHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ContinuousHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContinuousHiddenMarkovModel_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationSample, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ContinuousHiddenMarkovModel_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ContinuousHiddenMarkovModel_train___SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ContinuousHiddenMarkovModel_train___SWIG_1_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ContinuousHiddenMarkovModel_train___SWIG_1_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ContinuousHiddenMarkovModel_train___SWIG_1_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ContinuousHiddenMarkovModel_train___SWIG_1_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ContinuousHiddenMarkovModel_train___SWIG_1_6(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ContinuousHiddenMarkovModel_train___SWIG_1_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ContinuousHiddenMarkovModel_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ContinuousHiddenMarkovModel::train_(GRT::TimeSeriesClassificationSample &)\n"
    "    train_(GRT::ClassificationData &)\n"
    "    train_(GRT::RegressionData &)\n"
    "    train_(GRT::RegressionData &,GRT::RegressionData &)\n"
    "    train_(GRT::TimeSeriesClassificationData &)\n"
    "    train_(GRT::ClassificationDataStream &)\n"
    "    train_(GRT::UnlabelledData &)\n"
    "    train_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *ContinuousHiddenMarkovModel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__ContinuousHiddenMarkovModel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_HMMTrainingObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMMTrainingObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_HMMTrainingObject")) SWIG_fail;
  result = (GRT::HMMTrainingObject *)new GRT::HMMTrainingObject();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__HMMTrainingObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HMMTrainingObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMMTrainingObject *arg1 = (GRT::HMMTrainingObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HMMTrainingObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMMTrainingObject, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HMMTrainingObject" "', argument " "1"" of type '" "GRT::HMMTrainingObject *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMMTrainingObject * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMMTrainingObject_alpha_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMMTrainingObject *arg1 = (GRT::HMMTrainingObject *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMMTrainingObject_alpha_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMMTrainingObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMTrainingObject_alpha_set" "', argument " "1"" of type '" "GRT::HMMTrainingObject *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMMTrainingObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMMTrainingObject_alpha_set" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMMTrainingObject_alpha_set" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  if (arg1) (arg1)->alpha = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMMTrainingObject_alpha_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMMTrainingObject *arg1 = (GRT::HMMTrainingObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HMMTrainingObject_alpha_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMMTrainingObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMTrainingObject_alpha_get" "', argument " "1"" of type '" "GRT::HMMTrainingObject *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMMTrainingObject * >(argp1);
  result = (GRT::MatrixFloat *) & ((arg1)->alpha);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMMTrainingObject_beta_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMMTrainingObject *arg1 = (GRT::HMMTrainingObject *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMMTrainingObject_beta_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMMTrainingObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMTrainingObject_beta_set" "', argument " "1"" of type '" "GRT::HMMTrainingObject *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMMTrainingObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMMTrainingObject_beta_set" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMMTrainingObject_beta_set" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  if (arg1) (arg1)->beta = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMMTrainingObject_beta_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMMTrainingObject *arg1 = (GRT::HMMTrainingObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HMMTrainingObject_beta_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMMTrainingObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMTrainingObject_beta_get" "', argument " "1"" of type '" "GRT::HMMTrainingObject *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMMTrainingObject * >(argp1);
  result = (GRT::MatrixFloat *) & ((arg1)->beta);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMMTrainingObject_c_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMMTrainingObject *arg1 = (GRT::HMMTrainingObject *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMMTrainingObject_c_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMMTrainingObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMTrainingObject_c_set" "', argument " "1"" of type '" "GRT::HMMTrainingObject *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMMTrainingObject * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMMTrainingObject_c_set" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMMTrainingObject_c_set" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  if (arg1) (arg1)->c = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMMTrainingObject_c_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMMTrainingObject *arg1 = (GRT::HMMTrainingObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HMMTrainingObject_c_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMMTrainingObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMTrainingObject_c_get" "', argument " "1"" of type '" "GRT::HMMTrainingObject *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMMTrainingObject * >(argp1);
  result = (GRT::VectorFloat *) & ((arg1)->c);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMMTrainingObject_pk_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMMTrainingObject *arg1 = (GRT::HMMTrainingObject *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMMTrainingObject_pk_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMMTrainingObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMTrainingObject_pk_set" "', argument " "1"" of type '" "GRT::HMMTrainingObject *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMMTrainingObject * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMMTrainingObject_pk_set" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  if (arg1) (arg1)->pk = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMMTrainingObject_pk_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMMTrainingObject *arg1 = (GRT::HMMTrainingObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HMMTrainingObject_pk_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMMTrainingObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMMTrainingObject_pk_get" "', argument " "1"" of type '" "GRT::HMMTrainingObject *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMMTrainingObject * >(argp1);
  result = (GRT::Float) ((arg1)->pk);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HMMTrainingObject_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__HMMTrainingObject, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DiscreteHiddenMarkovModel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DiscreteHiddenMarkovModel")) SWIG_fail;
  result = (GRT::DiscreteHiddenMarkovModel *)new GRT::DiscreteHiddenMarkovModel();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiscreteHiddenMarkovModel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  UINT arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::DiscreteHiddenMarkovModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_DiscreteHiddenMarkovModel",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DiscreteHiddenMarkovModel" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DiscreteHiddenMarkovModel" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DiscreteHiddenMarkovModel" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DiscreteHiddenMarkovModel" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  result = (GRT::DiscreteHiddenMarkovModel *)new GRT::DiscreteHiddenMarkovModel(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiscreteHiddenMarkovModel__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MatrixFloat *arg1 = 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  GRT::VectorFloat *arg3 = 0 ;
  UINT arg4 ;
  UINT arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::DiscreteHiddenMarkovModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_DiscreteHiddenMarkovModel",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DiscreteHiddenMarkovModel" "', argument " "1"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiscreteHiddenMarkovModel" "', argument " "1"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::MatrixFloat * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DiscreteHiddenMarkovModel" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiscreteHiddenMarkovModel" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_DiscreteHiddenMarkovModel" "', argument " "3"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiscreteHiddenMarkovModel" "', argument " "3"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg3 = reinterpret_cast< GRT::VectorFloat * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DiscreteHiddenMarkovModel" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_DiscreteHiddenMarkovModel" "', argument " "5"" of type '" "UINT""'");
  } 
  arg5 = static_cast< UINT >(val5);
  result = (GRT::DiscreteHiddenMarkovModel *)new GRT::DiscreteHiddenMarkovModel((GRT::MatrixFloat const &)*arg1,(GRT::MatrixFloat const &)*arg2,(GRT::VectorFloat const &)*arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiscreteHiddenMarkovModel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::DiscreteHiddenMarkovModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DiscreteHiddenMarkovModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DiscreteHiddenMarkovModel" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiscreteHiddenMarkovModel" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  result = (GRT::DiscreteHiddenMarkovModel *)new GRT::DiscreteHiddenMarkovModel((GRT::DiscreteHiddenMarkovModel const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiscreteHiddenMarkovModel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DiscreteHiddenMarkovModel__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DiscreteHiddenMarkovModel__SWIG_3(self, args);
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_DiscreteHiddenMarkovModel__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_DiscreteHiddenMarkovModel__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DiscreteHiddenMarkovModel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DiscreteHiddenMarkovModel::DiscreteHiddenMarkovModel()\n"
    "    GRT::DiscreteHiddenMarkovModel::DiscreteHiddenMarkovModel(UINT const,UINT const,UINT const,UINT const)\n"
    "    GRT::DiscreteHiddenMarkovModel::DiscreteHiddenMarkovModel(GRT::MatrixFloat const &,GRT::MatrixFloat const &,GRT::VectorFloat const &,UINT const,UINT const)\n"
    "    GRT::DiscreteHiddenMarkovModel::DiscreteHiddenMarkovModel(GRT::DiscreteHiddenMarkovModel const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DiscreteHiddenMarkovModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DiscreteHiddenMarkovModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DiscreteHiddenMarkovModel" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_predict__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_predict" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiscreteHiddenMarkovModel_predict" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (GRT::Float)(arg1)->predict(arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_predict__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::Vector< UINT > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_predict" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_UINT_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_predict" "', argument " "2"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_predict" "', argument " "2"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< UINT > * >(argp2);
  result = (GRT::Float)(arg1)->predict((GRT::Vector< UINT > const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_resetModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  UINT arg4 ;
  UINT arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DiscreteHiddenMarkovModel_resetModel",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_resetModel" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiscreteHiddenMarkovModel_resetModel" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DiscreteHiddenMarkovModel_resetModel" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DiscreteHiddenMarkovModel_resetModel" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "DiscreteHiddenMarkovModel_resetModel" "', argument " "5"" of type '" "UINT""'");
  } 
  arg5 = static_cast< UINT >(val5);
  result = (bool)(arg1)->resetModel(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_train__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::Vector< GRT::Vector< UINT > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_GRT__VectorT_UINT_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "2"" of type '" "GRT::Vector< GRT::Vector< UINT > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "2"" of type '" "GRT::Vector< GRT::Vector< UINT > > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< GRT::Vector< UINT > > * >(argp2);
  result = (bool)(arg1)->train((GRT::Vector< GRT::Vector< UINT > > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiscreteHiddenMarkovModel_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_reset" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  result = (bool)(arg1)->reset();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_save" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::DiscreteHiddenMarkovModel const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_load" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_randomizeMatrices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DiscreteHiddenMarkovModel_randomizeMatrices",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_randomizeMatrices" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DiscreteHiddenMarkovModel_randomizeMatrices" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DiscreteHiddenMarkovModel_randomizeMatrices" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)(arg1)->randomizeMatrices(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_predictLogLikelihood(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::Vector< UINT > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_predictLogLikelihood",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_predictLogLikelihood" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_UINT_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_predictLogLikelihood" "', argument " "2"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_predictLogLikelihood" "', argument " "2"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< UINT > * >(argp2);
  result = (GRT::Float)(arg1)->predictLogLikelihood((GRT::Vector< UINT > const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_forwardBackward(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::HMMTrainingObject *arg2 = 0 ;
  GRT::Vector< UINT > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DiscreteHiddenMarkovModel_forwardBackward",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_forwardBackward" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__HMMTrainingObject,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_forwardBackward" "', argument " "2"" of type '" "GRT::HMMTrainingObject &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_forwardBackward" "', argument " "2"" of type '" "GRT::HMMTrainingObject &""'"); 
  }
  arg2 = reinterpret_cast< GRT::HMMTrainingObject * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__VectorT_UINT_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DiscreteHiddenMarkovModel_forwardBackward" "', argument " "3"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_forwardBackward" "', argument " "3"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  arg3 = reinterpret_cast< GRT::Vector< UINT > * >(argp3);
  result = (bool)(arg1)->forwardBackward(*arg2,(GRT::Vector< UINT > const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::Vector< GRT::Vector< UINT > > *arg2 = 0 ;
  UINT arg3 ;
  UINT *arg4 = 0 ;
  GRT::Float *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:DiscreteHiddenMarkovModel_train_",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_GRT__VectorT_UINT_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::Vector< GRT::Vector< UINT > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::Vector< GRT::Vector< UINT > > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< GRT::Vector< UINT > > * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_UINT,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "4"" of type '" "UINT &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "4"" of type '" "UINT &""'"); 
  }
  arg4 = reinterpret_cast< UINT * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "5"" of type '" "GRT::Float &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "5"" of type '" "GRT::Float &""'"); 
  }
  arg5 = reinterpret_cast< GRT::Float * >(argp5);
  result = (bool)(arg1)->train_((GRT::Vector< GRT::Vector< UINT > > const &)*arg2,arg3,*arg4,*arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiscreteHiddenMarkovModel__print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel__print" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  result = (bool)((GRT::DiscreteHiddenMarkovModel const *)arg1)->print();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_getTrainingIterationLog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DiscreteHiddenMarkovModel_getTrainingIterationLog",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_getTrainingIterationLog" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  result = ((GRT::DiscreteHiddenMarkovModel const *)arg1)->getTrainingIterationLog();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_save__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_save" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::DiscreteHiddenMarkovModel const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_save__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_save__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DiscreteHiddenMarkovModel_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DiscreteHiddenMarkovModel::save(std::fstream &) const\n"
    "    save(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_load__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_load" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_load__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DiscreteHiddenMarkovModel_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DiscreteHiddenMarkovModel::load(std::fstream &)\n"
    "    load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_train__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::ClassificationData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "2"" of type '" "GRT::ClassificationData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "2"" of type '" "GRT::ClassificationData""'");
    } else {
      GRT::ClassificationData * temp = reinterpret_cast< GRT::ClassificationData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_train__SWIG_1_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::RegressionData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "2"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "2"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_train__SWIG_1_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::RegressionData arg2 ;
  GRT::RegressionData arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DiscreteHiddenMarkovModel_train",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "2"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "2"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "3"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "3"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_train__SWIG_1_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::TimeSeriesClassificationData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData""'");
    } else {
      GRT::TimeSeriesClassificationData * temp = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_train__SWIG_1_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::ClassificationDataStream arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "2"" of type '" "GRT::ClassificationDataStream""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "2"" of type '" "GRT::ClassificationDataStream""'");
    } else {
      GRT::ClassificationDataStream * temp = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_train__SWIG_1_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::UnlabelledData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "2"" of type '" "GRT::UnlabelledData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "2"" of type '" "GRT::UnlabelledData""'");
    } else {
      GRT::UnlabelledData * temp = reinterpret_cast< GRT::UnlabelledData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_train__SWIG_1_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::MatrixFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "2"" of type '" "GRT::MatrixFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train" "', argument " "2"" of type '" "GRT::MatrixFloat""'");
    } else {
      GRT::MatrixFloat * temp = reinterpret_cast< GRT::MatrixFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_train(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorT_GRT__VectorT_UINT_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_train__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_train__SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_train__SWIG_1_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_train__SWIG_1_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_train__SWIG_1_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_train__SWIG_1_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_train__SWIG_1_6(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DiscreteHiddenMarkovModel_train__SWIG_1_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DiscreteHiddenMarkovModel_train'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DiscreteHiddenMarkovModel::train(GRT::Vector< GRT::Vector< UINT > > const &)\n"
    "    train(GRT::ClassificationData)\n"
    "    train(GRT::RegressionData)\n"
    "    train(GRT::RegressionData,GRT::RegressionData)\n"
    "    train(GRT::TimeSeriesClassificationData)\n"
    "    train(GRT::ClassificationDataStream)\n"
    "    train(GRT::UnlabelledData)\n"
    "    train(GRT::MatrixFloat)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_train___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_train___SWIG_1_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_train___SWIG_1_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  GRT::RegressionData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DiscreteHiddenMarkovModel_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  arg3 = reinterpret_cast< GRT::RegressionData * >(argp3);
  result = (bool)(arg1)->train_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_train___SWIG_1_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_train___SWIG_1_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_train___SWIG_1_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_train___SWIG_1_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_train___SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_train___SWIG_1_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_train___SWIG_1_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_train___SWIG_1_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_train___SWIG_1_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_train___SWIG_1_6(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DiscreteHiddenMarkovModel_train___SWIG_1_2(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorT_GRT__VectorT_UINT_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_UINT, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_double, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_DiscreteHiddenMarkovModel_train___SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DiscreteHiddenMarkovModel_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DiscreteHiddenMarkovModel::train_(GRT::Vector< GRT::Vector< UINT > > const &,UINT const,UINT &,GRT::Float &)\n"
    "    train_(GRT::ClassificationData &)\n"
    "    train_(GRT::RegressionData &)\n"
    "    train_(GRT::RegressionData &,GRT::RegressionData &)\n"
    "    train_(GRT::TimeSeriesClassificationData &)\n"
    "    train_(GRT::ClassificationDataStream &)\n"
    "    train_(GRT::UnlabelledData &)\n"
    "    train_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_predict__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_predict_" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_predict__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_predict_" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_predict__SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_predict__SWIG_0_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DiscreteHiddenMarkovModel_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    predict_(GRT::VectorFloat &)\n"
    "    predict_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_predict__SWIG_2_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::VectorFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_predict" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_predict" "', argument " "2"" of type '" "GRT::VectorFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_predict" "', argument " "2"" of type '" "GRT::VectorFloat""'");
    } else {
      GRT::VectorFloat * temp = reinterpret_cast< GRT::VectorFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->predict(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_predict__SWIG_2_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DiscreteHiddenMarkovModel *arg1 = (GRT::DiscreteHiddenMarkovModel *) 0 ;
  GRT::MatrixFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DiscreteHiddenMarkovModel_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiscreteHiddenMarkovModel_predict" "', argument " "1"" of type '" "GRT::DiscreteHiddenMarkovModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::DiscreteHiddenMarkovModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DiscreteHiddenMarkovModel_predict" "', argument " "2"" of type '" "GRT::MatrixFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DiscreteHiddenMarkovModel_predict" "', argument " "2"" of type '" "GRT::MatrixFloat""'");
    } else {
      GRT::MatrixFloat * temp = reinterpret_cast< GRT::MatrixFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->predict(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiscreteHiddenMarkovModel_predict(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorT_UINT_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_predict__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_predict__SWIG_2_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_predict__SWIG_2_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DiscreteHiddenMarkovModel_predict__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DiscreteHiddenMarkovModel_predict'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::DiscreteHiddenMarkovModel::predict(UINT const)\n"
    "    GRT::DiscreteHiddenMarkovModel::predict(GRT::Vector< UINT > const &)\n"
    "    predict(GRT::VectorFloat)\n"
    "    predict(GRT::MatrixFloat)\n");
  return 0;
}


SWIGINTERN PyObject *DiscreteHiddenMarkovModel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__DiscreteHiddenMarkovModel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_HMM__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  bool arg4 ;
  bool arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::HMM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_HMM",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HMM" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_HMM" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_HMM" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_HMM" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_HMM" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (GRT::HMM *)new GRT::HMM(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__HMM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HMM__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  bool arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::HMM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_HMM",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HMM" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_HMM" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_HMM" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_HMM" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (GRT::HMM *)new GRT::HMM(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__HMM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HMM__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::HMM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_HMM",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HMM" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_HMM" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_HMM" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (GRT::HMM *)new GRT::HMM(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__HMM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HMM__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::HMM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_HMM",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HMM" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_HMM" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (GRT::HMM *)new GRT::HMM(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__HMM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HMM__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::HMM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_HMM",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HMM" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  result = (GRT::HMM *)new GRT::HMM(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__HMM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HMM__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_HMM")) SWIG_fail;
  result = (GRT::HMM *)new GRT::HMM();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__HMM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HMM__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::HMM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_HMM",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__HMM,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HMM" "', argument " "1"" of type '" "GRT::HMM const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HMM" "', argument " "1"" of type '" "GRT::HMM const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  result = (GRT::HMM *)new GRT::HMM((GRT::HMM const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__HMM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HMM(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_HMM__SWIG_5(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HMM__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_HMM__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_HMM__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_HMM__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_HMM__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_HMM__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_HMM'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::HMM::HMM(UINT const,UINT const,UINT const,bool const,bool const)\n"
    "    GRT::HMM::HMM(UINT const,UINT const,UINT const,bool const)\n"
    "    GRT::HMM::HMM(UINT const,UINT const,UINT const)\n"
    "    GRT::HMM::HMM(UINT const,UINT const)\n"
    "    GRT::HMM::HMM(UINT const)\n"
    "    GRT::HMM::HMM()\n"
    "    GRT::HMM::HMM(GRT::HMM const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_HMM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HMM",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HMM" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  GRT::Classifier *arg2 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_deepCopyFrom" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_deepCopyFrom" "', argument " "2"" of type '" "GRT::Classifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Classifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_train__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  GRT::ClassificationData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_train" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_train" "', argument " "2"" of type '" "GRT::ClassificationData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_train" "', argument " "2"" of type '" "GRT::ClassificationData""'");
    } else {
      GRT::ClassificationData * temp = reinterpret_cast< GRT::ClassificationData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_train_" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_predict_" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_predict___SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_predict_" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HMM_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HMM_predict___SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'HMM_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::HMM::predict_(GRT::VectorFloat &)\n"
    "    GRT::HMM::predict_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HMM_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HMM_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_reset" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  result = (bool)(arg1)->reset();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HMM_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_clear" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HMM__print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM__print" "', argument " "1"" of type '" "GRT::HMM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  result = (bool)((GRT::HMM const *)arg1)->print();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_save" "', argument " "1"" of type '" "GRT::HMM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::HMM const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_load" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_getHMMType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HMM_getHMMType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_getHMMType" "', argument " "1"" of type '" "GRT::HMM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  result = ((GRT::HMM const *)arg1)->getHMMType();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_getModelType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HMM_getModelType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_getModelType" "', argument " "1"" of type '" "GRT::HMM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  result = ((GRT::HMM const *)arg1)->getModelType();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_getDelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HMM_getDelta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_getDelta" "', argument " "1"" of type '" "GRT::HMM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  result = ((GRT::HMM const *)arg1)->getDelta();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_getNumStates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HMM_getNumStates",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_getNumStates" "', argument " "1"" of type '" "GRT::HMM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  result = ((GRT::HMM const *)arg1)->getNumStates();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_getNumSymbols(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HMM_getNumSymbols",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_getNumSymbols" "', argument " "1"" of type '" "GRT::HMM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  result = ((GRT::HMM const *)arg1)->getNumSymbols();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_getNumRandomTrainingIterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HMM_getNumRandomTrainingIterations",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_getNumRandomTrainingIterations" "', argument " "1"" of type '" "GRT::HMM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  result = ((GRT::HMM const *)arg1)->getNumRandomTrainingIterations();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_getDiscreteModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< GRT::DiscreteHiddenMarkovModel > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HMM_getDiscreteModels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_getDiscreteModels" "', argument " "1"" of type '" "GRT::HMM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  result = ((GRT::HMM const *)arg1)->getDiscreteModels();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< GRT::DiscreteHiddenMarkovModel >(static_cast< const GRT::Vector< GRT::DiscreteHiddenMarkovModel >& >(result))), SWIGTYPE_p_GRT__VectorT_GRT__DiscreteHiddenMarkovModel_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_getContinuousModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< GRT::ContinuousHiddenMarkovModel > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HMM_getContinuousModels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_getContinuousModels" "', argument " "1"" of type '" "GRT::HMM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  result = ((GRT::HMM const *)arg1)->getContinuousModels();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< GRT::ContinuousHiddenMarkovModel >(static_cast< const GRT::Vector< GRT::ContinuousHiddenMarkovModel >& >(result))), SWIGTYPE_p_GRT__VectorT_GRT__ContinuousHiddenMarkovModel_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_setHMMType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_setHMMType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_setHMMType" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_setHMMType" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setHMMType(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_setModelType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_setModelType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_setModelType" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_setModelType" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setModelType(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_setDelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_setDelta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_setDelta" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_setDelta" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setDelta(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_setDownsampleFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_setDownsampleFactor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_setDownsampleFactor" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_setDownsampleFactor" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setDownsampleFactor(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_setCommitteeSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_setCommitteeSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_setCommitteeSize" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_setCommitteeSize" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setCommitteeSize(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_setNumStates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_setNumStates",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_setNumStates" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_setNumStates" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNumStates(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_setNumSymbols(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_setNumSymbols",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_setNumSymbols" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_setNumSymbols" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNumSymbols(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_setNumRandomTrainingIterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_setNumRandomTrainingIterations",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_setNumRandomTrainingIterations" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_setNumRandomTrainingIterations" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNumRandomTrainingIterations(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_setSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_setSigma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_setSigma" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_setSigma" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setSigma(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_setAutoEstimateSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_setAutoEstimateSigma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_setAutoEstimateSigma" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HMM_setAutoEstimateSigma" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setAutoEstimateSigma(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":HMM_getId")) SWIG_fail;
  result = GRT::HMM::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_save__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_save" "', argument " "1"" of type '" "GRT::HMM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::HMM const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HMM_save__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HMM_save__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'HMM_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::HMM::save(std::fstream &) const\n"
    "    save(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HMM_load__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_load" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HMM_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HMM_load__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'HMM_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::HMM::load(std::fstream &)\n"
    "    load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HMM_train__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  GRT::RegressionData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_train" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_train" "', argument " "2"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_train" "', argument " "2"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_train__SWIG_1_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  GRT::RegressionData arg2 ;
  GRT::RegressionData arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:HMM_train",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_train" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_train" "', argument " "2"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_train" "', argument " "2"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HMM_train" "', argument " "3"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_train" "', argument " "3"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_train__SWIG_1_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  GRT::TimeSeriesClassificationData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_train" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData""'");
    } else {
      GRT::TimeSeriesClassificationData * temp = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_train__SWIG_1_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  GRT::ClassificationDataStream arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_train" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_train" "', argument " "2"" of type '" "GRT::ClassificationDataStream""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_train" "', argument " "2"" of type '" "GRT::ClassificationDataStream""'");
    } else {
      GRT::ClassificationDataStream * temp = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_train__SWIG_1_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  GRT::UnlabelledData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_train" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_train" "', argument " "2"" of type '" "GRT::UnlabelledData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_train" "', argument " "2"" of type '" "GRT::UnlabelledData""'");
    } else {
      GRT::UnlabelledData * temp = reinterpret_cast< GRT::UnlabelledData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_train__SWIG_1_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  GRT::MatrixFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_train" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_train" "', argument " "2"" of type '" "GRT::MatrixFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_train" "', argument " "2"" of type '" "GRT::MatrixFloat""'");
    } else {
      GRT::MatrixFloat * temp = reinterpret_cast< GRT::MatrixFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_train(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HMM_train__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HMM_train__SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HMM_train__SWIG_1_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HMM_train__SWIG_1_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HMM_train__SWIG_1_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HMM_train__SWIG_1_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HMM_train__SWIG_1_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'HMM_train'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::HMM::train(GRT::ClassificationData)\n"
    "    train(GRT::RegressionData)\n"
    "    train(GRT::RegressionData,GRT::RegressionData)\n"
    "    train(GRT::TimeSeriesClassificationData)\n"
    "    train(GRT::ClassificationDataStream)\n"
    "    train(GRT::UnlabelledData)\n"
    "    train(GRT::MatrixFloat)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HMM_train___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_train_" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_train___SWIG_1_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_train_" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_train___SWIG_1_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  GRT::RegressionData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:HMM_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_train_" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HMM_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  arg3 = reinterpret_cast< GRT::RegressionData * >(argp3);
  result = (bool)(arg1)->train_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_train___SWIG_1_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_train_" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_train___SWIG_1_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_train_" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_train___SWIG_1_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HMM *arg1 = (GRT::HMM *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HMM_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HMM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HMM_train_" "', argument " "1"" of type '" "GRT::HMM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HMM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HMM_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HMM_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HMM_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HMM_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HMM_train___SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HMM_train___SWIG_1_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HMM_train___SWIG_1_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HMM_train___SWIG_1_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HMM_train___SWIG_1_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HMM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HMM_train___SWIG_1_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'HMM_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::HMM::train_(GRT::TimeSeriesClassificationData &)\n"
    "    train_(GRT::ClassificationData &)\n"
    "    train_(GRT::RegressionData &)\n"
    "    train_(GRT::RegressionData &,GRT::RegressionData &)\n"
    "    train_(GRT::ClassificationDataStream &)\n"
    "    train_(GRT::UnlabelledData &)\n"
    "    train_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *HMM_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__HMM, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MinDistModel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MinDistModel")) SWIG_fail;
  result = (GRT::MinDistModel *)new GRT::MinDistModel();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MinDistModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MinDistModel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MinDistModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MinDistModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__MinDistModel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MinDistModel" "', argument " "1"" of type '" "GRT::MinDistModel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MinDistModel" "', argument " "1"" of type '" "GRT::MinDistModel const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  result = (GRT::MinDistModel *)new GRT::MinDistModel((GRT::MinDistModel const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MinDistModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MinDistModel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MinDistModel__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__MinDistModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MinDistModel__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MinDistModel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MinDistModel::MinDistModel()\n"
    "    GRT::MinDistModel::MinDistModel(GRT::MinDistModel const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MinDistModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = (GRT::MinDistModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MinDistModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDistModel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MinDistModel" "', argument " "1"" of type '" "GRT::MinDistModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDistModel_train(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = (GRT::MinDistModel *) 0 ;
  UINT arg2 ;
  GRT::MatrixFloat *arg3 = 0 ;
  UINT arg4 ;
  GRT::Float arg5 ;
  UINT arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:MinDistModel_train",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDistModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDistModel_train" "', argument " "1"" of type '" "GRT::MinDistModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MinDistModel_train" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MinDistModel_train" "', argument " "3"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MinDistModel_train" "', argument " "3"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg3 = reinterpret_cast< GRT::MatrixFloat * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MinDistModel_train" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MinDistModel_train" "', argument " "5"" of type '" "GRT::Float""'");
  } 
  arg5 = static_cast< GRT::Float >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "MinDistModel_train" "', argument " "6"" of type '" "UINT""'");
  } 
  arg6 = static_cast< UINT >(val6);
  result = (bool)(arg1)->train(arg2,*arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDistModel_predict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = (GRT::MinDistModel *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDistModel_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDistModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDistModel_predict" "', argument " "1"" of type '" "GRT::MinDistModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MinDistModel_predict" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MinDistModel_predict" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (GRT::Float)(arg1)->predict((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDistModel_recomputeThresholdValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = (GRT::MinDistModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MinDistModel_recomputeThresholdValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDistModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDistModel_recomputeThresholdValue" "', argument " "1"" of type '" "GRT::MinDistModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  (arg1)->recomputeThresholdValue();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDistModel_getClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = (GRT::MinDistModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MinDistModel_getClassLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDistModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDistModel_getClassLabel" "', argument " "1"" of type '" "GRT::MinDistModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  result = ((GRT::MinDistModel const *)arg1)->getClassLabel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDistModel_getNumFeatures(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = (GRT::MinDistModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MinDistModel_getNumFeatures",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDistModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDistModel_getNumFeatures" "', argument " "1"" of type '" "GRT::MinDistModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  result = ((GRT::MinDistModel const *)arg1)->getNumFeatures();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDistModel_getNumClusters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = (GRT::MinDistModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MinDistModel_getNumClusters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDistModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDistModel_getNumClusters" "', argument " "1"" of type '" "GRT::MinDistModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  result = ((GRT::MinDistModel const *)arg1)->getNumClusters();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDistModel_getRejectionThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = (GRT::MinDistModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MinDistModel_getRejectionThreshold",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDistModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDistModel_getRejectionThreshold" "', argument " "1"" of type '" "GRT::MinDistModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  result = (GRT::Float)((GRT::MinDistModel const *)arg1)->getRejectionThreshold();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDistModel_getGamma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = (GRT::MinDistModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MinDistModel_getGamma",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDistModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDistModel_getGamma" "', argument " "1"" of type '" "GRT::MinDistModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  result = (GRT::Float)((GRT::MinDistModel const *)arg1)->getGamma();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDistModel_getTrainingMu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = (GRT::MinDistModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MinDistModel_getTrainingMu",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDistModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDistModel_getTrainingMu" "', argument " "1"" of type '" "GRT::MinDistModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  result = (GRT::Float)((GRT::MinDistModel const *)arg1)->getTrainingMu();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDistModel_getTrainingSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = (GRT::MinDistModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MinDistModel_getTrainingSigma",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDistModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDistModel_getTrainingSigma" "', argument " "1"" of type '" "GRT::MinDistModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  result = (GRT::Float)((GRT::MinDistModel const *)arg1)->getTrainingSigma();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDistModel_getClusters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = (GRT::MinDistModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MinDistModel_getClusters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDistModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDistModel_getClusters" "', argument " "1"" of type '" "GRT::MinDistModel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  result = ((GRT::MinDistModel const *)arg1)->getClusters();
  
  {
    npy_intp dims[2]{
      (&result)->getNumRows(), (&result)->getNumCols()
    };
    resultobj = PyArray_SimpleNew(2, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->getNumRows(); ++i) {
      for (size_t j = 0; j < (&result)->getNumCols(); ++j) {
        float* d_ptr = static_cast<float*>(PyArray_GETPTR2(arr_ptr, i, j));
        *d_ptr = result[i][j];
      }
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDistModel_setClassLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = (GRT::MinDistModel *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDistModel_setClassLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDistModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDistModel_setClassLabel" "', argument " "1"" of type '" "GRT::MinDistModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MinDistModel_setClassLabel" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setClassLabel(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDistModel_setClusters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = (GRT::MinDistModel *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDistModel_setClusters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDistModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDistModel_setClusters" "', argument " "1"" of type '" "GRT::MinDistModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MinDistModel_setClusters" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MinDistModel_setClusters" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->setClusters(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDistModel_setGamma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = (GRT::MinDistModel *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDistModel_setGamma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDistModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDistModel_setGamma" "', argument " "1"" of type '" "GRT::MinDistModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MinDistModel_setGamma" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setGamma(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDistModel_setRejectionThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = (GRT::MinDistModel *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDistModel_setRejectionThreshold",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDistModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDistModel_setRejectionThreshold" "', argument " "1"" of type '" "GRT::MinDistModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MinDistModel_setRejectionThreshold" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setRejectionThreshold(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDistModel_setTrainingSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = (GRT::MinDistModel *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDistModel_setTrainingSigma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDistModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDistModel_setTrainingSigma" "', argument " "1"" of type '" "GRT::MinDistModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MinDistModel_setTrainingSigma" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setTrainingSigma(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDistModel_setTrainingMu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = (GRT::MinDistModel *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDistModel_setTrainingMu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDistModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDistModel_setTrainingMu" "', argument " "1"" of type '" "GRT::MinDistModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MinDistModel_setTrainingMu" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setTrainingMu(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDistModel_setTrainingLoggingEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDistModel *arg1 = (GRT::MinDistModel *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDistModel_setTrainingLoggingEnabled",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDistModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDistModel_setTrainingLoggingEnabled" "', argument " "1"" of type '" "GRT::MinDistModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDistModel * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MinDistModel_setTrainingLoggingEnabled" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setTrainingLoggingEnabled(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MinDistModel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__MinDistModel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MinDist__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool arg2 ;
  GRT::Float arg3 ;
  UINT arg4 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::MinDist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_MinDist",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MinDist" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MinDist" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MinDist" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_MinDist" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  result = (GRT::MinDist *)new GRT::MinDist(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MinDist, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MinDist__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool arg2 ;
  GRT::Float arg3 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::MinDist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_MinDist",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MinDist" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MinDist" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MinDist" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  result = (GRT::MinDist *)new GRT::MinDist(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MinDist, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MinDist__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool arg2 ;
  bool val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::MinDist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MinDist",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MinDist" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MinDist" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (GRT::MinDist *)new GRT::MinDist(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MinDist, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MinDist__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MinDist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MinDist",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MinDist" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (GRT::MinDist *)new GRT::MinDist(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MinDist, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MinDist__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MinDist")) SWIG_fail;
  result = (GRT::MinDist *)new GRT::MinDist();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MinDist, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MinDist__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MinDist *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MinDist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__MinDist,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MinDist" "', argument " "1"" of type '" "GRT::MinDist const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MinDist" "', argument " "1"" of type '" "GRT::MinDist const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  result = (GRT::MinDist *)new GRT::MinDist((GRT::MinDist const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MinDist, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MinDist(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MinDist__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__MinDist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MinDist__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MinDist__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MinDist__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MinDist__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_MinDist__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MinDist'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MinDist::MinDist(bool,bool,GRT::Float,UINT)\n"
    "    GRT::MinDist::MinDist(bool,bool,GRT::Float)\n"
    "    GRT::MinDist::MinDist(bool,bool)\n"
    "    GRT::MinDist::MinDist(bool)\n"
    "    GRT::MinDist::MinDist()\n"
    "    GRT::MinDist::MinDist(GRT::MinDist const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_MinDist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MinDist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MinDist" "', argument " "1"" of type '" "GRT::MinDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  GRT::Classifier *arg2 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDist_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_deepCopyFrom" "', argument " "1"" of type '" "GRT::MinDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MinDist_deepCopyFrom" "', argument " "2"" of type '" "GRT::Classifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Classifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDist_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_train_" "', argument " "1"" of type '" "GRT::MinDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MinDist_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MinDist_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDist_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_predict_" "', argument " "1"" of type '" "GRT::MinDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MinDist_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MinDist_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MinDist_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_clear" "', argument " "1"" of type '" "GRT::MinDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDist_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_save" "', argument " "1"" of type '" "GRT::MinDist const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MinDist_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MinDist_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::MinDist const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDist_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_load" "', argument " "1"" of type '" "GRT::MinDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MinDist_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MinDist_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_recomputeNullRejectionThresholds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MinDist_recomputeNullRejectionThresholds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_recomputeNullRejectionThresholds" "', argument " "1"" of type '" "GRT::MinDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  result = (bool)(arg1)->recomputeNullRejectionThresholds();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_getNumClusters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MinDist_getNumClusters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_getNumClusters" "', argument " "1"" of type '" "GRT::MinDist const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  result = ((GRT::MinDist const *)arg1)->getNumClusters();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_getModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< GRT::MinDistModel > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MinDist_getModels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_getModels" "', argument " "1"" of type '" "GRT::MinDist const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  result = ((GRT::MinDist const *)arg1)->getModels();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< GRT::MinDistModel >(static_cast< const GRT::Vector< GRT::MinDistModel >& >(result))), SWIGTYPE_p_GRT__VectorT_GRT__MinDistModel_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_setNullRejectionCoeff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDist_setNullRejectionCoeff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_setNullRejectionCoeff" "', argument " "1"" of type '" "GRT::MinDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MinDist_setNullRejectionCoeff" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setNullRejectionCoeff(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_setNumClusters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDist_setNumClusters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_setNumClusters" "', argument " "1"" of type '" "GRT::MinDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MinDist_setNumClusters" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNumClusters(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":MinDist_getId")) SWIG_fail;
  result = GRT::MinDist::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_save__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDist_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_save" "', argument " "1"" of type '" "GRT::MinDist const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MinDist_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MinDist_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::MinDist const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MinDist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MinDist_save__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MinDist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MinDist_save__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MinDist_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MinDist::save(std::fstream &) const\n"
    "    save(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MinDist_load__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDist_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_load" "', argument " "1"" of type '" "GRT::MinDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MinDist_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MinDist_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MinDist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MinDist_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MinDist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MinDist_load__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MinDist_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MinDist::load(std::fstream &)\n"
    "    load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MinDist_train___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDist_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_train_" "', argument " "1"" of type '" "GRT::MinDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MinDist_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MinDist_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_train___SWIG_1_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  GRT::RegressionData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MinDist_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_train_" "', argument " "1"" of type '" "GRT::MinDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MinDist_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MinDist_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MinDist_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MinDist_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  arg3 = reinterpret_cast< GRT::RegressionData * >(argp3);
  result = (bool)(arg1)->train_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_train___SWIG_1_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDist_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_train_" "', argument " "1"" of type '" "GRT::MinDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MinDist_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MinDist_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_train___SWIG_1_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDist_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_train_" "', argument " "1"" of type '" "GRT::MinDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MinDist_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MinDist_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_train___SWIG_1_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDist_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_train_" "', argument " "1"" of type '" "GRT::MinDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MinDist_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MinDist_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_train___SWIG_1_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDist_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_train_" "', argument " "1"" of type '" "GRT::MinDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MinDist_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MinDist_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MinDist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MinDist_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MinDist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MinDist_train___SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MinDist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MinDist_train___SWIG_1_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MinDist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MinDist_train___SWIG_1_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MinDist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MinDist_train___SWIG_1_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MinDist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MinDist_train___SWIG_1_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MinDist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MinDist_train___SWIG_1_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MinDist_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MinDist::train_(GRT::ClassificationData &)\n"
    "    train_(GRT::RegressionData &)\n"
    "    train_(GRT::RegressionData &,GRT::RegressionData &)\n"
    "    train_(GRT::TimeSeriesClassificationData &)\n"
    "    train_(GRT::ClassificationDataStream &)\n"
    "    train_(GRT::UnlabelledData &)\n"
    "    train_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MinDist_predict___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::MinDist *arg1 = (GRT::MinDist *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MinDist_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__MinDist, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MinDist_predict_" "', argument " "1"" of type '" "GRT::MinDist *""'"); 
  }
  arg1 = reinterpret_cast< GRT::MinDist * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MinDist_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MinDist_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MinDist_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MinDist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MinDist_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__MinDist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MinDist_predict___SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MinDist_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::MinDist::predict_(GRT::VectorFloat &)\n"
    "    predict_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *MinDist_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__MinDist, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ParticleClassifierGestureTemplate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierGestureTemplate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ParticleClassifierGestureTemplate")) SWIG_fail;
  result = (GRT::ParticleClassifierGestureTemplate *)new GRT::ParticleClassifierGestureTemplate();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ParticleClassifierGestureTemplate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleClassifierGestureTemplate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierGestureTemplate *arg1 = (GRT::ParticleClassifierGestureTemplate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ParticleClassifierGestureTemplate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierGestureTemplate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ParticleClassifierGestureTemplate" "', argument " "1"" of type '" "GRT::ParticleClassifierGestureTemplate *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierGestureTemplate * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierGestureTemplate_getLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierGestureTemplate *arg1 = (GRT::ParticleClassifierGestureTemplate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleClassifierGestureTemplate_getLength",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierGestureTemplate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierGestureTemplate_getLength" "', argument " "1"" of type '" "GRT::ParticleClassifierGestureTemplate const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierGestureTemplate * >(argp1);
  result = (unsigned int)((GRT::ParticleClassifierGestureTemplate const *)arg1)->getLength();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierGestureTemplate_classLabel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierGestureTemplate *arg1 = (GRT::ParticleClassifierGestureTemplate *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifierGestureTemplate_classLabel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierGestureTemplate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierGestureTemplate_classLabel_set" "', argument " "1"" of type '" "GRT::ParticleClassifierGestureTemplate *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierGestureTemplate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleClassifierGestureTemplate_classLabel_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->classLabel = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierGestureTemplate_classLabel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierGestureTemplate *arg1 = (GRT::ParticleClassifierGestureTemplate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleClassifierGestureTemplate_classLabel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierGestureTemplate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierGestureTemplate_classLabel_get" "', argument " "1"" of type '" "GRT::ParticleClassifierGestureTemplate *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierGestureTemplate * >(argp1);
  result = (unsigned int) ((arg1)->classLabel);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierGestureTemplate_timeseries_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierGestureTemplate *arg1 = (GRT::ParticleClassifierGestureTemplate *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifierGestureTemplate_timeseries_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierGestureTemplate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierGestureTemplate_timeseries_set" "', argument " "1"" of type '" "GRT::ParticleClassifierGestureTemplate *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierGestureTemplate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleClassifierGestureTemplate_timeseries_set" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifierGestureTemplate_timeseries_set" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  if (arg1) (arg1)->timeseries = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierGestureTemplate_timeseries_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierGestureTemplate *arg1 = (GRT::ParticleClassifierGestureTemplate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleClassifierGestureTemplate_timeseries_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierGestureTemplate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierGestureTemplate_timeseries_get" "', argument " "1"" of type '" "GRT::ParticleClassifierGestureTemplate *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierGestureTemplate * >(argp1);
  result = (GRT::MatrixFloat *) & ((arg1)->timeseries);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ParticleClassifierGestureTemplate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__ParticleClassifierGestureTemplate, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ParticleClassifierParticleFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierParticleFilter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ParticleClassifierParticleFilter")) SWIG_fail;
  result = (GRT::ParticleClassifierParticleFilter *)new GRT::ParticleClassifierParticleFilter();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ParticleClassifierParticleFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierParticleFilter *arg1 = (GRT::ParticleClassifierParticleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ParticleClassifierParticleFilter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ParticleClassifierParticleFilter" "', argument " "1"" of type '" "GRT::ParticleClassifierParticleFilter *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierParticleFilter * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierParticleFilter_preFilterUpdate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierParticleFilter *arg1 = (GRT::ParticleClassifierParticleFilter *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifierParticleFilter_preFilterUpdate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierParticleFilter_preFilterUpdate" "', argument " "1"" of type '" "GRT::ParticleClassifierParticleFilter *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierParticleFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleClassifierParticleFilter_preFilterUpdate" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifierParticleFilter_preFilterUpdate" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->preFilterUpdate(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierParticleFilter_postFilterUpdate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierParticleFilter *arg1 = (GRT::ParticleClassifierParticleFilter *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifierParticleFilter_postFilterUpdate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierParticleFilter_postFilterUpdate" "', argument " "1"" of type '" "GRT::ParticleClassifierParticleFilter *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierParticleFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleClassifierParticleFilter_postFilterUpdate" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifierParticleFilter_postFilterUpdate" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->postFilterUpdate(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierParticleFilter_predict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierParticleFilter *arg1 = (GRT::ParticleClassifierParticleFilter *) 0 ;
  Particle *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifierParticleFilter_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierParticleFilter_predict" "', argument " "1"" of type '" "GRT::ParticleClassifierParticleFilter *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierParticleFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Particle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleClassifierParticleFilter_predict" "', argument " "2"" of type '" "Particle &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifierParticleFilter_predict" "', argument " "2"" of type '" "Particle &""'"); 
  }
  arg2 = reinterpret_cast< Particle * >(argp2);
  result = (bool)(arg1)->predict(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierParticleFilter_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierParticleFilter *arg1 = (GRT::ParticleClassifierParticleFilter *) 0 ;
  Particle *arg2 = 0 ;
  GRT::VectorFloat *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ParticleClassifierParticleFilter_update",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierParticleFilter_update" "', argument " "1"" of type '" "GRT::ParticleClassifierParticleFilter *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierParticleFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Particle,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleClassifierParticleFilter_update" "', argument " "2"" of type '" "Particle &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifierParticleFilter_update" "', argument " "2"" of type '" "Particle &""'"); 
  }
  arg2 = reinterpret_cast< Particle * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ParticleClassifierParticleFilter_update" "', argument " "3"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifierParticleFilter_update" "', argument " "3"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg3 = reinterpret_cast< GRT::VectorFloat * >(argp3);
  result = (bool)(arg1)->update(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierParticleFilter_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierParticleFilter *arg1 = (GRT::ParticleClassifierParticleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleClassifierParticleFilter_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierParticleFilter_clear" "', argument " "1"" of type '" "GRT::ParticleClassifierParticleFilter *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierParticleFilter * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierParticleFilter_train(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierParticleFilter *arg1 = (GRT::ParticleClassifierParticleFilter *) 0 ;
  unsigned int arg2 ;
  GRT::TimeSeriesClassificationData *arg3 = 0 ;
  GRT::Float arg4 ;
  GRT::Float arg5 ;
  GRT::Float arg6 ;
  GRT::Float arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:ParticleClassifierParticleFilter_train",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierParticleFilter_train" "', argument " "1"" of type '" "GRT::ParticleClassifierParticleFilter *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierParticleFilter * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleClassifierParticleFilter_train" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ParticleClassifierParticleFilter_train" "', argument " "3"" of type '" "GRT::TimeSeriesClassificationData const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifierParticleFilter_train" "', argument " "3"" of type '" "GRT::TimeSeriesClassificationData const &""'"); 
  }
  arg3 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ParticleClassifierParticleFilter_train" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ParticleClassifierParticleFilter_train" "', argument " "5"" of type '" "GRT::Float""'");
  } 
  arg5 = static_cast< GRT::Float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ParticleClassifierParticleFilter_train" "', argument " "6"" of type '" "GRT::Float""'");
  } 
  arg6 = static_cast< GRT::Float >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ParticleClassifierParticleFilter_train" "', argument " "7"" of type '" "GRT::Float""'");
  } 
  arg7 = static_cast< GRT::Float >(val7);
  result = (bool)(arg1)->train(arg2,(GRT::TimeSeriesClassificationData const &)*arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierParticleFilter_numInputDimensions_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierParticleFilter *arg1 = (GRT::ParticleClassifierParticleFilter *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifierParticleFilter_numInputDimensions_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierParticleFilter_numInputDimensions_set" "', argument " "1"" of type '" "GRT::ParticleClassifierParticleFilter *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierParticleFilter * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleClassifierParticleFilter_numInputDimensions_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->numInputDimensions = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierParticleFilter_numInputDimensions_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierParticleFilter *arg1 = (GRT::ParticleClassifierParticleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleClassifierParticleFilter_numInputDimensions_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierParticleFilter_numInputDimensions_get" "', argument " "1"" of type '" "GRT::ParticleClassifierParticleFilter *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierParticleFilter * >(argp1);
  result = (unsigned int) ((arg1)->numInputDimensions);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierParticleFilter_numTemplates_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierParticleFilter *arg1 = (GRT::ParticleClassifierParticleFilter *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifierParticleFilter_numTemplates_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierParticleFilter_numTemplates_set" "', argument " "1"" of type '" "GRT::ParticleClassifierParticleFilter *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierParticleFilter * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleClassifierParticleFilter_numTemplates_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->numTemplates = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierParticleFilter_numTemplates_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierParticleFilter *arg1 = (GRT::ParticleClassifierParticleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleClassifierParticleFilter_numTemplates_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierParticleFilter_numTemplates_get" "', argument " "1"" of type '" "GRT::ParticleClassifierParticleFilter *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierParticleFilter * >(argp1);
  result = (unsigned int) ((arg1)->numTemplates);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierParticleFilter_numClasses_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierParticleFilter *arg1 = (GRT::ParticleClassifierParticleFilter *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifierParticleFilter_numClasses_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierParticleFilter_numClasses_set" "', argument " "1"" of type '" "GRT::ParticleClassifierParticleFilter *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierParticleFilter * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleClassifierParticleFilter_numClasses_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->numClasses = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierParticleFilter_numClasses_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierParticleFilter *arg1 = (GRT::ParticleClassifierParticleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleClassifierParticleFilter_numClasses_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierParticleFilter_numClasses_get" "', argument " "1"" of type '" "GRT::ParticleClassifierParticleFilter *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierParticleFilter * >(argp1);
  result = (unsigned int) ((arg1)->numClasses);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierParticleFilter_resampleCounter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierParticleFilter *arg1 = (GRT::ParticleClassifierParticleFilter *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifierParticleFilter_resampleCounter_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierParticleFilter_resampleCounter_set" "', argument " "1"" of type '" "GRT::ParticleClassifierParticleFilter *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierParticleFilter * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleClassifierParticleFilter_resampleCounter_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->resampleCounter = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierParticleFilter_resampleCounter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierParticleFilter *arg1 = (GRT::ParticleClassifierParticleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleClassifierParticleFilter_resampleCounter_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierParticleFilter_resampleCounter_get" "', argument " "1"" of type '" "GRT::ParticleClassifierParticleFilter *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierParticleFilter * >(argp1);
  result = (unsigned int) ((arg1)->resampleCounter);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierParticleFilter_gestureTemplates_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierParticleFilter *arg1 = (GRT::ParticleClassifierParticleFilter *) 0 ;
  GRT::Vector< GRT::ParticleClassifierGestureTemplate > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifierParticleFilter_gestureTemplates_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierParticleFilter_gestureTemplates_set" "', argument " "1"" of type '" "GRT::ParticleClassifierParticleFilter *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierParticleFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_GRT__ParticleClassifierGestureTemplate_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleClassifierParticleFilter_gestureTemplates_set" "', argument " "2"" of type '" "GRT::Vector< GRT::ParticleClassifierGestureTemplate > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifierParticleFilter_gestureTemplates_set" "', argument " "2"" of type '" "GRT::Vector< GRT::ParticleClassifierGestureTemplate > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< GRT::ParticleClassifierGestureTemplate > * >(argp2);
  if (arg1) (arg1)->gestureTemplates = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifierParticleFilter_gestureTemplates_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifierParticleFilter *arg1 = (GRT::ParticleClassifierParticleFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< GRT::ParticleClassifierGestureTemplate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleClassifierParticleFilter_gestureTemplates_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifierParticleFilter_gestureTemplates_get" "', argument " "1"" of type '" "GRT::ParticleClassifierParticleFilter *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifierParticleFilter * >(argp1);
  result = (GRT::Vector< GRT::ParticleClassifierGestureTemplate > *) & ((arg1)->gestureTemplates);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorT_GRT__ParticleClassifierGestureTemplate_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ParticleClassifierParticleFilter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ParticleClassifier__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  GRT::Float arg4 ;
  GRT::Float arg5 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::ParticleClassifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ParticleClassifier",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ParticleClassifier" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ParticleClassifier" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ParticleClassifier" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ParticleClassifier" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ParticleClassifier" "', argument " "5"" of type '" "GRT::Float""'");
  } 
  arg5 = static_cast< GRT::Float >(val5);
  result = (GRT::ParticleClassifier *)new GRT::ParticleClassifier(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ParticleClassifier, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleClassifier__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  GRT::Float arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::ParticleClassifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ParticleClassifier",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ParticleClassifier" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ParticleClassifier" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ParticleClassifier" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ParticleClassifier" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = (GRT::ParticleClassifier *)new GRT::ParticleClassifier(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ParticleClassifier, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleClassifier__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::ParticleClassifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ParticleClassifier",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ParticleClassifier" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ParticleClassifier" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ParticleClassifier" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  result = (GRT::ParticleClassifier *)new GRT::ParticleClassifier(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ParticleClassifier, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleClassifier__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  GRT::Float arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::ParticleClassifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ParticleClassifier",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ParticleClassifier" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ParticleClassifier" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (GRT::ParticleClassifier *)new GRT::ParticleClassifier(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ParticleClassifier, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleClassifier__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ParticleClassifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ParticleClassifier",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ParticleClassifier" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (GRT::ParticleClassifier *)new GRT::ParticleClassifier(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ParticleClassifier, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleClassifier__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ParticleClassifier")) SWIG_fail;
  result = (GRT::ParticleClassifier *)new GRT::ParticleClassifier();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ParticleClassifier, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleClassifier__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ParticleClassifier *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ParticleClassifier",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__ParticleClassifier,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ParticleClassifier" "', argument " "1"" of type '" "GRT::ParticleClassifier const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ParticleClassifier" "', argument " "1"" of type '" "GRT::ParticleClassifier const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  result = (GRT::ParticleClassifier *)new GRT::ParticleClassifier((GRT::ParticleClassifier const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ParticleClassifier, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ParticleClassifier(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ParticleClassifier__SWIG_5(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__ParticleClassifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ParticleClassifier__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ParticleClassifier__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ParticleClassifier__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ParticleClassifier__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ParticleClassifier__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ParticleClassifier__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ParticleClassifier'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ParticleClassifier::ParticleClassifier(unsigned int const,GRT::Float const,GRT::Float const,GRT::Float const,GRT::Float const)\n"
    "    GRT::ParticleClassifier::ParticleClassifier(unsigned int const,GRT::Float const,GRT::Float const,GRT::Float const)\n"
    "    GRT::ParticleClassifier::ParticleClassifier(unsigned int const,GRT::Float const,GRT::Float const)\n"
    "    GRT::ParticleClassifier::ParticleClassifier(unsigned int const,GRT::Float const)\n"
    "    GRT::ParticleClassifier::ParticleClassifier(unsigned int const)\n"
    "    GRT::ParticleClassifier::ParticleClassifier()\n"
    "    GRT::ParticleClassifier::ParticleClassifier(GRT::ParticleClassifier const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ParticleClassifier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ParticleClassifier",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ParticleClassifier" "', argument " "1"" of type '" "GRT::ParticleClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  GRT::Classifier *arg2 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifier_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_deepCopyFrom" "', argument " "1"" of type '" "GRT::ParticleClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleClassifier_deepCopyFrom" "', argument " "2"" of type '" "GRT::Classifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Classifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifier_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_train_" "', argument " "1"" of type '" "GRT::ParticleClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleClassifier_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifier_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifier_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_predict_" "', argument " "1"" of type '" "GRT::ParticleClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleClassifier_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifier_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_save(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifier_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_save" "', argument " "1"" of type '" "GRT::ParticleClassifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleClassifier_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifier_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::ParticleClassifier const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_load(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifier_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_load" "', argument " "1"" of type '" "GRT::ParticleClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleClassifier_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifier_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleClassifier_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_clear" "', argument " "1"" of type '" "GRT::ParticleClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleClassifier_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_reset" "', argument " "1"" of type '" "GRT::ParticleClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  result = (bool)(arg1)->reset();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":ParticleClassifier_getId")) SWIG_fail;
  result = GRT::ParticleClassifier::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_getGestureTemplates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< GRT::ParticleClassifierGestureTemplate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleClassifier_getGestureTemplates",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_getGestureTemplates" "', argument " "1"" of type '" "GRT::ParticleClassifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  result = (GRT::Vector< GRT::ParticleClassifierGestureTemplate > *) &((GRT::ParticleClassifier const *)arg1)->getGestureTemplates();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorT_GRT__ParticleClassifierGestureTemplate_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_getParticleFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ParticleClassifierParticleFilter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleClassifier_getParticleFilter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_getParticleFilter" "', argument " "1"" of type '" "GRT::ParticleClassifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  result = (GRT::ParticleClassifierParticleFilter *) &((GRT::ParticleClassifier const *)arg1)->getParticleFilter();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ParticleClassifierParticleFilter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_getStateEstimation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleClassifier_getStateEstimation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_getStateEstimation" "', argument " "1"" of type '" "GRT::ParticleClassifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  result = ((GRT::ParticleClassifier const *)arg1)->getStateEstimation();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_getPhase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleClassifier_getPhase",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_getPhase" "', argument " "1"" of type '" "GRT::ParticleClassifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  result = (GRT::Float)((GRT::ParticleClassifier const *)arg1)->getPhase();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_getVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ParticleClassifier_getVelocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_getVelocity" "', argument " "1"" of type '" "GRT::ParticleClassifier const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  result = (GRT::Float)((GRT::ParticleClassifier const *)arg1)->getVelocity();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_setNumParticles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifier_setNumParticles",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_setNumParticles" "', argument " "1"" of type '" "GRT::ParticleClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleClassifier_setNumParticles" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (bool)(arg1)->setNumParticles(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_setSensorNoise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifier_setSensorNoise",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_setSensorNoise" "', argument " "1"" of type '" "GRT::ParticleClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleClassifier_setSensorNoise" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (bool)(arg1)->setSensorNoise(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_setTransitionSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifier_setTransitionSigma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_setTransitionSigma" "', argument " "1"" of type '" "GRT::ParticleClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleClassifier_setTransitionSigma" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (bool)(arg1)->setTransitionSigma(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_setPhaseSigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifier_setPhaseSigma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_setPhaseSigma" "', argument " "1"" of type '" "GRT::ParticleClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleClassifier_setPhaseSigma" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (bool)(arg1)->setPhaseSigma(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_setVelocitySigma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifier_setVelocitySigma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_setVelocitySigma" "', argument " "1"" of type '" "GRT::ParticleClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ParticleClassifier_setVelocitySigma" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (bool)(arg1)->setVelocitySigma(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_predict___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifier_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_predict_" "', argument " "1"" of type '" "GRT::ParticleClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleClassifier_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifier_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ParticleClassifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ParticleClassifier_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ParticleClassifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ParticleClassifier_predict___SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ParticleClassifier_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ParticleClassifier::predict_(GRT::VectorFloat &)\n"
    "    predict_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_train___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifier_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_train_" "', argument " "1"" of type '" "GRT::ParticleClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleClassifier_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifier_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_train___SWIG_1_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifier_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_train_" "', argument " "1"" of type '" "GRT::ParticleClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleClassifier_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifier_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_train___SWIG_1_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  GRT::RegressionData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ParticleClassifier_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_train_" "', argument " "1"" of type '" "GRT::ParticleClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleClassifier_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifier_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ParticleClassifier_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifier_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  arg3 = reinterpret_cast< GRT::RegressionData * >(argp3);
  result = (bool)(arg1)->train_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_train___SWIG_1_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifier_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_train_" "', argument " "1"" of type '" "GRT::ParticleClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleClassifier_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifier_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_train___SWIG_1_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifier_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_train_" "', argument " "1"" of type '" "GRT::ParticleClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleClassifier_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifier_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_train___SWIG_1_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ParticleClassifier *arg1 = (GRT::ParticleClassifier *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ParticleClassifier_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ParticleClassifier, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ParticleClassifier_train_" "', argument " "1"" of type '" "GRT::ParticleClassifier *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ParticleClassifier * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ParticleClassifier_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ParticleClassifier_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ParticleClassifier_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ParticleClassifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ParticleClassifier_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ParticleClassifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ParticleClassifier_train___SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ParticleClassifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ParticleClassifier_train___SWIG_1_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ParticleClassifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ParticleClassifier_train___SWIG_1_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ParticleClassifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ParticleClassifier_train___SWIG_1_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ParticleClassifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ParticleClassifier_train___SWIG_1_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ParticleClassifier, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ParticleClassifier_train___SWIG_1_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ParticleClassifier_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ParticleClassifier::train_(GRT::TimeSeriesClassificationData &)\n"
    "    train_(GRT::ClassificationData &)\n"
    "    train_(GRT::RegressionData &)\n"
    "    train_(GRT::RegressionData &,GRT::RegressionData &)\n"
    "    train_(GRT::ClassificationDataStream &)\n"
    "    train_(GRT::UnlabelledData &)\n"
    "    train_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *ParticleClassifier_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__ParticleClassifier, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RandomForests__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = 0 ;
  UINT arg2 ;
  UINT arg3 ;
  UINT arg4 ;
  UINT arg5 ;
  Tree::TrainingMode arg6 ;
  bool arg7 ;
  bool arg8 ;
  GRT::Float arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  GRT::RandomForests *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_RandomForests",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DecisionTreeNode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RandomForests" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RandomForests" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RandomForests" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RandomForests" "', argument " "5"" of type '" "UINT""'");
  } 
  arg5 = static_cast< UINT >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_Tree__TrainingMode,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_RandomForests" "', argument " "6"" of type '" "Tree::TrainingMode const""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomForests" "', argument " "6"" of type '" "Tree::TrainingMode const""'");
    } else {
      Tree::TrainingMode * temp = reinterpret_cast< Tree::TrainingMode * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_RandomForests" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_RandomForests" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  ecode9 = SWIG_AsVal_float(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_RandomForests" "', argument " "9"" of type '" "GRT::Float""'");
  } 
  arg9 = static_cast< GRT::Float >(val9);
  result = (GRT::RandomForests *)new GRT::RandomForests((GRT::DecisionTreeNode const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__RandomForests, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomForests__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = 0 ;
  UINT arg2 ;
  UINT arg3 ;
  UINT arg4 ;
  UINT arg5 ;
  Tree::TrainingMode arg6 ;
  bool arg7 ;
  bool arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  GRT::RandomForests *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_RandomForests",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DecisionTreeNode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RandomForests" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RandomForests" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RandomForests" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RandomForests" "', argument " "5"" of type '" "UINT""'");
  } 
  arg5 = static_cast< UINT >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_Tree__TrainingMode,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_RandomForests" "', argument " "6"" of type '" "Tree::TrainingMode const""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomForests" "', argument " "6"" of type '" "Tree::TrainingMode const""'");
    } else {
      Tree::TrainingMode * temp = reinterpret_cast< Tree::TrainingMode * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_RandomForests" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_RandomForests" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  result = (GRT::RandomForests *)new GRT::RandomForests((GRT::DecisionTreeNode const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__RandomForests, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomForests__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = 0 ;
  UINT arg2 ;
  UINT arg3 ;
  UINT arg4 ;
  UINT arg5 ;
  Tree::TrainingMode arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  GRT::RandomForests *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_RandomForests",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DecisionTreeNode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RandomForests" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RandomForests" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RandomForests" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RandomForests" "', argument " "5"" of type '" "UINT""'");
  } 
  arg5 = static_cast< UINT >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_Tree__TrainingMode,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_RandomForests" "', argument " "6"" of type '" "Tree::TrainingMode const""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomForests" "', argument " "6"" of type '" "Tree::TrainingMode const""'");
    } else {
      Tree::TrainingMode * temp = reinterpret_cast< Tree::TrainingMode * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_RandomForests" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  result = (GRT::RandomForests *)new GRT::RandomForests((GRT::DecisionTreeNode const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__RandomForests, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomForests__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = 0 ;
  UINT arg2 ;
  UINT arg3 ;
  UINT arg4 ;
  UINT arg5 ;
  Tree::TrainingMode arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  GRT::RandomForests *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_RandomForests",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DecisionTreeNode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RandomForests" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RandomForests" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RandomForests" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RandomForests" "', argument " "5"" of type '" "UINT""'");
  } 
  arg5 = static_cast< UINT >(val5);
  {
    res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_Tree__TrainingMode,  0  | 0);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_RandomForests" "', argument " "6"" of type '" "Tree::TrainingMode const""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomForests" "', argument " "6"" of type '" "Tree::TrainingMode const""'");
    } else {
      Tree::TrainingMode * temp = reinterpret_cast< Tree::TrainingMode * >(argp6);
      arg6 = *temp;
      if (SWIG_IsNewObj(res6)) delete temp;
    }
  }
  result = (GRT::RandomForests *)new GRT::RandomForests((GRT::DecisionTreeNode const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__RandomForests, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomForests__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = 0 ;
  UINT arg2 ;
  UINT arg3 ;
  UINT arg4 ;
  UINT arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::RandomForests *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_RandomForests",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DecisionTreeNode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RandomForests" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RandomForests" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RandomForests" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RandomForests" "', argument " "5"" of type '" "UINT""'");
  } 
  arg5 = static_cast< UINT >(val5);
  result = (GRT::RandomForests *)new GRT::RandomForests((GRT::DecisionTreeNode const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__RandomForests, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomForests__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = 0 ;
  UINT arg2 ;
  UINT arg3 ;
  UINT arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::RandomForests *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_RandomForests",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DecisionTreeNode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RandomForests" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RandomForests" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RandomForests" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  result = (GRT::RandomForests *)new GRT::RandomForests((GRT::DecisionTreeNode const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__RandomForests, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomForests__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = 0 ;
  UINT arg2 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::RandomForests *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_RandomForests",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DecisionTreeNode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RandomForests" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RandomForests" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (GRT::RandomForests *)new GRT::RandomForests((GRT::DecisionTreeNode const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__RandomForests, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomForests__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::RandomForests *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_RandomForests",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DecisionTreeNode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RandomForests" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (GRT::RandomForests *)new GRT::RandomForests((GRT::DecisionTreeNode const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__RandomForests, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomForests__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::DecisionTreeNode *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::RandomForests *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RandomForests",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__DecisionTreeNode,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::DecisionTreeNode * >(argp1);
  result = (GRT::RandomForests *)new GRT::RandomForests((GRT::DecisionTreeNode const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__RandomForests, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomForests__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RandomForests")) SWIG_fail;
  result = (GRT::RandomForests *)new GRT::RandomForests();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__RandomForests, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomForests__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::RandomForests *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RandomForests",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__RandomForests,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::RandomForests const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomForests" "', argument " "1"" of type '" "GRT::RandomForests const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  result = (GRT::RandomForests *)new GRT::RandomForests((GRT::RandomForests const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__RandomForests, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomForests(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RandomForests__SWIG_9(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DecisionTreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RandomForests__SWIG_8(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__RandomForests, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RandomForests__SWIG_10(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DecisionTreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_RandomForests__SWIG_7(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DecisionTreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_RandomForests__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DecisionTreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_RandomForests__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DecisionTreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_RandomForests__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DecisionTreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_Tree__TrainingMode, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_RandomForests__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DecisionTreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_Tree__TrainingMode, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_RandomForests__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DecisionTreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_Tree__TrainingMode, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_bool(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_new_RandomForests__SWIG_1(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__DecisionTreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_Tree__TrainingMode, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_bool(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_float(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_RandomForests__SWIG_0(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RandomForests'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::RandomForests::RandomForests(GRT::DecisionTreeNode const &,UINT const,UINT const,UINT const,UINT const,Tree::TrainingMode const,bool const,bool const,GRT::Float const)\n"
    "    GRT::RandomForests::RandomForests(GRT::DecisionTreeNode const &,UINT const,UINT const,UINT const,UINT const,Tree::TrainingMode const,bool const,bool const)\n"
    "    GRT::RandomForests::RandomForests(GRT::DecisionTreeNode const &,UINT const,UINT const,UINT const,UINT const,Tree::TrainingMode const,bool const)\n"
    "    GRT::RandomForests::RandomForests(GRT::DecisionTreeNode const &,UINT const,UINT const,UINT const,UINT const,Tree::TrainingMode const)\n"
    "    GRT::RandomForests::RandomForests(GRT::DecisionTreeNode const &,UINT const,UINT const,UINT const,UINT const)\n"
    "    GRT::RandomForests::RandomForests(GRT::DecisionTreeNode const &,UINT const,UINT const,UINT const)\n"
    "    GRT::RandomForests::RandomForests(GRT::DecisionTreeNode const &,UINT const,UINT const)\n"
    "    GRT::RandomForests::RandomForests(GRT::DecisionTreeNode const &,UINT const)\n"
    "    GRT::RandomForests::RandomForests(GRT::DecisionTreeNode const &)\n"
    "    GRT::RandomForests::RandomForests()\n"
    "    GRT::RandomForests::RandomForests(GRT::RandomForests const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_RandomForests(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RandomForests",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RandomForests" "', argument " "1"" of type '" "GRT::RandomForests *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  GRT::Classifier *arg2 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_deepCopyFrom" "', argument " "1"" of type '" "GRT::RandomForests *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RandomForests_deepCopyFrom" "', argument " "2"" of type '" "GRT::Classifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Classifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_train_(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_train_" "', argument " "1"" of type '" "GRT::RandomForests *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RandomForests_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RandomForests_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_predict_(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  GRT::VectorDouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_predict_" "', argument " "1"" of type '" "GRT::RandomForests *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RandomForests_predict_" "', argument " "2"" of type '" "GRT::VectorDouble &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RandomForests_predict_" "', argument " "2"" of type '" "GRT::VectorDouble &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorDouble * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RandomForests_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_clear" "', argument " "1"" of type '" "GRT::RandomForests *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RandomForests__print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests__print" "', argument " "1"" of type '" "GRT::RandomForests const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  result = (bool)((GRT::RandomForests const *)arg1)->print();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_save" "', argument " "1"" of type '" "GRT::RandomForests const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RandomForests_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RandomForests_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::RandomForests const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_load" "', argument " "1"" of type '" "GRT::RandomForests *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RandomForests_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RandomForests_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_combineModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  GRT::RandomForests *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_combineModels",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_combineModels" "', argument " "1"" of type '" "GRT::RandomForests *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RandomForests,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RandomForests_combineModels" "', argument " "2"" of type '" "GRT::RandomForests const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RandomForests_combineModels" "', argument " "2"" of type '" "GRT::RandomForests const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RandomForests * >(argp2);
  result = (bool)(arg1)->combineModels((GRT::RandomForests const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_getForestSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RandomForests_getForestSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_getForestSize" "', argument " "1"" of type '" "GRT::RandomForests const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  result = ((GRT::RandomForests const *)arg1)->getForestSize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_getNumRandomSplits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RandomForests_getNumRandomSplits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_getNumRandomSplits" "', argument " "1"" of type '" "GRT::RandomForests const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  result = ((GRT::RandomForests const *)arg1)->getNumRandomSplits();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_getMinNumSamplesPerNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RandomForests_getMinNumSamplesPerNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_getMinNumSamplesPerNode" "', argument " "1"" of type '" "GRT::RandomForests const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  result = ((GRT::RandomForests const *)arg1)->getMinNumSamplesPerNode();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_getMaxDepth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RandomForests_getMaxDepth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_getMaxDepth" "', argument " "1"" of type '" "GRT::RandomForests const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  result = ((GRT::RandomForests const *)arg1)->getMaxDepth();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_getTrainingMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RandomForests_getTrainingMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_getTrainingMode" "', argument " "1"" of type '" "GRT::RandomForests const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  result = ((GRT::RandomForests const *)arg1)->getTrainingMode();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_getForest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< GRT::DecisionTreeNode * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RandomForests_getForest",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_getForest" "', argument " "1"" of type '" "GRT::RandomForests const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  result = (GRT::Vector< GRT::DecisionTreeNode * > *) &((GRT::RandomForests const *)arg1)->getForest();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorT_GRT__DecisionTreeNode_p_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_getRemoveFeaturesAtEachSplit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RandomForests_getRemoveFeaturesAtEachSplit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_getRemoveFeaturesAtEachSplit" "', argument " "1"" of type '" "GRT::RandomForests const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  result = (bool)((GRT::RandomForests const *)arg1)->getRemoveFeaturesAtEachSplit();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_getBootstrappedDatasetWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RandomForests_getBootstrappedDatasetWeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_getBootstrappedDatasetWeight" "', argument " "1"" of type '" "GRT::RandomForests const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  result = (GRT::Float)((GRT::RandomForests const *)arg1)->getBootstrappedDatasetWeight();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_getTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::DecisionTreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_getTree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_getTree" "', argument " "1"" of type '" "GRT::RandomForests const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomForests_getTree" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (GRT::DecisionTreeNode *)((GRT::RandomForests const *)arg1)->getTree(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionTreeNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_deepCopyDecisionTreeNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::DecisionTreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RandomForests_deepCopyDecisionTreeNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_deepCopyDecisionTreeNode" "', argument " "1"" of type '" "GRT::RandomForests const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  result = (GRT::DecisionTreeNode *)((GRT::RandomForests const *)arg1)->deepCopyDecisionTreeNode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__DecisionTreeNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_getFeatureWeights__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::VectorDouble result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_getFeatureWeights",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_getFeatureWeights" "', argument " "1"" of type '" "GRT::RandomForests const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomForests_getFeatureWeights" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = ((GRT::RandomForests const *)arg1)->getFeatureWeights(arg2);
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_getFeatureWeights__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorDouble result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RandomForests_getFeatureWeights",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_getFeatureWeights" "', argument " "1"" of type '" "GRT::RandomForests const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  result = ((GRT::RandomForests const *)arg1)->getFeatureWeights();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_getFeatureWeights(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__RandomForests, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_RandomForests_getFeatureWeights__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__RandomForests, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RandomForests_getFeatureWeights__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RandomForests_getFeatureWeights'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::RandomForests::getFeatureWeights(bool const) const\n"
    "    GRT::RandomForests::getFeatureWeights() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RandomForests_getLeafNodeFeatureWeights__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::MatrixDouble result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_getLeafNodeFeatureWeights",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_getLeafNodeFeatureWeights" "', argument " "1"" of type '" "GRT::RandomForests const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomForests_getLeafNodeFeatureWeights" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = ((GRT::RandomForests const *)arg1)->getLeafNodeFeatureWeights(arg2);
  
  {
    npy_intp dims[2]{
      (&result)->getNumRows(), (&result)->getNumCols()
    };
    resultobj = PyArray_SimpleNew(2, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->getNumRows(); ++i) {
      for (size_t j = 0; j < (&result)->getNumCols(); ++j) {
        float* d_ptr = static_cast<float*>(PyArray_GETPTR2(arr_ptr, i, j));
        *d_ptr = result[i][j];
      }
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_getLeafNodeFeatureWeights__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixDouble result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RandomForests_getLeafNodeFeatureWeights",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_getLeafNodeFeatureWeights" "', argument " "1"" of type '" "GRT::RandomForests const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  result = ((GRT::RandomForests const *)arg1)->getLeafNodeFeatureWeights();
  
  {
    npy_intp dims[2]{
      (&result)->getNumRows(), (&result)->getNumCols()
    };
    resultobj = PyArray_SimpleNew(2, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->getNumRows(); ++i) {
      for (size_t j = 0; j < (&result)->getNumCols(); ++j) {
        float* d_ptr = static_cast<float*>(PyArray_GETPTR2(arr_ptr, i, j));
        *d_ptr = result[i][j];
      }
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_getLeafNodeFeatureWeights(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__RandomForests, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_RandomForests_getLeafNodeFeatureWeights__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__RandomForests, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RandomForests_getLeafNodeFeatureWeights__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RandomForests_getLeafNodeFeatureWeights'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::RandomForests::getLeafNodeFeatureWeights(bool const) const\n"
    "    GRT::RandomForests::getLeafNodeFeatureWeights() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RandomForests_setForestSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_setForestSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_setForestSize" "', argument " "1"" of type '" "GRT::RandomForests *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomForests_setForestSize" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setForestSize(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_setNumRandomSplits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_setNumRandomSplits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_setNumRandomSplits" "', argument " "1"" of type '" "GRT::RandomForests *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomForests_setNumRandomSplits" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNumRandomSplits(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_setMinNumSamplesPerNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_setMinNumSamplesPerNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_setMinNumSamplesPerNode" "', argument " "1"" of type '" "GRT::RandomForests *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomForests_setMinNumSamplesPerNode" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setMinNumSamplesPerNode(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_setMaxDepth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_setMaxDepth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_setMaxDepth" "', argument " "1"" of type '" "GRT::RandomForests *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomForests_setMaxDepth" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setMaxDepth(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_setRemoveFeaturesAtEachSplit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_setRemoveFeaturesAtEachSplit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_setRemoveFeaturesAtEachSplit" "', argument " "1"" of type '" "GRT::RandomForests *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomForests_setRemoveFeaturesAtEachSplit" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setRemoveFeaturesAtEachSplit(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_setRemoveFeaturesAtEachSpilt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_setRemoveFeaturesAtEachSpilt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_setRemoveFeaturesAtEachSpilt" "', argument " "1"" of type '" "GRT::RandomForests *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomForests_setRemoveFeaturesAtEachSpilt" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setRemoveFeaturesAtEachSpilt(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_setTrainingMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  Tree::TrainingMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_setTrainingMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_setTrainingMode" "', argument " "1"" of type '" "GRT::RandomForests *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Tree__TrainingMode,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RandomForests_setTrainingMode" "', argument " "2"" of type '" "Tree::TrainingMode const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RandomForests_setTrainingMode" "', argument " "2"" of type '" "Tree::TrainingMode const""'");
    } else {
      Tree::TrainingMode * temp = reinterpret_cast< Tree::TrainingMode * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->setTrainingMode(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_setDecisionTreeNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  GRT::DecisionTreeNode *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_setDecisionTreeNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_setDecisionTreeNode" "', argument " "1"" of type '" "GRT::RandomForests *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__DecisionTreeNode,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RandomForests_setDecisionTreeNode" "', argument " "2"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RandomForests_setDecisionTreeNode" "', argument " "2"" of type '" "GRT::DecisionTreeNode const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::DecisionTreeNode * >(argp2);
  result = (bool)(arg1)->setDecisionTreeNode((GRT::DecisionTreeNode const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_setBootstrappedDatasetWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_setBootstrappedDatasetWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_setBootstrappedDatasetWeight" "', argument " "1"" of type '" "GRT::RandomForests *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomForests_setBootstrappedDatasetWeight" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setBootstrappedDatasetWeight(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":RandomForests_getId")) SWIG_fail;
  result = GRT::RandomForests::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_save__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_save" "', argument " "1"" of type '" "GRT::RandomForests const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RandomForests_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RandomForests_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::RandomForests const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__RandomForests, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RandomForests_save__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__RandomForests, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RandomForests_save__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RandomForests_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::RandomForests::save(std::fstream &) const\n"
    "    save(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RandomForests_load__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::RandomForests *arg1 = (GRT::RandomForests *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RandomForests_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__RandomForests, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomForests_load" "', argument " "1"" of type '" "GRT::RandomForests *""'"); 
  }
  arg1 = reinterpret_cast< GRT::RandomForests * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RandomForests_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RandomForests_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomForests_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__RandomForests, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RandomForests_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__RandomForests, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RandomForests_load__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RandomForests_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::RandomForests::load(std::fstream &)\n"
    "    load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *RandomForests_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__RandomForests, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SoftmaxModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SoftmaxModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SoftmaxModel")) SWIG_fail;
  result = (GRT::SoftmaxModel *)new GRT::SoftmaxModel();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SoftmaxModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SoftmaxModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SoftmaxModel *arg1 = (GRT::SoftmaxModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SoftmaxModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SoftmaxModel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SoftmaxModel" "', argument " "1"" of type '" "GRT::SoftmaxModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SoftmaxModel * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoftmaxModel_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SoftmaxModel *arg1 = (GRT::SoftmaxModel *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SoftmaxModel_init",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SoftmaxModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoftmaxModel_init" "', argument " "1"" of type '" "GRT::SoftmaxModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SoftmaxModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SoftmaxModel_init" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SoftmaxModel_init" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (bool)(arg1)->init(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoftmaxModel_compute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SoftmaxModel *arg1 = (GRT::SoftmaxModel *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SoftmaxModel_compute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SoftmaxModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoftmaxModel_compute" "', argument " "1"" of type '" "GRT::SoftmaxModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SoftmaxModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SoftmaxModel_compute" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SoftmaxModel_compute" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (GRT::Float)(arg1)->compute((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoftmaxModel_classLabel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SoftmaxModel *arg1 = (GRT::SoftmaxModel *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SoftmaxModel_classLabel_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SoftmaxModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoftmaxModel_classLabel_set" "', argument " "1"" of type '" "GRT::SoftmaxModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SoftmaxModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SoftmaxModel_classLabel_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  if (arg1) (arg1)->classLabel = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoftmaxModel_classLabel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SoftmaxModel *arg1 = (GRT::SoftmaxModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SoftmaxModel_classLabel_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SoftmaxModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoftmaxModel_classLabel_get" "', argument " "1"" of type '" "GRT::SoftmaxModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SoftmaxModel * >(argp1);
  result =  ((arg1)->classLabel);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoftmaxModel_N_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SoftmaxModel *arg1 = (GRT::SoftmaxModel *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SoftmaxModel_N_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SoftmaxModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoftmaxModel_N_set" "', argument " "1"" of type '" "GRT::SoftmaxModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SoftmaxModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SoftmaxModel_N_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  if (arg1) (arg1)->N = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoftmaxModel_N_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SoftmaxModel *arg1 = (GRT::SoftmaxModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SoftmaxModel_N_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SoftmaxModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoftmaxModel_N_get" "', argument " "1"" of type '" "GRT::SoftmaxModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SoftmaxModel * >(argp1);
  result =  ((arg1)->N);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoftmaxModel_w_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SoftmaxModel *arg1 = (GRT::SoftmaxModel *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SoftmaxModel_w_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SoftmaxModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoftmaxModel_w_set" "', argument " "1"" of type '" "GRT::SoftmaxModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SoftmaxModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SoftmaxModel_w_set" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SoftmaxModel_w_set" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  if (arg1) (arg1)->w = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoftmaxModel_w_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SoftmaxModel *arg1 = (GRT::SoftmaxModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SoftmaxModel_w_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SoftmaxModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoftmaxModel_w_get" "', argument " "1"" of type '" "GRT::SoftmaxModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SoftmaxModel * >(argp1);
  result = (GRT::VectorFloat *) & ((arg1)->w);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoftmaxModel_w0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SoftmaxModel *arg1 = (GRT::SoftmaxModel *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SoftmaxModel_w0_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SoftmaxModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoftmaxModel_w0_set" "', argument " "1"" of type '" "GRT::SoftmaxModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SoftmaxModel * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SoftmaxModel_w0_set" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  if (arg1) (arg1)->w0 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SoftmaxModel_w0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SoftmaxModel *arg1 = (GRT::SoftmaxModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SoftmaxModel_w0_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SoftmaxModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SoftmaxModel_w0_get" "', argument " "1"" of type '" "GRT::SoftmaxModel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SoftmaxModel * >(argp1);
  result = (GRT::Float) ((arg1)->w0);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SoftmaxModel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__SoftmaxModel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Softmax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  UINT arg4 ;
  UINT arg5 ;
  bool val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::Softmax *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_Softmax",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Softmax" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Softmax" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Softmax" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Softmax" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Softmax" "', argument " "5"" of type '" "UINT""'");
  } 
  arg5 = static_cast< UINT >(val5);
  result = (GRT::Softmax *)new GRT::Softmax(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Softmax, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Softmax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  UINT arg4 ;
  bool val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::Softmax *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Softmax",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Softmax" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Softmax" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Softmax" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Softmax" "', argument " "4"" of type '" "UINT""'");
  } 
  arg4 = static_cast< UINT >(val4);
  result = (GRT::Softmax *)new GRT::Softmax(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Softmax, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Softmax__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  GRT::Float arg2 ;
  GRT::Float arg3 ;
  bool val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::Softmax *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Softmax",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Softmax" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Softmax" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Softmax" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  result = (GRT::Softmax *)new GRT::Softmax(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Softmax, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Softmax__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  GRT::Float arg2 ;
  bool val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Softmax *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Softmax",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Softmax" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Softmax" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (GRT::Softmax *)new GRT::Softmax(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Softmax, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Softmax__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Softmax *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Softmax",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Softmax" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (GRT::Softmax *)new GRT::Softmax(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Softmax, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Softmax__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Softmax *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Softmax")) SWIG_fail;
  result = (GRT::Softmax *)new GRT::Softmax();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Softmax, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Softmax__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Softmax *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Softmax *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Softmax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__Softmax,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Softmax" "', argument " "1"" of type '" "GRT::Softmax const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Softmax" "', argument " "1"" of type '" "GRT::Softmax const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::Softmax * >(argp1);
  result = (GRT::Softmax *)new GRT::Softmax((GRT::Softmax const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Softmax, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Softmax(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Softmax__SWIG_5(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__Softmax, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Softmax__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Softmax__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Softmax__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Softmax__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Softmax__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_Softmax__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Softmax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Softmax::Softmax(bool const,GRT::Float const,GRT::Float const,UINT const,UINT const)\n"
    "    GRT::Softmax::Softmax(bool const,GRT::Float const,GRT::Float const,UINT const)\n"
    "    GRT::Softmax::Softmax(bool const,GRT::Float const,GRT::Float const)\n"
    "    GRT::Softmax::Softmax(bool const,GRT::Float const)\n"
    "    GRT::Softmax::Softmax(bool const)\n"
    "    GRT::Softmax::Softmax()\n"
    "    GRT::Softmax::Softmax(GRT::Softmax const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Softmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Softmax *arg1 = (GRT::Softmax *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Softmax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Softmax, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Softmax" "', argument " "1"" of type '" "GRT::Softmax *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Softmax * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Softmax_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Softmax *arg1 = (GRT::Softmax *) 0 ;
  GRT::Classifier *arg2 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Softmax_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Softmax, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Softmax_deepCopyFrom" "', argument " "1"" of type '" "GRT::Softmax *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Softmax * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Softmax_deepCopyFrom" "', argument " "2"" of type '" "GRT::Classifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Classifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Softmax_train_(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Softmax *arg1 = (GRT::Softmax *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Softmax_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Softmax, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Softmax_train_" "', argument " "1"" of type '" "GRT::Softmax *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Softmax * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Softmax_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Softmax_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Softmax_predict_(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Softmax *arg1 = (GRT::Softmax *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Softmax_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Softmax, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Softmax_predict_" "', argument " "1"" of type '" "GRT::Softmax *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Softmax * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Softmax_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Softmax_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Softmax_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Softmax *arg1 = (GRT::Softmax *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Softmax_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Softmax, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Softmax_clear" "', argument " "1"" of type '" "GRT::Softmax *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Softmax * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Softmax_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Softmax *arg1 = (GRT::Softmax *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Softmax_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Softmax, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Softmax_save" "', argument " "1"" of type '" "GRT::Softmax const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Softmax * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Softmax_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Softmax_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::Softmax const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Softmax_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Softmax *arg1 = (GRT::Softmax *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Softmax_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Softmax, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Softmax_load" "', argument " "1"" of type '" "GRT::Softmax *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Softmax * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Softmax_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Softmax_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Softmax_getModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Softmax *arg1 = (GRT::Softmax *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< GRT::SoftmaxModel > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Softmax_getModels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Softmax, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Softmax_getModels" "', argument " "1"" of type '" "GRT::Softmax const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Softmax * >(argp1);
  result = ((GRT::Softmax const *)arg1)->getModels();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< GRT::SoftmaxModel >(static_cast< const GRT::Vector< GRT::SoftmaxModel >& >(result))), SWIGTYPE_p_GRT__VectorT_GRT__SoftmaxModel_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Softmax_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":Softmax_getId")) SWIG_fail;
  result = GRT::Softmax::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Softmax_save__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Softmax *arg1 = (GRT::Softmax *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Softmax_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Softmax, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Softmax_save" "', argument " "1"" of type '" "GRT::Softmax const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Softmax * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Softmax_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Softmax_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::Softmax const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Softmax_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__Softmax, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Softmax_save__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__Softmax, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Softmax_save__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Softmax_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Softmax::save(std::fstream &) const\n"
    "    save(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Softmax_load__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Softmax *arg1 = (GRT::Softmax *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Softmax_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Softmax, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Softmax_load" "', argument " "1"" of type '" "GRT::Softmax *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Softmax * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Softmax_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Softmax_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Softmax_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__Softmax, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Softmax_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__Softmax, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Softmax_load__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Softmax_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Softmax::load(std::fstream &)\n"
    "    load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *Softmax_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__Softmax, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SVM__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM::KernelType arg1 ;
  GRT::SVM::SVMType arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  GRT::Float arg6 ;
  UINT arg7 ;
  GRT::Float arg8 ;
  GRT::Float arg9 ;
  GRT::Float arg10 ;
  bool arg11 ;
  UINT arg12 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  bool val11 ;
  int ecode11 = 0 ;
  int val12 ;
  int ecode12 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  GRT::SVM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOO:new_SVM",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SVM" "', argument " "1"" of type '" "GRT::SVM::KernelType""'");
  } 
  arg1 = static_cast< GRT::SVM::KernelType >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SVM" "', argument " "2"" of type '" "GRT::SVM::SVMType""'");
  } 
  arg2 = static_cast< GRT::SVM::SVMType >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SVM" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SVM" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SVM" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SVM" "', argument " "6"" of type '" "GRT::Float""'");
  } 
  arg6 = static_cast< GRT::Float >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_SVM" "', argument " "7"" of type '" "UINT""'");
  } 
  arg7 = static_cast< UINT >(val7);
  ecode8 = SWIG_AsVal_float(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_SVM" "', argument " "8"" of type '" "GRT::Float""'");
  } 
  arg8 = static_cast< GRT::Float >(val8);
  ecode9 = SWIG_AsVal_float(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_SVM" "', argument " "9"" of type '" "GRT::Float""'");
  } 
  arg9 = static_cast< GRT::Float >(val9);
  ecode10 = SWIG_AsVal_float(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_SVM" "', argument " "10"" of type '" "GRT::Float""'");
  } 
  arg10 = static_cast< GRT::Float >(val10);
  ecode11 = SWIG_AsVal_bool(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_SVM" "', argument " "11"" of type '" "bool""'");
  } 
  arg11 = static_cast< bool >(val11);
  ecode12 = SWIG_AsVal_int(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_SVM" "', argument " "12"" of type '" "UINT""'");
  } 
  arg12 = static_cast< UINT >(val12);
  result = (GRT::SVM *)new GRT::SVM(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SVM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SVM__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM::KernelType arg1 ;
  GRT::SVM::SVMType arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  GRT::Float arg6 ;
  UINT arg7 ;
  GRT::Float arg8 ;
  GRT::Float arg9 ;
  GRT::Float arg10 ;
  bool arg11 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  bool val11 ;
  int ecode11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  GRT::SVM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:new_SVM",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SVM" "', argument " "1"" of type '" "GRT::SVM::KernelType""'");
  } 
  arg1 = static_cast< GRT::SVM::KernelType >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SVM" "', argument " "2"" of type '" "GRT::SVM::SVMType""'");
  } 
  arg2 = static_cast< GRT::SVM::SVMType >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SVM" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SVM" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SVM" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SVM" "', argument " "6"" of type '" "GRT::Float""'");
  } 
  arg6 = static_cast< GRT::Float >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_SVM" "', argument " "7"" of type '" "UINT""'");
  } 
  arg7 = static_cast< UINT >(val7);
  ecode8 = SWIG_AsVal_float(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_SVM" "', argument " "8"" of type '" "GRT::Float""'");
  } 
  arg8 = static_cast< GRT::Float >(val8);
  ecode9 = SWIG_AsVal_float(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_SVM" "', argument " "9"" of type '" "GRT::Float""'");
  } 
  arg9 = static_cast< GRT::Float >(val9);
  ecode10 = SWIG_AsVal_float(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_SVM" "', argument " "10"" of type '" "GRT::Float""'");
  } 
  arg10 = static_cast< GRT::Float >(val10);
  ecode11 = SWIG_AsVal_bool(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_SVM" "', argument " "11"" of type '" "bool""'");
  } 
  arg11 = static_cast< bool >(val11);
  result = (GRT::SVM *)new GRT::SVM(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SVM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SVM__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM::KernelType arg1 ;
  GRT::SVM::SVMType arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  GRT::Float arg6 ;
  UINT arg7 ;
  GRT::Float arg8 ;
  GRT::Float arg9 ;
  GRT::Float arg10 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  GRT::SVM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:new_SVM",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SVM" "', argument " "1"" of type '" "GRT::SVM::KernelType""'");
  } 
  arg1 = static_cast< GRT::SVM::KernelType >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SVM" "', argument " "2"" of type '" "GRT::SVM::SVMType""'");
  } 
  arg2 = static_cast< GRT::SVM::SVMType >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SVM" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SVM" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SVM" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SVM" "', argument " "6"" of type '" "GRT::Float""'");
  } 
  arg6 = static_cast< GRT::Float >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_SVM" "', argument " "7"" of type '" "UINT""'");
  } 
  arg7 = static_cast< UINT >(val7);
  ecode8 = SWIG_AsVal_float(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_SVM" "', argument " "8"" of type '" "GRT::Float""'");
  } 
  arg8 = static_cast< GRT::Float >(val8);
  ecode9 = SWIG_AsVal_float(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_SVM" "', argument " "9"" of type '" "GRT::Float""'");
  } 
  arg9 = static_cast< GRT::Float >(val9);
  ecode10 = SWIG_AsVal_float(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_SVM" "', argument " "10"" of type '" "GRT::Float""'");
  } 
  arg10 = static_cast< GRT::Float >(val10);
  result = (GRT::SVM *)new GRT::SVM(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SVM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SVM__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM::KernelType arg1 ;
  GRT::SVM::SVMType arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  GRT::Float arg6 ;
  UINT arg7 ;
  GRT::Float arg8 ;
  GRT::Float arg9 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  GRT::SVM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_SVM",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SVM" "', argument " "1"" of type '" "GRT::SVM::KernelType""'");
  } 
  arg1 = static_cast< GRT::SVM::KernelType >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SVM" "', argument " "2"" of type '" "GRT::SVM::SVMType""'");
  } 
  arg2 = static_cast< GRT::SVM::SVMType >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SVM" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SVM" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SVM" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SVM" "', argument " "6"" of type '" "GRT::Float""'");
  } 
  arg6 = static_cast< GRT::Float >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_SVM" "', argument " "7"" of type '" "UINT""'");
  } 
  arg7 = static_cast< UINT >(val7);
  ecode8 = SWIG_AsVal_float(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_SVM" "', argument " "8"" of type '" "GRT::Float""'");
  } 
  arg8 = static_cast< GRT::Float >(val8);
  ecode9 = SWIG_AsVal_float(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_SVM" "', argument " "9"" of type '" "GRT::Float""'");
  } 
  arg9 = static_cast< GRT::Float >(val9);
  result = (GRT::SVM *)new GRT::SVM(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SVM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SVM__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM::KernelType arg1 ;
  GRT::SVM::SVMType arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  GRT::Float arg6 ;
  UINT arg7 ;
  GRT::Float arg8 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  float val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  GRT::SVM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_SVM",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SVM" "', argument " "1"" of type '" "GRT::SVM::KernelType""'");
  } 
  arg1 = static_cast< GRT::SVM::KernelType >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SVM" "', argument " "2"" of type '" "GRT::SVM::SVMType""'");
  } 
  arg2 = static_cast< GRT::SVM::SVMType >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SVM" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SVM" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SVM" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SVM" "', argument " "6"" of type '" "GRT::Float""'");
  } 
  arg6 = static_cast< GRT::Float >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_SVM" "', argument " "7"" of type '" "UINT""'");
  } 
  arg7 = static_cast< UINT >(val7);
  ecode8 = SWIG_AsVal_float(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_SVM" "', argument " "8"" of type '" "GRT::Float""'");
  } 
  arg8 = static_cast< GRT::Float >(val8);
  result = (GRT::SVM *)new GRT::SVM(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SVM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SVM__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM::KernelType arg1 ;
  GRT::SVM::SVMType arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  GRT::Float arg6 ;
  UINT arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  GRT::SVM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_SVM",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SVM" "', argument " "1"" of type '" "GRT::SVM::KernelType""'");
  } 
  arg1 = static_cast< GRT::SVM::KernelType >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SVM" "', argument " "2"" of type '" "GRT::SVM::SVMType""'");
  } 
  arg2 = static_cast< GRT::SVM::SVMType >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SVM" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SVM" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SVM" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SVM" "', argument " "6"" of type '" "GRT::Float""'");
  } 
  arg6 = static_cast< GRT::Float >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_SVM" "', argument " "7"" of type '" "UINT""'");
  } 
  arg7 = static_cast< UINT >(val7);
  result = (GRT::SVM *)new GRT::SVM(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SVM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SVM__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM::KernelType arg1 ;
  GRT::SVM::SVMType arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  GRT::Float arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  GRT::SVM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_SVM",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SVM" "', argument " "1"" of type '" "GRT::SVM::KernelType""'");
  } 
  arg1 = static_cast< GRT::SVM::KernelType >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SVM" "', argument " "2"" of type '" "GRT::SVM::SVMType""'");
  } 
  arg2 = static_cast< GRT::SVM::SVMType >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SVM" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SVM" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SVM" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SVM" "', argument " "6"" of type '" "GRT::Float""'");
  } 
  arg6 = static_cast< GRT::Float >(val6);
  result = (GRT::SVM *)new GRT::SVM(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SVM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SVM__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM::KernelType arg1 ;
  GRT::SVM::SVMType arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::SVM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_SVM",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SVM" "', argument " "1"" of type '" "GRT::SVM::KernelType""'");
  } 
  arg1 = static_cast< GRT::SVM::KernelType >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SVM" "', argument " "2"" of type '" "GRT::SVM::SVMType""'");
  } 
  arg2 = static_cast< GRT::SVM::SVMType >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SVM" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SVM" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SVM" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (GRT::SVM *)new GRT::SVM(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SVM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SVM__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM::KernelType arg1 ;
  GRT::SVM::SVMType arg2 ;
  bool arg3 ;
  bool arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::SVM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SVM",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SVM" "', argument " "1"" of type '" "GRT::SVM::KernelType""'");
  } 
  arg1 = static_cast< GRT::SVM::KernelType >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SVM" "', argument " "2"" of type '" "GRT::SVM::SVMType""'");
  } 
  arg2 = static_cast< GRT::SVM::SVMType >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SVM" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SVM" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (GRT::SVM *)new GRT::SVM(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SVM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SVM__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM::KernelType arg1 ;
  GRT::SVM::SVMType arg2 ;
  bool arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::SVM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SVM",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SVM" "', argument " "1"" of type '" "GRT::SVM::KernelType""'");
  } 
  arg1 = static_cast< GRT::SVM::KernelType >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SVM" "', argument " "2"" of type '" "GRT::SVM::SVMType""'");
  } 
  arg2 = static_cast< GRT::SVM::SVMType >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SVM" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (GRT::SVM *)new GRT::SVM(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SVM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SVM__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM::KernelType arg1 ;
  GRT::SVM::SVMType arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::SVM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SVM",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SVM" "', argument " "1"" of type '" "GRT::SVM::KernelType""'");
  } 
  arg1 = static_cast< GRT::SVM::KernelType >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SVM" "', argument " "2"" of type '" "GRT::SVM::SVMType""'");
  } 
  arg2 = static_cast< GRT::SVM::SVMType >(val2);
  result = (GRT::SVM *)new GRT::SVM(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SVM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SVM__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM::KernelType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::SVM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SVM",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SVM" "', argument " "1"" of type '" "GRT::SVM::KernelType""'");
  } 
  arg1 = static_cast< GRT::SVM::KernelType >(val1);
  result = (GRT::SVM *)new GRT::SVM(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SVM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SVM__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SVM")) SWIG_fail;
  result = (GRT::SVM *)new GRT::SVM();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SVM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SVM__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::SVM *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SVM",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__SVM,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SVM" "', argument " "1"" of type '" "GRT::SVM const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SVM" "', argument " "1"" of type '" "GRT::SVM const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  result = (GRT::SVM *)new GRT::SVM((GRT::SVM const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SVM, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SVM(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[13] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 12) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SVM__SWIG_12(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__SVM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SVM__SWIG_13(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SVM__SWIG_11(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SVM__SWIG_10(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SVM__SWIG_9(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_SVM__SWIG_8(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_SVM__SWIG_7(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_SVM__SWIG_6(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_SVM__SWIG_5(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_float(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_new_SVM__SWIG_4(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_float(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_float(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_SVM__SWIG_3(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_float(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_float(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_float(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        return _wrap_new_SVM__SWIG_2(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 11) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_float(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_float(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_float(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_bool(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          return _wrap_new_SVM__SWIG_1(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_float(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_float(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_float(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_bool(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_int(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            return _wrap_new_SVM__SWIG_0(self, args);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SVM'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::SVM::SVM(GRT::SVM::KernelType,GRT::SVM::SVMType,bool,bool,bool,GRT::Float,UINT,GRT::Float,GRT::Float,GRT::Float,bool,UINT)\n"
    "    GRT::SVM::SVM(GRT::SVM::KernelType,GRT::SVM::SVMType,bool,bool,bool,GRT::Float,UINT,GRT::Float,GRT::Float,GRT::Float,bool)\n"
    "    GRT::SVM::SVM(GRT::SVM::KernelType,GRT::SVM::SVMType,bool,bool,bool,GRT::Float,UINT,GRT::Float,GRT::Float,GRT::Float)\n"
    "    GRT::SVM::SVM(GRT::SVM::KernelType,GRT::SVM::SVMType,bool,bool,bool,GRT::Float,UINT,GRT::Float,GRT::Float)\n"
    "    GRT::SVM::SVM(GRT::SVM::KernelType,GRT::SVM::SVMType,bool,bool,bool,GRT::Float,UINT,GRT::Float)\n"
    "    GRT::SVM::SVM(GRT::SVM::KernelType,GRT::SVM::SVMType,bool,bool,bool,GRT::Float,UINT)\n"
    "    GRT::SVM::SVM(GRT::SVM::KernelType,GRT::SVM::SVMType,bool,bool,bool,GRT::Float)\n"
    "    GRT::SVM::SVM(GRT::SVM::KernelType,GRT::SVM::SVMType,bool,bool,bool)\n"
    "    GRT::SVM::SVM(GRT::SVM::KernelType,GRT::SVM::SVMType,bool,bool)\n"
    "    GRT::SVM::SVM(GRT::SVM::KernelType,GRT::SVM::SVMType,bool)\n"
    "    GRT::SVM::SVM(GRT::SVM::KernelType,GRT::SVM::SVMType)\n"
    "    GRT::SVM::SVM(GRT::SVM::KernelType)\n"
    "    GRT::SVM::SVM()\n"
    "    GRT::SVM::SVM(GRT::SVM const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SVM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SVM",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SVM" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  GRT::Classifier *arg2 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_deepCopyFrom" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVM_deepCopyFrom" "', argument " "2"" of type '" "GRT::Classifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Classifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_train_" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVM_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVM_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_predict_" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVM_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVM_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SVM_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_clear" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_save" "', argument " "1"" of type '" "GRT::SVM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVM_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVM_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::SVM const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_load" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVM_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVM_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  GRT::SVM::KernelType arg2 ;
  GRT::SVM::SVMType arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  GRT::Float arg7 ;
  UINT arg8 ;
  GRT::Float arg9 ;
  GRT::Float arg10 ;
  GRT::Float arg11 ;
  bool arg12 ;
  UINT arg13 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  float val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  float val11 ;
  int ecode11 = 0 ;
  bool val12 ;
  int ecode12 = 0 ;
  int val13 ;
  int ecode13 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:SVM_init",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_init" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SVM_init" "', argument " "2"" of type '" "GRT::SVM::KernelType""'");
  } 
  arg2 = static_cast< GRT::SVM::KernelType >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SVM_init" "', argument " "3"" of type '" "GRT::SVM::SVMType""'");
  } 
  arg3 = static_cast< GRT::SVM::SVMType >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SVM_init" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SVM_init" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "SVM_init" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "SVM_init" "', argument " "7"" of type '" "GRT::Float""'");
  } 
  arg7 = static_cast< GRT::Float >(val7);
  ecode8 = SWIG_AsVal_int(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "SVM_init" "', argument " "8"" of type '" "UINT""'");
  } 
  arg8 = static_cast< UINT >(val8);
  ecode9 = SWIG_AsVal_float(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "SVM_init" "', argument " "9"" of type '" "GRT::Float""'");
  } 
  arg9 = static_cast< GRT::Float >(val9);
  ecode10 = SWIG_AsVal_float(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "SVM_init" "', argument " "10"" of type '" "GRT::Float""'");
  } 
  arg10 = static_cast< GRT::Float >(val10);
  ecode11 = SWIG_AsVal_float(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "SVM_init" "', argument " "11"" of type '" "GRT::Float""'");
  } 
  arg11 = static_cast< GRT::Float >(val11);
  ecode12 = SWIG_AsVal_bool(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "SVM_init" "', argument " "12"" of type '" "bool""'");
  } 
  arg12 = static_cast< bool >(val12);
  ecode13 = SWIG_AsVal_int(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "SVM_init" "', argument " "13"" of type '" "UINT""'");
  } 
  arg13 = static_cast< UINT >(val13);
  result = (bool)(arg1)->init(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_initDefaultSVMSettings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SVM_initDefaultSVMSettings",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_initDefaultSVMSettings" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  (arg1)->initDefaultSVMSettings();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_getIsCrossValidationTrainingEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SVM_getIsCrossValidationTrainingEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_getIsCrossValidationTrainingEnabled" "', argument " "1"" of type '" "GRT::SVM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  result = (bool)((GRT::SVM const *)arg1)->getIsCrossValidationTrainingEnabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_getIsAutoGammaEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SVM_getIsAutoGammaEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_getIsAutoGammaEnabled" "', argument " "1"" of type '" "GRT::SVM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  result = (bool)((GRT::SVM const *)arg1)->getIsAutoGammaEnabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_getSVMType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SVM_getSVMType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_getSVMType" "', argument " "1"" of type '" "GRT::SVM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  result = ((GRT::SVM const *)arg1)->getSVMType();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_getKernelType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SVM_getKernelType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_getKernelType" "', argument " "1"" of type '" "GRT::SVM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  result = ((GRT::SVM const *)arg1)->getKernelType();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_getDegree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SVM_getDegree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_getDegree" "', argument " "1"" of type '" "GRT::SVM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  result = ((GRT::SVM const *)arg1)->getDegree();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_getNumClasses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SVM_getNumClasses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_getNumClasses" "', argument " "1"" of type '" "GRT::SVM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  result = ((GRT::SVM const *)arg1)->getNumClasses();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_getGamma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SVM_getGamma",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_getGamma" "', argument " "1"" of type '" "GRT::SVM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  result = (GRT::Float)((GRT::SVM const *)arg1)->getGamma();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_getNu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SVM_getNu",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_getNu" "', argument " "1"" of type '" "GRT::SVM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  result = (GRT::Float)((GRT::SVM const *)arg1)->getNu();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_getCoef0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SVM_getCoef0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_getCoef0" "', argument " "1"" of type '" "GRT::SVM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  result = (GRT::Float)((GRT::SVM const *)arg1)->getCoef0();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_getC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SVM_getC",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_getC" "', argument " "1"" of type '" "GRT::SVM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  result = (GRT::Float)((GRT::SVM const *)arg1)->getC();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_getCrossValidationResult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SVM_getCrossValidationResult",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_getCrossValidationResult" "', argument " "1"" of type '" "GRT::SVM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  result = (GRT::Float)((GRT::SVM const *)arg1)->getCrossValidationResult();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_getLIBSVMModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  LIBSVM::svm_model *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SVM_getLIBSVMModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_getLIBSVMModel" "', argument " "1"" of type '" "GRT::SVM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  result = (LIBSVM::svm_model *)((GRT::SVM const *)arg1)->getLIBSVMModel();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LIBSVM__svm_model, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_setSVMType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  GRT::SVM::SVMType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_setSVMType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_setSVMType" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SVM_setSVMType" "', argument " "2"" of type '" "GRT::SVM::SVMType""'");
  } 
  arg2 = static_cast< GRT::SVM::SVMType >(val2);
  result = (bool)(arg1)->setSVMType(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_setKernelType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  GRT::SVM::KernelType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_setKernelType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_setKernelType" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SVM_setKernelType" "', argument " "2"" of type '" "GRT::SVM::KernelType""'");
  } 
  arg2 = static_cast< GRT::SVM::KernelType >(val2);
  result = (bool)(arg1)->setKernelType(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_setGamma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_setGamma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_setGamma" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SVM_setGamma" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setGamma(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_setDegree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_setDegree",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_setDegree" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SVM_setDegree" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setDegree(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_setNu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_setNu",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_setNu" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SVM_setNu" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setNu(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_setCoef0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_setCoef0",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_setCoef0" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SVM_setCoef0" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setCoef0(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_setC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_setC",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_setC" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SVM_setC" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setC(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_setKFoldCrossValidationValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_setKFoldCrossValidationValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_setKFoldCrossValidationValue" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SVM_setKFoldCrossValidationValue" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setKFoldCrossValidationValue(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_enableAutoGamma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_enableAutoGamma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_enableAutoGamma" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SVM_enableAutoGamma" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->enableAutoGamma(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_enableCrossValidationTraining(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_enableCrossValidationTraining",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_enableCrossValidationTraining" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SVM_enableCrossValidationTraining" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->enableCrossValidationTraining(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":SVM_getId")) SWIG_fail;
  result = GRT::SVM::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_save__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_save" "', argument " "1"" of type '" "GRT::SVM const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVM_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVM_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::SVM const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SVM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SVM_save__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SVM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SVM_save__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SVM_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::SVM::save(std::fstream &) const\n"
    "    save(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SVM_load__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_load" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVM_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVM_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SVM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SVM_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SVM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SVM_load__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SVM_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::SVM::load(std::fstream &)\n"
    "    load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SVM_train___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_train_" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVM_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVM_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_train___SWIG_1_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  GRT::RegressionData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SVM_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_train_" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVM_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVM_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SVM_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVM_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  arg3 = reinterpret_cast< GRT::RegressionData * >(argp3);
  result = (bool)(arg1)->train_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_train___SWIG_1_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_train_" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVM_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVM_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_train___SWIG_1_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_train_" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVM_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVM_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_train___SWIG_1_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_train_" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVM_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVM_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_train___SWIG_1_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_train_" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVM_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVM_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SVM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SVM_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SVM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SVM_train___SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SVM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SVM_train___SWIG_1_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SVM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SVM_train___SWIG_1_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SVM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SVM_train___SWIG_1_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SVM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SVM_train___SWIG_1_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SVM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SVM_train___SWIG_1_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SVM_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::SVM::train_(GRT::ClassificationData &)\n"
    "    train_(GRT::RegressionData &)\n"
    "    train_(GRT::RegressionData &,GRT::RegressionData &)\n"
    "    train_(GRT::TimeSeriesClassificationData &)\n"
    "    train_(GRT::ClassificationDataStream &)\n"
    "    train_(GRT::UnlabelledData &)\n"
    "    train_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SVM_predict___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SVM *arg1 = (GRT::SVM *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SVM_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SVM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVM_predict_" "', argument " "1"" of type '" "GRT::SVM *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SVM * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVM_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVM_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVM_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SVM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SVM_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SVM, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SVM_predict___SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SVM_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::SVM::predict_(GRT::VectorFloat &)\n"
    "    predict_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *SVM_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__SVM, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SwipeDetector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  bool arg5 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::SwipeDetector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_SwipeDetector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SwipeDetector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SwipeDetector" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SwipeDetector" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SwipeDetector" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SwipeDetector" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (GRT::SwipeDetector *)new GRT::SwipeDetector(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SwipeDetector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SwipeDetector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::SwipeDetector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SwipeDetector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SwipeDetector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SwipeDetector" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SwipeDetector" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SwipeDetector" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  result = (GRT::SwipeDetector *)new GRT::SwipeDetector(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SwipeDetector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SwipeDetector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::SwipeDetector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SwipeDetector",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SwipeDetector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SwipeDetector" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SwipeDetector" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (GRT::SwipeDetector *)new GRT::SwipeDetector(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SwipeDetector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SwipeDetector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::SwipeDetector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SwipeDetector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SwipeDetector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SwipeDetector" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (GRT::SwipeDetector *)new GRT::SwipeDetector(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SwipeDetector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SwipeDetector__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::SwipeDetector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SwipeDetector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SwipeDetector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (GRT::SwipeDetector *)new GRT::SwipeDetector(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SwipeDetector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SwipeDetector__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SwipeDetector")) SWIG_fail;
  result = (GRT::SwipeDetector *)new GRT::SwipeDetector();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SwipeDetector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SwipeDetector__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::SwipeDetector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SwipeDetector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__SwipeDetector,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SwipeDetector" "', argument " "1"" of type '" "GRT::SwipeDetector const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SwipeDetector" "', argument " "1"" of type '" "GRT::SwipeDetector const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  result = (GRT::SwipeDetector *)new GRT::SwipeDetector((GRT::SwipeDetector const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SwipeDetector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SwipeDetector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SwipeDetector__SWIG_5(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__SwipeDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SwipeDetector__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SwipeDetector__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SwipeDetector__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SwipeDetector__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_SwipeDetector__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_SwipeDetector__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SwipeDetector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::SwipeDetector::SwipeDetector(unsigned int const,unsigned int const,unsigned int const,unsigned int const,bool)\n"
    "    GRT::SwipeDetector::SwipeDetector(unsigned int const,unsigned int const,unsigned int const,unsigned int const)\n"
    "    GRT::SwipeDetector::SwipeDetector(unsigned int const,unsigned int const,unsigned int const)\n"
    "    GRT::SwipeDetector::SwipeDetector(unsigned int const,unsigned int const)\n"
    "    GRT::SwipeDetector::SwipeDetector(unsigned int const)\n"
    "    GRT::SwipeDetector::SwipeDetector()\n"
    "    GRT::SwipeDetector::SwipeDetector(GRT::SwipeDetector const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SwipeDetector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwipeDetector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwipeDetector" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  GRT::Classifier *arg2 = (GRT::Classifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_deepCopyFrom" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Classifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwipeDetector_deepCopyFrom" "', argument " "2"" of type '" "GRT::Classifier const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Classifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Classifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_init",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_init" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwipeDetector_init" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (bool)(arg1)->init(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_train_" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwipeDetector_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwipeDetector_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  GRT::VectorDouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_predict_" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwipeDetector_predict_" "', argument " "2"" of type '" "GRT::VectorDouble &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwipeDetector_predict_" "', argument " "2"" of type '" "GRT::VectorDouble &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorDouble * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwipeDetector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_clear" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwipeDetector_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_reset" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  result = (bool)(arg1)->reset();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_save" "', argument " "1"" of type '" "GRT::SwipeDetector const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwipeDetector_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwipeDetector_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::SwipeDetector const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_load" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwipeDetector_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwipeDetector_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_getSwipeDetected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwipeDetector_getSwipeDetected",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_getSwipeDetected" "', argument " "1"" of type '" "GRT::SwipeDetector const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  result = (bool)((GRT::SwipeDetector const *)arg1)->getSwipeDetected();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_getSwipeValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwipeDetector_getSwipeValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_getSwipeValue" "', argument " "1"" of type '" "GRT::SwipeDetector const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  result = (GRT::Float)((GRT::SwipeDetector const *)arg1)->getSwipeValue();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_getSwipeThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwipeDetector_getSwipeThreshold",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_getSwipeThreshold" "', argument " "1"" of type '" "GRT::SwipeDetector const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  result = (GRT::Float)((GRT::SwipeDetector const *)arg1)->getSwipeThreshold();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_getHysteresisThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwipeDetector_getHysteresisThreshold",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_getHysteresisThreshold" "', argument " "1"" of type '" "GRT::SwipeDetector const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  result = (GRT::Float)((GRT::SwipeDetector const *)arg1)->getHysteresisThreshold();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_getMovementVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwipeDetector_getMovementVelocity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_getMovementVelocity" "', argument " "1"" of type '" "GRT::SwipeDetector const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  result = (GRT::Float)((GRT::SwipeDetector const *)arg1)->getMovementVelocity();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_getMovementThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwipeDetector_getMovementThreshold",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_getMovementThreshold" "', argument " "1"" of type '" "GRT::SwipeDetector const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  result = (GRT::Float)((GRT::SwipeDetector const *)arg1)->getMovementThreshold();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_getContextValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwipeDetector_getContextValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_getContextValue" "', argument " "1"" of type '" "GRT::SwipeDetector const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  result = (GRT::Float)((GRT::SwipeDetector const *)arg1)->getContextValue();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_getSwipeIntegrationCoeff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwipeDetector_getSwipeIntegrationCoeff",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_getSwipeIntegrationCoeff" "', argument " "1"" of type '" "GRT::SwipeDetector const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  result = (GRT::Float)((GRT::SwipeDetector const *)arg1)->getSwipeIntegrationCoeff();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_setContext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_setContext",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_setContext" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwipeDetector_setContext" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setContext(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_setSwipeIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_setSwipeIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_setSwipeIndex" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwipeDetector_setSwipeIndex" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (bool)(arg1)->setSwipeIndex(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_setSwipeDirection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_setSwipeDirection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_setSwipeDirection" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwipeDetector_setSwipeDirection" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (bool)(arg1)->setSwipeDirection(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_setSwipeThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_setSwipeThreshold",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_setSwipeThreshold" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwipeDetector_setSwipeThreshold" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setSwipeThreshold(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_setHysteresisThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_setHysteresisThreshold",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_setHysteresisThreshold" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwipeDetector_setHysteresisThreshold" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setHysteresisThreshold(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_setMovementThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_setMovementThreshold",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_setMovementThreshold" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwipeDetector_setMovementThreshold" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setMovementThreshold(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_setSwipeIntegrationCoeff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_setSwipeIntegrationCoeff",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_setSwipeIntegrationCoeff" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwipeDetector_setSwipeIntegrationCoeff" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setSwipeIntegrationCoeff(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":SwipeDetector_getId")) SWIG_fail;
  result = GRT::SwipeDetector::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_save__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_save" "', argument " "1"" of type '" "GRT::SwipeDetector const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwipeDetector_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwipeDetector_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::SwipeDetector const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SwipeDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwipeDetector_save__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SwipeDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwipeDetector_save__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwipeDetector_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::SwipeDetector::save(std::fstream &) const\n"
    "    save(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_load__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_load" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwipeDetector_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwipeDetector_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SwipeDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwipeDetector_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SwipeDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwipeDetector_load__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwipeDetector_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::SwipeDetector::load(std::fstream &)\n"
    "    load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_train___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_train_" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwipeDetector_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwipeDetector_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_train___SWIG_1_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  GRT::RegressionData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SwipeDetector_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_train_" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwipeDetector_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwipeDetector_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SwipeDetector_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwipeDetector_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  arg3 = reinterpret_cast< GRT::RegressionData * >(argp3);
  result = (bool)(arg1)->train_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_train___SWIG_1_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_train_" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwipeDetector_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwipeDetector_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_train___SWIG_1_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_train_" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwipeDetector_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwipeDetector_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_train___SWIG_1_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_train_" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwipeDetector_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwipeDetector_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_train___SWIG_1_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_train_" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwipeDetector_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwipeDetector_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SwipeDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwipeDetector_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SwipeDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwipeDetector_train___SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SwipeDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwipeDetector_train___SWIG_1_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SwipeDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwipeDetector_train___SWIG_1_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SwipeDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwipeDetector_train___SWIG_1_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SwipeDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwipeDetector_train___SWIG_1_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SwipeDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SwipeDetector_train___SWIG_1_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwipeDetector_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::SwipeDetector::train_(GRT::ClassificationData &)\n"
    "    train_(GRT::RegressionData &)\n"
    "    train_(GRT::RegressionData &,GRT::RegressionData &)\n"
    "    train_(GRT::TimeSeriesClassificationData &)\n"
    "    train_(GRT::ClassificationDataStream &)\n"
    "    train_(GRT::UnlabelledData &)\n"
    "    train_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_predict___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_predict_" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwipeDetector_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwipeDetector_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_predict___SWIG_1_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SwipeDetector *arg1 = (GRT::SwipeDetector *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwipeDetector_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SwipeDetector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwipeDetector_predict_" "', argument " "1"" of type '" "GRT::SwipeDetector *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SwipeDetector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwipeDetector_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwipeDetector_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwipeDetector_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SwipeDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwipeDetector_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SwipeDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwipeDetector_predict___SWIG_1_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SwipeDetector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwipeDetector_predict___SWIG_1_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwipeDetector_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::SwipeDetector::predict_(GRT::VectorDouble &)\n"
    "    predict_(GRT::VectorFloat &)\n"
    "    predict_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *SwipeDetector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__SwipeDetector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Clusterer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  GRT::Clusterer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Clusterer",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Clusterer" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Clusterer" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (GRT::Clusterer *)new GRT::Clusterer((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Clusterer, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Clusterer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Clusterer")) SWIG_fail;
  result = (GRT::Clusterer *)new GRT::Clusterer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Clusterer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Clusterer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Clusterer__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Clusterer__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Clusterer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Clusterer::Clusterer(std::string const &)\n"
    "    GRT::Clusterer::Clusterer()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Clusterer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Clusterer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Clusterer" "', argument " "1"" of type '" "GRT::Clusterer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  GRT::Clusterer *arg2 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Clusterer_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_deepCopyFrom" "', argument " "1"" of type '" "GRT::Clusterer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Clusterer_deepCopyFrom" "', argument " "2"" of type '" "GRT::Clusterer const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Clusterer * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Clusterer const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_copyBaseVariables(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  GRT::Clusterer *arg2 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Clusterer_copyBaseVariables",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_copyBaseVariables" "', argument " "1"" of type '" "GRT::Clusterer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Clusterer_copyBaseVariables" "', argument " "2"" of type '" "GRT::Clusterer const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Clusterer * >(argp2);
  result = (bool)(arg1)->copyBaseVariables((GRT::Clusterer const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Clusterer_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_train_" "', argument " "1"" of type '" "GRT::Clusterer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Clusterer_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Clusterer_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_train___SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Clusterer_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_train_" "', argument " "1"" of type '" "GRT::Clusterer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Clusterer_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Clusterer_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_train___SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Clusterer_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_train_" "', argument " "1"" of type '" "GRT::Clusterer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Clusterer_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Clusterer_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__Clusterer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Clusterer_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__Clusterer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Clusterer_train___SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__Clusterer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Clusterer_train___SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Clusterer_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Clusterer::train_(GRT::MatrixFloat &)\n"
    "    GRT::Clusterer::train_(GRT::ClassificationData &)\n"
    "    GRT::Clusterer::train_(GRT::UnlabelledData &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Clusterer_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Clusterer_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_reset" "', argument " "1"" of type '" "GRT::Clusterer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  result = (bool)(arg1)->reset();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Clusterer_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_clear" "', argument " "1"" of type '" "GRT::Clusterer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_getNumClusters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Clusterer_getNumClusters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_getNumClusters" "', argument " "1"" of type '" "GRT::Clusterer const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  result = ((GRT::Clusterer const *)arg1)->getNumClusters();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_getPredictedClusterLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Clusterer_getPredictedClusterLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_getPredictedClusterLabel" "', argument " "1"" of type '" "GRT::Clusterer const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  result = ((GRT::Clusterer const *)arg1)->getPredictedClusterLabel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_getMaximumLikelihood(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Clusterer_getMaximumLikelihood",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_getMaximumLikelihood" "', argument " "1"" of type '" "GRT::Clusterer const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  result = (GRT::Float)((GRT::Clusterer const *)arg1)->getMaximumLikelihood();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_getBestDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Clusterer_getBestDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_getBestDistance" "', argument " "1"" of type '" "GRT::Clusterer const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  result = (GRT::Float)((GRT::Clusterer const *)arg1)->getBestDistance();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_getClusterLikelihoods(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Clusterer_getClusterLikelihoods",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_getClusterLikelihoods" "', argument " "1"" of type '" "GRT::Clusterer const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  result = ((GRT::Clusterer const *)arg1)->getClusterLikelihoods();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_getClusterDistances(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Clusterer_getClusterDistances",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_getClusterDistances" "', argument " "1"" of type '" "GRT::Clusterer const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  result = ((GRT::Clusterer const *)arg1)->getClusterDistances();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_getClusterLabels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< UINT > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Clusterer_getClusterLabels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_getClusterLabels" "', argument " "1"" of type '" "GRT::Clusterer const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  result = ((GRT::Clusterer const *)arg1)->getClusterLabels();
  
  resultobj = PyList_New((&result)->size());
  for (int i = 0; i < (&result)->size(); ++i) {
    PyList_SetItem(resultobj, i, PyInt_FromLong(result[i]));
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_getClustererType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Clusterer_getClustererType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_getClustererType" "', argument " "1"" of type '" "GRT::Clusterer const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  result = ((GRT::Clusterer const *)arg1)->getClustererType();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_setNumClusters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Clusterer_setNumClusters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_setNumClusters" "', argument " "1"" of type '" "GRT::Clusterer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Clusterer_setNumClusters" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNumClusters(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_create__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  GRT::Clusterer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Clusterer_create",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_create" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Clusterer_create" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (GRT::Clusterer *)GRT::Clusterer::create((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_create__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Clusterer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Clusterer_create",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_create" "', argument " "1"" of type '" "GRT::Clusterer const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  result = (GRT::Clusterer *)((GRT::Clusterer const *)arg1)->create();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_create(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__Clusterer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Clusterer_create__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Clusterer_create__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Clusterer_create'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::Clusterer::create(std::string const &)\n"
    "    GRT::Clusterer::create() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Clusterer_createNewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Clusterer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Clusterer_createNewInstance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_createNewInstance" "', argument " "1"" of type '" "GRT::Clusterer const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  result = (GRT::Clusterer *)((GRT::Clusterer const *)arg1)->createNewInstance();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_createInstanceFromString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  GRT::Clusterer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Clusterer_createInstanceFromString",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_createInstanceFromString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Clusterer_createInstanceFromString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (GRT::Clusterer *)GRT::Clusterer::createInstanceFromString((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_deepCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Clusterer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Clusterer_deepCopy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_deepCopy" "', argument " "1"" of type '" "GRT::Clusterer const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  result = (GRT::Clusterer *)((GRT::Clusterer const *)arg1)->deepCopy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_getBaseClusterer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Clusterer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Clusterer_getBaseClusterer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_getBaseClusterer" "', argument " "1"" of type '" "GRT::Clusterer const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  result = (GRT::Clusterer *) &((GRT::Clusterer const *)arg1)->getBaseClusterer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_getRegisteredClusterers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< GRT::Vector< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)":Clusterer_getRegisteredClusterers")) SWIG_fail;
  result = GRT::Clusterer::getRegisteredClusterers();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< std::string >(static_cast< const GRT::Vector< std::string >& >(result))), SWIGTYPE_p_GRT__VectorT_std__string_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_train_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  GRT::ClassificationData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Clusterer_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_train" "', argument " "1"" of type '" "GRT::Clusterer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Clusterer_train" "', argument " "2"" of type '" "GRT::ClassificationData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Clusterer_train" "', argument " "2"" of type '" "GRT::ClassificationData""'");
    } else {
      GRT::ClassificationData * temp = reinterpret_cast< GRT::ClassificationData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_train_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  GRT::RegressionData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Clusterer_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_train" "', argument " "1"" of type '" "GRT::Clusterer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Clusterer_train" "', argument " "2"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Clusterer_train" "', argument " "2"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_train_SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  GRT::RegressionData arg2 ;
  GRT::RegressionData arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Clusterer_train",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_train" "', argument " "1"" of type '" "GRT::Clusterer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Clusterer_train" "', argument " "2"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Clusterer_train" "', argument " "2"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Clusterer_train" "', argument " "3"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Clusterer_train" "', argument " "3"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_train_SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  GRT::TimeSeriesClassificationData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Clusterer_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_train" "', argument " "1"" of type '" "GRT::Clusterer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Clusterer_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Clusterer_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData""'");
    } else {
      GRT::TimeSeriesClassificationData * temp = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_train_SWIG_0_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  GRT::ClassificationDataStream arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Clusterer_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_train" "', argument " "1"" of type '" "GRT::Clusterer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Clusterer_train" "', argument " "2"" of type '" "GRT::ClassificationDataStream""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Clusterer_train" "', argument " "2"" of type '" "GRT::ClassificationDataStream""'");
    } else {
      GRT::ClassificationDataStream * temp = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_train_SWIG_0_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  GRT::UnlabelledData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Clusterer_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_train" "', argument " "1"" of type '" "GRT::Clusterer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Clusterer_train" "', argument " "2"" of type '" "GRT::UnlabelledData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Clusterer_train" "', argument " "2"" of type '" "GRT::UnlabelledData""'");
    } else {
      GRT::UnlabelledData * temp = reinterpret_cast< GRT::UnlabelledData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_train_SWIG_0_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::Clusterer *arg1 = (GRT::Clusterer *) 0 ;
  GRT::MatrixFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Clusterer_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Clusterer_train" "', argument " "1"" of type '" "GRT::Clusterer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::Clusterer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Clusterer_train" "', argument " "2"" of type '" "GRT::MatrixFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Clusterer_train" "', argument " "2"" of type '" "GRT::MatrixFloat""'");
    } else {
      GRT::MatrixFloat * temp = reinterpret_cast< GRT::MatrixFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Clusterer_train(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__Clusterer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Clusterer_train_SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__Clusterer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Clusterer_train_SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__Clusterer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Clusterer_train_SWIG_0_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__Clusterer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Clusterer_train_SWIG_0_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__Clusterer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Clusterer_train_SWIG_0_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__Clusterer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Clusterer_train_SWIG_0_6(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__Clusterer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Clusterer_train_SWIG_0_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Clusterer_train'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    train(GRT::ClassificationData)\n"
    "    train(GRT::RegressionData)\n"
    "    train(GRT::RegressionData,GRT::RegressionData)\n"
    "    train(GRT::TimeSeriesClassificationData)\n"
    "    train(GRT::ClassificationDataStream)\n"
    "    train(GRT::UnlabelledData)\n"
    "    train(GRT::MatrixFloat)\n");
  return 0;
}


SWIGINTERN PyObject *Clusterer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__Clusterer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ClusterTreeNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ClusterTreeNode")) SWIG_fail;
  result = (GRT::ClusterTreeNode *)new GRT::ClusterTreeNode();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClusterTreeNode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ClusterTreeNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTreeNode *arg1 = (GRT::ClusterTreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ClusterTreeNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTreeNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClusterTreeNode" "', argument " "1"" of type '" "GRT::ClusterTreeNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTreeNode * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTreeNode_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTreeNode *arg1 = (GRT::ClusterTreeNode *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTreeNode_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTreeNode_predict_" "', argument " "1"" of type '" "GRT::ClusterTreeNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTreeNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterTreeNode_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTreeNode_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTreeNode_predict___SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTreeNode *arg1 = (GRT::ClusterTreeNode *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  GRT::VectorFloat *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterTreeNode_predict_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTreeNode_predict_" "', argument " "1"" of type '" "GRT::ClusterTreeNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTreeNode * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterTreeNode_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTreeNode_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterTreeNode_predict_" "', argument " "3"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTreeNode_predict_" "', argument " "3"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg3 = reinterpret_cast< GRT::VectorFloat * >(argp3);
  result = (bool)(arg1)->predict_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTreeNode_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClusterTreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClusterTreeNode_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClusterTreeNode, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ClusterTreeNode_predict___SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterTreeNode_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClusterTreeNode::predict_(GRT::VectorFloat &)\n"
    "    GRT::ClusterTreeNode::predict_(GRT::VectorFloat &,GRT::VectorFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterTreeNode_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTreeNode *arg1 = (GRT::ClusterTreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTreeNode_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTreeNode_clear" "', argument " "1"" of type '" "GRT::ClusterTreeNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTreeNode * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTreeNode__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTreeNode *arg1 = (GRT::ClusterTreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTreeNode__print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTreeNode__print" "', argument " "1"" of type '" "GRT::ClusterTreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTreeNode * >(argp1);
  result = (bool)((GRT::ClusterTreeNode const *)arg1)->print();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTreeNode_deepCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTreeNode *arg1 = (GRT::ClusterTreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTreeNode_deepCopy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTreeNode_deepCopy" "', argument " "1"" of type '" "GRT::ClusterTreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTreeNode * >(argp1);
  result = (Node *)((GRT::ClusterTreeNode const *)arg1)->deepCopy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Node, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTreeNode_deepCopyTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTreeNode *arg1 = (GRT::ClusterTreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ClusterTreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTreeNode_deepCopyTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTreeNode_deepCopyTree" "', argument " "1"" of type '" "GRT::ClusterTreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTreeNode * >(argp1);
  result = (GRT::ClusterTreeNode *)((GRT::ClusterTreeNode const *)arg1)->deepCopyTree();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClusterTreeNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTreeNode_getNodeSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTreeNode *arg1 = (GRT::ClusterTreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTreeNode_getNodeSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTreeNode_getNodeSize" "', argument " "1"" of type '" "GRT::ClusterTreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTreeNode * >(argp1);
  result = ((GRT::ClusterTreeNode const *)arg1)->getNodeSize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTreeNode_getFeatureIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTreeNode *arg1 = (GRT::ClusterTreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTreeNode_getFeatureIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTreeNode_getFeatureIndex" "', argument " "1"" of type '" "GRT::ClusterTreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTreeNode * >(argp1);
  result = ((GRT::ClusterTreeNode const *)arg1)->getFeatureIndex();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTreeNode_getThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTreeNode *arg1 = (GRT::ClusterTreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTreeNode_getThreshold",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTreeNode_getThreshold" "', argument " "1"" of type '" "GRT::ClusterTreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTreeNode * >(argp1);
  result = (GRT::Float)((GRT::ClusterTreeNode const *)arg1)->getThreshold();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTreeNode_getClusterLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTreeNode *arg1 = (GRT::ClusterTreeNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTreeNode_getClusterLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTreeNode_getClusterLabel" "', argument " "1"" of type '" "GRT::ClusterTreeNode const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTreeNode * >(argp1);
  result = ((GRT::ClusterTreeNode const *)arg1)->getClusterLabel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTreeNode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTreeNode *arg1 = (GRT::ClusterTreeNode *) 0 ;
  UINT arg2 ;
  UINT arg3 ;
  GRT::Float arg4 ;
  UINT arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ClusterTreeNode_set",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTreeNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTreeNode_set" "', argument " "1"" of type '" "GRT::ClusterTreeNode *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTreeNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterTreeNode_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ClusterTreeNode_set" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ClusterTreeNode_set" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ClusterTreeNode_set" "', argument " "5"" of type '" "UINT""'");
  } 
  arg5 = static_cast< UINT >(val5);
  result = (bool)(arg1)->set(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ClusterTreeNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__ClusterTreeNode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ClusterTree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  bool arg4 ;
  Tree::TrainingMode arg5 ;
  bool arg6 ;
  GRT::Float arg7 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  float val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  GRT::ClusterTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_ClusterTree",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ClusterTree" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ClusterTree" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ClusterTree" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ClusterTree" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_Tree__TrainingMode,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_ClusterTree" "', argument " "5"" of type '" "Tree::TrainingMode const""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterTree" "', argument " "5"" of type '" "Tree::TrainingMode const""'");
    } else {
      Tree::TrainingMode * temp = reinterpret_cast< Tree::TrainingMode * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ClusterTree" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_float(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_ClusterTree" "', argument " "7"" of type '" "GRT::Float""'");
  } 
  arg7 = static_cast< GRT::Float >(val7);
  result = (GRT::ClusterTree *)new GRT::ClusterTree(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClusterTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterTree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  bool arg4 ;
  Tree::TrainingMode arg5 ;
  bool arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  GRT::ClusterTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_ClusterTree",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ClusterTree" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ClusterTree" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ClusterTree" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ClusterTree" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_Tree__TrainingMode,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_ClusterTree" "', argument " "5"" of type '" "Tree::TrainingMode const""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterTree" "', argument " "5"" of type '" "Tree::TrainingMode const""'");
    } else {
      Tree::TrainingMode * temp = reinterpret_cast< Tree::TrainingMode * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ClusterTree" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (GRT::ClusterTree *)new GRT::ClusterTree(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClusterTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterTree__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  bool arg4 ;
  Tree::TrainingMode arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::ClusterTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ClusterTree",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ClusterTree" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ClusterTree" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ClusterTree" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ClusterTree" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_Tree__TrainingMode,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_ClusterTree" "', argument " "5"" of type '" "Tree::TrainingMode const""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterTree" "', argument " "5"" of type '" "Tree::TrainingMode const""'");
    } else {
      Tree::TrainingMode * temp = reinterpret_cast< Tree::TrainingMode * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  result = (GRT::ClusterTree *)new GRT::ClusterTree(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClusterTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterTree__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  bool arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::ClusterTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ClusterTree",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ClusterTree" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ClusterTree" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ClusterTree" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ClusterTree" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (GRT::ClusterTree *)new GRT::ClusterTree(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClusterTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterTree__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::ClusterTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ClusterTree",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ClusterTree" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ClusterTree" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ClusterTree" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (GRT::ClusterTree *)new GRT::ClusterTree(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClusterTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterTree__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::ClusterTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ClusterTree",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ClusterTree" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ClusterTree" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (GRT::ClusterTree *)new GRT::ClusterTree(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClusterTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterTree__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ClusterTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ClusterTree",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ClusterTree" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  result = (GRT::ClusterTree *)new GRT::ClusterTree(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClusterTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterTree__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ClusterTree")) SWIG_fail;
  result = (GRT::ClusterTree *)new GRT::ClusterTree();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClusterTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterTree__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ClusterTree *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ClusterTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__ClusterTree,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterTree" "', argument " "1"" of type '" "GRT::ClusterTree const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterTree" "', argument " "1"" of type '" "GRT::ClusterTree const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  result = (GRT::ClusterTree *)new GRT::ClusterTree((GRT::ClusterTree const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClusterTree, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterTree(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ClusterTree__SWIG_7(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__ClusterTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ClusterTree__SWIG_8(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ClusterTree__SWIG_6(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ClusterTree__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ClusterTree__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ClusterTree__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_Tree__TrainingMode, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_ClusterTree__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_Tree__TrainingMode, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_ClusterTree__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_Tree__TrainingMode, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_float(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_ClusterTree__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ClusterTree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClusterTree::ClusterTree(UINT const,UINT const,UINT const,bool const,Tree::TrainingMode const,bool const,GRT::Float const)\n"
    "    GRT::ClusterTree::ClusterTree(UINT const,UINT const,UINT const,bool const,Tree::TrainingMode const,bool const)\n"
    "    GRT::ClusterTree::ClusterTree(UINT const,UINT const,UINT const,bool const,Tree::TrainingMode const)\n"
    "    GRT::ClusterTree::ClusterTree(UINT const,UINT const,UINT const,bool const)\n"
    "    GRT::ClusterTree::ClusterTree(UINT const,UINT const,UINT const)\n"
    "    GRT::ClusterTree::ClusterTree(UINT const,UINT const)\n"
    "    GRT::ClusterTree::ClusterTree(UINT const)\n"
    "    GRT::ClusterTree::ClusterTree()\n"
    "    GRT::ClusterTree::ClusterTree(GRT::ClusterTree const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ClusterTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ClusterTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClusterTree" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  GRT::Clusterer *arg2 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_deepCopyFrom" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterTree_deepCopyFrom" "', argument " "2"" of type '" "GRT::Clusterer const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Clusterer * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Clusterer const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_train_(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_train_" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterTree_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTree_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_predict_(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_predict_" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterTree_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTree_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTree_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_clear" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree__print(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTree__print",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree__print" "', argument " "1"" of type '" "GRT::ClusterTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  result = (bool)((GRT::ClusterTree const *)arg1)->print();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_saveModelToFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_saveModelToFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_saveModelToFile" "', argument " "1"" of type '" "GRT::ClusterTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterTree_saveModelToFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTree_saveModelToFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::ClusterTree const *)arg1)->saveModelToFile(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_loadModelFromFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_loadModelFromFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_loadModelFromFile" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterTree_loadModelFromFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTree_loadModelFromFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->loadModelFromFile(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_deepCopyTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ClusterTreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTree_deepCopyTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_deepCopyTree" "', argument " "1"" of type '" "GRT::ClusterTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  result = (GRT::ClusterTreeNode *)((GRT::ClusterTree const *)arg1)->deepCopyTree();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClusterTreeNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_getTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ClusterTreeNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTree_getTree",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_getTree" "', argument " "1"" of type '" "GRT::ClusterTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  result = (GRT::ClusterTreeNode *)((GRT::ClusterTree const *)arg1)->getTree();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClusterTreeNode, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_getPredictedClusterLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTree_getPredictedClusterLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_getPredictedClusterLabel" "', argument " "1"" of type '" "GRT::ClusterTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  result = ((GRT::ClusterTree const *)arg1)->getPredictedClusterLabel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_getMinRMSErrorPerNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTree_getMinRMSErrorPerNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_getMinRMSErrorPerNode" "', argument " "1"" of type '" "GRT::ClusterTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  result = (GRT::Float)((GRT::ClusterTree const *)arg1)->getMinRMSErrorPerNode();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_getTrainingMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Tree::TrainingMode result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTree_getTrainingMode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_getTrainingMode" "', argument " "1"" of type '" "GRT::ClusterTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  result = ((GRT::ClusterTree const *)arg1)->getTrainingMode();
  resultobj = SWIG_NewPointerObj((new Tree::TrainingMode(static_cast< const Tree::TrainingMode& >(result))), SWIGTYPE_p_Tree__TrainingMode, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_getNumSplittingSteps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTree_getNumSplittingSteps",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_getNumSplittingSteps" "', argument " "1"" of type '" "GRT::ClusterTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  result = ((GRT::ClusterTree const *)arg1)->getNumSplittingSteps();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_getMinNumSamplesPerNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTree_getMinNumSamplesPerNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_getMinNumSamplesPerNode" "', argument " "1"" of type '" "GRT::ClusterTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  result = ((GRT::ClusterTree const *)arg1)->getMinNumSamplesPerNode();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_getMaxDepth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTree_getMaxDepth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_getMaxDepth" "', argument " "1"" of type '" "GRT::ClusterTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  result = ((GRT::ClusterTree const *)arg1)->getMaxDepth();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_getPredictedNodeID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTree_getPredictedNodeID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_getPredictedNodeID" "', argument " "1"" of type '" "GRT::ClusterTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  result = ((GRT::ClusterTree const *)arg1)->getPredictedNodeID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_getRemoveFeaturesAtEachSplit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterTree_getRemoveFeaturesAtEachSplit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_getRemoveFeaturesAtEachSplit" "', argument " "1"" of type '" "GRT::ClusterTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  result = (bool)((GRT::ClusterTree const *)arg1)->getRemoveFeaturesAtEachSplit();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_setTrainingMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  Tree::TrainingMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_setTrainingMode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_setTrainingMode" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Tree__TrainingMode,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterTree_setTrainingMode" "', argument " "2"" of type '" "Tree::TrainingMode const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTree_setTrainingMode" "', argument " "2"" of type '" "Tree::TrainingMode const""'");
    } else {
      Tree::TrainingMode * temp = reinterpret_cast< Tree::TrainingMode * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->setTrainingMode(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_setNumSplittingSteps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_setNumSplittingSteps",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_setNumSplittingSteps" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterTree_setNumSplittingSteps" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNumSplittingSteps(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_setMinNumSamplesPerNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_setMinNumSamplesPerNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_setMinNumSamplesPerNode" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterTree_setMinNumSamplesPerNode" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setMinNumSamplesPerNode(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_setMaxDepth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_setMaxDepth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_setMaxDepth" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterTree_setMaxDepth" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setMaxDepth(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_setRemoveFeaturesAtEachSplit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_setRemoveFeaturesAtEachSplit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_setRemoveFeaturesAtEachSplit" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterTree_setRemoveFeaturesAtEachSplit" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setRemoveFeaturesAtEachSplit(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_setMinRMSErrorPerNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_setMinRMSErrorPerNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_setMinRMSErrorPerNode" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterTree_setMinRMSErrorPerNode" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setMinRMSErrorPerNode(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_saveModelToFile__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_saveModelToFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_saveModelToFile" "', argument " "1"" of type '" "GRT::ClusterTree const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterTree_saveModelToFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTree_saveModelToFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::ClusterTree const *)arg1)->saveModelToFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_saveModelToFile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClusterTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClusterTree_saveModelToFile__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClusterTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClusterTree_saveModelToFile__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterTree_saveModelToFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClusterTree::saveModelToFile(std::fstream &) const\n"
    "    saveModelToFile(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterTree_loadModelFromFile__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_loadModelFromFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_loadModelFromFile" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterTree_loadModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTree_loadModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadModelFromFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_loadModelFromFile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClusterTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClusterTree_loadModelFromFile__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClusterTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClusterTree_loadModelFromFile__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterTree_loadModelFromFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClusterTree::loadModelFromFile(std::fstream &)\n"
    "    loadModelFromFile(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterTree_train_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  GRT::ClassificationData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_train" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterTree_train" "', argument " "2"" of type '" "GRT::ClassificationData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTree_train" "', argument " "2"" of type '" "GRT::ClassificationData""'");
    } else {
      GRT::ClassificationData * temp = reinterpret_cast< GRT::ClassificationData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_train_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  GRT::RegressionData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_train" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterTree_train" "', argument " "2"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTree_train" "', argument " "2"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_train_SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  GRT::RegressionData arg2 ;
  GRT::RegressionData arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ClusterTree_train",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_train" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterTree_train" "', argument " "2"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTree_train" "', argument " "2"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ClusterTree_train" "', argument " "3"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTree_train" "', argument " "3"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_train_SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  GRT::TimeSeriesClassificationData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_train" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterTree_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTree_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData""'");
    } else {
      GRT::TimeSeriesClassificationData * temp = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_train_SWIG_0_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  GRT::ClassificationDataStream arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_train" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterTree_train" "', argument " "2"" of type '" "GRT::ClassificationDataStream""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTree_train" "', argument " "2"" of type '" "GRT::ClassificationDataStream""'");
    } else {
      GRT::ClassificationDataStream * temp = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_train_SWIG_0_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  GRT::UnlabelledData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_train" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterTree_train" "', argument " "2"" of type '" "GRT::UnlabelledData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTree_train" "', argument " "2"" of type '" "GRT::UnlabelledData""'");
    } else {
      GRT::UnlabelledData * temp = reinterpret_cast< GRT::UnlabelledData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_train_SWIG_0_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  GRT::MatrixFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_train" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterTree_train" "', argument " "2"" of type '" "GRT::MatrixFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTree_train" "', argument " "2"" of type '" "GRT::MatrixFloat""'");
    } else {
      GRT::MatrixFloat * temp = reinterpret_cast< GRT::MatrixFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_train(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClusterTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClusterTree_train_SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClusterTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClusterTree_train_SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClusterTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClusterTree_train_SWIG_0_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClusterTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClusterTree_train_SWIG_0_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClusterTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClusterTree_train_SWIG_0_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClusterTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClusterTree_train_SWIG_0_6(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClusterTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ClusterTree_train_SWIG_0_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterTree_train'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    train(GRT::ClassificationData)\n"
    "    train(GRT::RegressionData)\n"
    "    train(GRT::RegressionData,GRT::RegressionData)\n"
    "    train(GRT::TimeSeriesClassificationData)\n"
    "    train(GRT::ClassificationDataStream)\n"
    "    train(GRT::UnlabelledData)\n"
    "    train(GRT::MatrixFloat)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterTree_predict_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  GRT::VectorFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_predict" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterTree_predict" "', argument " "2"" of type '" "GRT::VectorFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTree_predict" "', argument " "2"" of type '" "GRT::VectorFloat""'");
    } else {
      GRT::VectorFloat * temp = reinterpret_cast< GRT::VectorFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->predict(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_predict_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterTree *arg1 = (GRT::ClusterTree *) 0 ;
  GRT::MatrixFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterTree_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterTree_predict" "', argument " "1"" of type '" "GRT::ClusterTree *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterTree * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterTree_predict" "', argument " "2"" of type '" "GRT::MatrixFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterTree_predict" "', argument " "2"" of type '" "GRT::MatrixFloat""'");
    } else {
      GRT::MatrixFloat * temp = reinterpret_cast< GRT::MatrixFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->predict(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterTree_predict(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClusterTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClusterTree_predict_SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__ClusterTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ClusterTree_predict_SWIG_0_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ClusterTree_predict'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    predict(GRT::VectorFloat)\n"
    "    predict(GRT::MatrixFloat)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ClusterTree_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":ClusterTree_getId")) SWIG_fail;
  result = GRT::ClusterTree::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ClusterTree_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__ClusterTree, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GaussianMixtureModels__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  GRT::Float arg4 ;
  UINT arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::GaussianMixtureModels *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_GaussianMixtureModels",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GaussianMixtureModels" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GaussianMixtureModels" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GaussianMixtureModels" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GaussianMixtureModels" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_GaussianMixtureModels" "', argument " "5"" of type '" "UINT""'");
  } 
  arg5 = static_cast< UINT >(val5);
  result = (GRT::GaussianMixtureModels *)new GRT::GaussianMixtureModels(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GaussianMixtureModels, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GaussianMixtureModels__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  GRT::Float arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::GaussianMixtureModels *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_GaussianMixtureModels",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GaussianMixtureModels" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GaussianMixtureModels" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GaussianMixtureModels" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GaussianMixtureModels" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = (GRT::GaussianMixtureModels *)new GRT::GaussianMixtureModels(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GaussianMixtureModels, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GaussianMixtureModels__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::GaussianMixtureModels *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_GaussianMixtureModels",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GaussianMixtureModels" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GaussianMixtureModels" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GaussianMixtureModels" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (GRT::GaussianMixtureModels *)new GRT::GaussianMixtureModels(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GaussianMixtureModels, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GaussianMixtureModels__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::GaussianMixtureModels *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_GaussianMixtureModels",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GaussianMixtureModels" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GaussianMixtureModels" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (GRT::GaussianMixtureModels *)new GRT::GaussianMixtureModels(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GaussianMixtureModels, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GaussianMixtureModels__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::GaussianMixtureModels *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GaussianMixtureModels",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GaussianMixtureModels" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  result = (GRT::GaussianMixtureModels *)new GRT::GaussianMixtureModels(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GaussianMixtureModels, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GaussianMixtureModels__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussianMixtureModels *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GaussianMixtureModels")) SWIG_fail;
  result = (GRT::GaussianMixtureModels *)new GRT::GaussianMixtureModels();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GaussianMixtureModels, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GaussianMixtureModels__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussianMixtureModels *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::GaussianMixtureModels *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GaussianMixtureModels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__GaussianMixtureModels,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GaussianMixtureModels" "', argument " "1"" of type '" "GRT::GaussianMixtureModels const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GaussianMixtureModels" "', argument " "1"" of type '" "GRT::GaussianMixtureModels const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussianMixtureModels * >(argp1);
  result = (GRT::GaussianMixtureModels *)new GRT::GaussianMixtureModels((GRT::GaussianMixtureModels const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GaussianMixtureModels, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GaussianMixtureModels(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_GaussianMixtureModels__SWIG_5(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__GaussianMixtureModels, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GaussianMixtureModels__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_GaussianMixtureModels__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_GaussianMixtureModels__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_GaussianMixtureModels__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_GaussianMixtureModels__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_GaussianMixtureModels__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_GaussianMixtureModels'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GaussianMixtureModels::GaussianMixtureModels(UINT const,UINT const,UINT const,GRT::Float const,UINT const)\n"
    "    GRT::GaussianMixtureModels::GaussianMixtureModels(UINT const,UINT const,UINT const,GRT::Float const)\n"
    "    GRT::GaussianMixtureModels::GaussianMixtureModels(UINT const,UINT const,UINT const)\n"
    "    GRT::GaussianMixtureModels::GaussianMixtureModels(UINT const,UINT const)\n"
    "    GRT::GaussianMixtureModels::GaussianMixtureModels(UINT const)\n"
    "    GRT::GaussianMixtureModels::GaussianMixtureModels()\n"
    "    GRT::GaussianMixtureModels::GaussianMixtureModels(GRT::GaussianMixtureModels const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_GaussianMixtureModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussianMixtureModels *arg1 = (GRT::GaussianMixtureModels *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GaussianMixtureModels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussianMixtureModels, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GaussianMixtureModels" "', argument " "1"" of type '" "GRT::GaussianMixtureModels *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussianMixtureModels * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussianMixtureModels *arg1 = (GRT::GaussianMixtureModels *) 0 ;
  GRT::Clusterer *arg2 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussianMixtureModels_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussianMixtureModels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianMixtureModels_deepCopyFrom" "', argument " "1"" of type '" "GRT::GaussianMixtureModels *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussianMixtureModels * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussianMixtureModels_deepCopyFrom" "', argument " "2"" of type '" "GRT::Clusterer const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Clusterer * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Clusterer const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussianMixtureModels *arg1 = (GRT::GaussianMixtureModels *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GaussianMixtureModels_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussianMixtureModels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianMixtureModels_reset" "', argument " "1"" of type '" "GRT::GaussianMixtureModels *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussianMixtureModels * >(argp1);
  result = (bool)(arg1)->reset();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussianMixtureModels *arg1 = (GRT::GaussianMixtureModels *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GaussianMixtureModels_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussianMixtureModels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianMixtureModels_clear" "', argument " "1"" of type '" "GRT::GaussianMixtureModels *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussianMixtureModels * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussianMixtureModels *arg1 = (GRT::GaussianMixtureModels *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussianMixtureModels_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussianMixtureModels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianMixtureModels_train_" "', argument " "1"" of type '" "GRT::GaussianMixtureModels *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussianMixtureModels * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussianMixtureModels_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussianMixtureModels_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_train___SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussianMixtureModels *arg1 = (GRT::GaussianMixtureModels *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussianMixtureModels_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussianMixtureModels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianMixtureModels_train_" "', argument " "1"" of type '" "GRT::GaussianMixtureModels *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussianMixtureModels * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussianMixtureModels_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussianMixtureModels_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_train___SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussianMixtureModels *arg1 = (GRT::GaussianMixtureModels *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussianMixtureModels_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussianMixtureModels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianMixtureModels_train_" "', argument " "1"" of type '" "GRT::GaussianMixtureModels *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussianMixtureModels * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussianMixtureModels_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussianMixtureModels_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GaussianMixtureModels, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GaussianMixtureModels_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GaussianMixtureModels, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GaussianMixtureModels_train___SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GaussianMixtureModels, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GaussianMixtureModels_train___SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GaussianMixtureModels_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GaussianMixtureModels::train_(GRT::MatrixFloat &)\n"
    "    GRT::GaussianMixtureModels::train_(GRT::ClassificationData &)\n"
    "    GRT::GaussianMixtureModels::train_(GRT::UnlabelledData &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_predict_(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussianMixtureModels *arg1 = (GRT::GaussianMixtureModels *) 0 ;
  GRT::VectorDouble *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussianMixtureModels_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussianMixtureModels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianMixtureModels_predict_" "', argument " "1"" of type '" "GRT::GaussianMixtureModels *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussianMixtureModels * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussianMixtureModels_predict_" "', argument " "2"" of type '" "GRT::VectorDouble &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussianMixtureModels_predict_" "', argument " "2"" of type '" "GRT::VectorDouble &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorDouble * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_saveModelToFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussianMixtureModels *arg1 = (GRT::GaussianMixtureModels *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussianMixtureModels_saveModelToFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussianMixtureModels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianMixtureModels_saveModelToFile" "', argument " "1"" of type '" "GRT::GaussianMixtureModels const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussianMixtureModels * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussianMixtureModels_saveModelToFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussianMixtureModels_saveModelToFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::GaussianMixtureModels const *)arg1)->saveModelToFile(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_loadModelFromFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussianMixtureModels *arg1 = (GRT::GaussianMixtureModels *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussianMixtureModels_loadModelFromFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussianMixtureModels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianMixtureModels_loadModelFromFile" "', argument " "1"" of type '" "GRT::GaussianMixtureModels *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussianMixtureModels * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussianMixtureModels_loadModelFromFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussianMixtureModels_loadModelFromFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->loadModelFromFile(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_getMu(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussianMixtureModels *arg1 = (GRT::GaussianMixtureModels *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GaussianMixtureModels_getMu",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussianMixtureModels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianMixtureModels_getMu" "', argument " "1"" of type '" "GRT::GaussianMixtureModels const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussianMixtureModels * >(argp1);
  result = ((GRT::GaussianMixtureModels const *)arg1)->getMu();
  
  {
    npy_intp dims[2]{
      (&result)->getNumRows(), (&result)->getNumCols()
    };
    resultobj = PyArray_SimpleNew(2, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->getNumRows(); ++i) {
      for (size_t j = 0; j < (&result)->getNumCols(); ++j) {
        float* d_ptr = static_cast<float*>(PyArray_GETPTR2(arr_ptr, i, j));
        *d_ptr = result[i][j];
      }
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_getSigma__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussianMixtureModels *arg1 = (GRT::GaussianMixtureModels *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< GRT::MatrixFloat > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GaussianMixtureModels_getSigma",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussianMixtureModels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianMixtureModels_getSigma" "', argument " "1"" of type '" "GRT::GaussianMixtureModels const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussianMixtureModels * >(argp1);
  result = ((GRT::GaussianMixtureModels const *)arg1)->getSigma();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< GRT::MatrixFloat >(static_cast< const GRT::Vector< GRT::MatrixFloat >& >(result))), SWIGTYPE_p_GRT__VectorT_GRT__MatrixFloat_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_getSigma__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussianMixtureModels *arg1 = (GRT::GaussianMixtureModels *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::MatrixFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussianMixtureModels_getSigma",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussianMixtureModels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianMixtureModels_getSigma" "', argument " "1"" of type '" "GRT::GaussianMixtureModels const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussianMixtureModels * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussianMixtureModels_getSigma" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = ((GRT::GaussianMixtureModels const *)arg1)->getSigma(arg2);
  
  {
    npy_intp dims[2]{
      (&result)->getNumRows(), (&result)->getNumCols()
    };
    resultobj = PyArray_SimpleNew(2, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->getNumRows(); ++i) {
      for (size_t j = 0; j < (&result)->getNumCols(); ++j) {
        float* d_ptr = static_cast<float*>(PyArray_GETPTR2(arr_ptr, i, j));
        *d_ptr = result[i][j];
      }
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_getSigma(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GaussianMixtureModels, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GaussianMixtureModels_getSigma__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GaussianMixtureModels, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GaussianMixtureModels_getSigma__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GaussianMixtureModels_getSigma'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GaussianMixtureModels::getSigma() const\n"
    "    GRT::GaussianMixtureModels::getSigma(UINT const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":GaussianMixtureModels_getId")) SWIG_fail;
  result = GRT::GaussianMixtureModels::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_setNumRestarts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussianMixtureModels *arg1 = (GRT::GaussianMixtureModels *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussianMixtureModels_setNumRestarts",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussianMixtureModels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianMixtureModels_setNumRestarts" "', argument " "1"" of type '" "GRT::GaussianMixtureModels *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussianMixtureModels * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussianMixtureModels_setNumRestarts" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNumRestarts(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_saveModelToFile__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussianMixtureModels *arg1 = (GRT::GaussianMixtureModels *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussianMixtureModels_saveModelToFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussianMixtureModels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianMixtureModels_saveModelToFile" "', argument " "1"" of type '" "GRT::GaussianMixtureModels const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussianMixtureModels * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussianMixtureModels_saveModelToFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussianMixtureModels_saveModelToFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::GaussianMixtureModels const *)arg1)->saveModelToFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_saveModelToFile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GaussianMixtureModels, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GaussianMixtureModels_saveModelToFile__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GaussianMixtureModels, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GaussianMixtureModels_saveModelToFile__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GaussianMixtureModels_saveModelToFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GaussianMixtureModels::saveModelToFile(std::fstream &) const\n"
    "    saveModelToFile(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_loadModelFromFile__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussianMixtureModels *arg1 = (GRT::GaussianMixtureModels *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussianMixtureModels_loadModelFromFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussianMixtureModels, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussianMixtureModels_loadModelFromFile" "', argument " "1"" of type '" "GRT::GaussianMixtureModels *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussianMixtureModels * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussianMixtureModels_loadModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussianMixtureModels_loadModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadModelFromFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussianMixtureModels_loadModelFromFile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GaussianMixtureModels, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GaussianMixtureModels_loadModelFromFile__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GaussianMixtureModels, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_GaussianMixtureModels_loadModelFromFile__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GaussianMixtureModels_loadModelFromFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GaussianMixtureModels::loadModelFromFile(std::fstream &)\n"
    "    loadModelFromFile(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *GaussianMixtureModels_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__GaussianMixtureModels, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ClusterInfo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ClusterInfo")) SWIG_fail;
  result = (GRT::ClusterInfo *)new GRT::ClusterInfo();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClusterInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterInfo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterInfo *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ClusterInfo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ClusterInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__ClusterInfo,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterInfo" "', argument " "1"" of type '" "GRT::ClusterInfo const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterInfo" "', argument " "1"" of type '" "GRT::ClusterInfo const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterInfo * >(argp1);
  result = (GRT::ClusterInfo *)new GRT::ClusterInfo((GRT::ClusterInfo const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClusterInfo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterInfo(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ClusterInfo__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__ClusterInfo, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ClusterInfo__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ClusterInfo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClusterInfo::ClusterInfo()\n"
    "    GRT::ClusterInfo::ClusterInfo(GRT::ClusterInfo const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ClusterInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterInfo *arg1 = (GRT::ClusterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ClusterInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterInfo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClusterInfo" "', argument " "1"" of type '" "GRT::ClusterInfo *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterInfo * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterInfo_addSampleToCluster(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterInfo *arg1 = (GRT::ClusterInfo *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterInfo_addSampleToCluster",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterInfo_addSampleToCluster" "', argument " "1"" of type '" "GRT::ClusterInfo *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterInfo * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterInfo_addSampleToCluster" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  (arg1)->addSampleToCluster(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterInfo_getUniqueClusterID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterInfo *arg1 = (GRT::ClusterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterInfo_getUniqueClusterID",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterInfo_getUniqueClusterID" "', argument " "1"" of type '" "GRT::ClusterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterInfo * >(argp1);
  result = ((GRT::ClusterInfo const *)arg1)->getUniqueClusterID();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterInfo_getNumSamplesInCluster(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterInfo *arg1 = (GRT::ClusterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterInfo_getNumSamplesInCluster",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterInfo_getNumSamplesInCluster" "', argument " "1"" of type '" "GRT::ClusterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterInfo * >(argp1);
  result = ((GRT::ClusterInfo const *)arg1)->getNumSamplesInCluster();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterInfo_getClusterVariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterInfo *arg1 = (GRT::ClusterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterInfo_getClusterVariance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterInfo_getClusterVariance" "', argument " "1"" of type '" "GRT::ClusterInfo const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterInfo * >(argp1);
  result = (GRT::Float)((GRT::ClusterInfo const *)arg1)->getClusterVariance();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterInfo_uniqueClusterID_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterInfo *arg1 = (GRT::ClusterInfo *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterInfo_uniqueClusterID_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterInfo_uniqueClusterID_set" "', argument " "1"" of type '" "GRT::ClusterInfo *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterInfo * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterInfo_uniqueClusterID_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->uniqueClusterID = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterInfo_uniqueClusterID_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterInfo *arg1 = (GRT::ClusterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterInfo_uniqueClusterID_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterInfo_uniqueClusterID_get" "', argument " "1"" of type '" "GRT::ClusterInfo *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterInfo * >(argp1);
  result = (unsigned int) ((arg1)->uniqueClusterID);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterInfo_clusterVariance_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterInfo *arg1 = (GRT::ClusterInfo *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterInfo_clusterVariance_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterInfo_clusterVariance_set" "', argument " "1"" of type '" "GRT::ClusterInfo *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterInfo * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterInfo_clusterVariance_set" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  if (arg1) (arg1)->clusterVariance = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterInfo_clusterVariance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterInfo *arg1 = (GRT::ClusterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterInfo_clusterVariance_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterInfo_clusterVariance_get" "', argument " "1"" of type '" "GRT::ClusterInfo *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterInfo * >(argp1);
  result = (GRT::Float) ((arg1)->clusterVariance);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterInfo_indexs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterInfo *arg1 = (GRT::ClusterInfo *) 0 ;
  GRT::Vector< UINT > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterInfo_indexs_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterInfo_indexs_set" "', argument " "1"" of type '" "GRT::ClusterInfo *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterInfo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_UINT_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterInfo_indexs_set" "', argument " "2"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterInfo_indexs_set" "', argument " "2"" of type '" "GRT::Vector< UINT > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< UINT > * >(argp2);
  if (arg1) (arg1)->indexs = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterInfo_indexs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterInfo *arg1 = (GRT::ClusterInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< UINT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterInfo_indexs_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterInfo_indexs_get" "', argument " "1"" of type '" "GRT::ClusterInfo *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterInfo * >(argp1);
  result = (GRT::Vector< UINT > *) & ((arg1)->indexs);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorT_UINT_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ClusterInfo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__ClusterInfo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ClusterLevel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterLevel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ClusterLevel")) SWIG_fail;
  result = (GRT::ClusterLevel *)new GRT::ClusterLevel();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClusterLevel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterLevel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterLevel *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::ClusterLevel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ClusterLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__ClusterLevel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClusterLevel" "', argument " "1"" of type '" "GRT::ClusterLevel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClusterLevel" "', argument " "1"" of type '" "GRT::ClusterLevel const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterLevel * >(argp1);
  result = (GRT::ClusterLevel *)new GRT::ClusterLevel((GRT::ClusterLevel const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__ClusterLevel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClusterLevel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ClusterLevel__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__ClusterLevel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ClusterLevel__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ClusterLevel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::ClusterLevel::ClusterLevel()\n"
    "    GRT::ClusterLevel::ClusterLevel(GRT::ClusterLevel const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ClusterLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterLevel *arg1 = (GRT::ClusterLevel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ClusterLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterLevel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClusterLevel" "', argument " "1"" of type '" "GRT::ClusterLevel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterLevel * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterLevel_getLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterLevel *arg1 = (GRT::ClusterLevel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterLevel_getLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterLevel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterLevel_getLevel" "', argument " "1"" of type '" "GRT::ClusterLevel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterLevel * >(argp1);
  result = ((GRT::ClusterLevel const *)arg1)->getLevel();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterLevel_getNumClusters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterLevel *arg1 = (GRT::ClusterLevel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterLevel_getNumClusters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterLevel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterLevel_getNumClusters" "', argument " "1"" of type '" "GRT::ClusterLevel const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterLevel * >(argp1);
  result = ((GRT::ClusterLevel const *)arg1)->getNumClusters();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterLevel_level_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterLevel *arg1 = (GRT::ClusterLevel *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterLevel_level_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterLevel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterLevel_level_set" "', argument " "1"" of type '" "GRT::ClusterLevel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterLevel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClusterLevel_level_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->level = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterLevel_level_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterLevel *arg1 = (GRT::ClusterLevel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterLevel_level_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterLevel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterLevel_level_get" "', argument " "1"" of type '" "GRT::ClusterLevel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterLevel * >(argp1);
  result = (unsigned int) ((arg1)->level);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterLevel_clusters_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterLevel *arg1 = (GRT::ClusterLevel *) 0 ;
  GRT::Vector< GRT::ClusterInfo > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ClusterLevel_clusters_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterLevel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterLevel_clusters_set" "', argument " "1"" of type '" "GRT::ClusterLevel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterLevel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorT_GRT__ClusterInfo_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ClusterLevel_clusters_set" "', argument " "2"" of type '" "GRT::Vector< GRT::ClusterInfo > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ClusterLevel_clusters_set" "', argument " "2"" of type '" "GRT::Vector< GRT::ClusterInfo > const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::Vector< GRT::ClusterInfo > * >(argp2);
  if (arg1) (arg1)->clusters = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClusterLevel_clusters_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::ClusterLevel *arg1 = (GRT::ClusterLevel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< GRT::ClusterInfo > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ClusterLevel_clusters_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__ClusterLevel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClusterLevel_clusters_get" "', argument " "1"" of type '" "GRT::ClusterLevel *""'"); 
  }
  arg1 = reinterpret_cast< GRT::ClusterLevel * >(argp1);
  result = (GRT::Vector< GRT::ClusterInfo > *) & ((arg1)->clusters);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorT_GRT__ClusterInfo_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ClusterLevel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__ClusterLevel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_HierarchicalClustering__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HierarchicalClustering *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_HierarchicalClustering")) SWIG_fail;
  result = (GRT::HierarchicalClustering *)new GRT::HierarchicalClustering();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__HierarchicalClustering, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HierarchicalClustering__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HierarchicalClustering *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::HierarchicalClustering *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_HierarchicalClustering",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__HierarchicalClustering,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HierarchicalClustering" "', argument " "1"" of type '" "GRT::HierarchicalClustering const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HierarchicalClustering" "', argument " "1"" of type '" "GRT::HierarchicalClustering const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::HierarchicalClustering * >(argp1);
  result = (GRT::HierarchicalClustering *)new GRT::HierarchicalClustering((GRT::HierarchicalClustering const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__HierarchicalClustering, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HierarchicalClustering(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_HierarchicalClustering__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__HierarchicalClustering, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HierarchicalClustering__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_HierarchicalClustering'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::HierarchicalClustering::HierarchicalClustering()\n"
    "    GRT::HierarchicalClustering::HierarchicalClustering(GRT::HierarchicalClustering const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_HierarchicalClustering(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HierarchicalClustering *arg1 = (GRT::HierarchicalClustering *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HierarchicalClustering",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HierarchicalClustering, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HierarchicalClustering" "', argument " "1"" of type '" "GRT::HierarchicalClustering *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HierarchicalClustering * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HierarchicalClustering_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HierarchicalClustering *arg1 = (GRT::HierarchicalClustering *) 0 ;
  GRT::Clusterer *arg2 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HierarchicalClustering_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HierarchicalClustering, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HierarchicalClustering_deepCopyFrom" "', argument " "1"" of type '" "GRT::HierarchicalClustering *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HierarchicalClustering * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HierarchicalClustering_deepCopyFrom" "', argument " "2"" of type '" "GRT::Clusterer const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Clusterer * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Clusterer const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HierarchicalClustering_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HierarchicalClustering *arg1 = (GRT::HierarchicalClustering *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HierarchicalClustering_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HierarchicalClustering, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HierarchicalClustering_reset" "', argument " "1"" of type '" "GRT::HierarchicalClustering *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HierarchicalClustering * >(argp1);
  result = (bool)(arg1)->reset();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HierarchicalClustering_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HierarchicalClustering *arg1 = (GRT::HierarchicalClustering *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HierarchicalClustering_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HierarchicalClustering, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HierarchicalClustering_clear" "', argument " "1"" of type '" "GRT::HierarchicalClustering *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HierarchicalClustering * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HierarchicalClustering_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HierarchicalClustering *arg1 = (GRT::HierarchicalClustering *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HierarchicalClustering_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HierarchicalClustering, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HierarchicalClustering_train_" "', argument " "1"" of type '" "GRT::HierarchicalClustering *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HierarchicalClustering * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HierarchicalClustering_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HierarchicalClustering_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HierarchicalClustering_train___SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HierarchicalClustering *arg1 = (GRT::HierarchicalClustering *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HierarchicalClustering_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HierarchicalClustering, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HierarchicalClustering_train_" "', argument " "1"" of type '" "GRT::HierarchicalClustering *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HierarchicalClustering * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HierarchicalClustering_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HierarchicalClustering_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HierarchicalClustering_train___SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HierarchicalClustering *arg1 = (GRT::HierarchicalClustering *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HierarchicalClustering_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HierarchicalClustering, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HierarchicalClustering_train_" "', argument " "1"" of type '" "GRT::HierarchicalClustering *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HierarchicalClustering * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HierarchicalClustering_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HierarchicalClustering_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HierarchicalClustering_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HierarchicalClustering, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HierarchicalClustering_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HierarchicalClustering, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HierarchicalClustering_train___SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HierarchicalClustering, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HierarchicalClustering_train___SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'HierarchicalClustering_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::HierarchicalClustering::train_(GRT::MatrixFloat &)\n"
    "    GRT::HierarchicalClustering::train_(GRT::ClassificationData &)\n"
    "    GRT::HierarchicalClustering::train_(GRT::UnlabelledData &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HierarchicalClustering_saveModelToFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HierarchicalClustering *arg1 = (GRT::HierarchicalClustering *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HierarchicalClustering_saveModelToFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HierarchicalClustering, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HierarchicalClustering_saveModelToFile" "', argument " "1"" of type '" "GRT::HierarchicalClustering const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HierarchicalClustering * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HierarchicalClustering_saveModelToFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HierarchicalClustering_saveModelToFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::HierarchicalClustering const *)arg1)->saveModelToFile(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HierarchicalClustering_loadModelFromFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HierarchicalClustering *arg1 = (GRT::HierarchicalClustering *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HierarchicalClustering_loadModelFromFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HierarchicalClustering, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HierarchicalClustering_loadModelFromFile" "', argument " "1"" of type '" "GRT::HierarchicalClustering *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HierarchicalClustering * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HierarchicalClustering_loadModelFromFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HierarchicalClustering_loadModelFromFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->loadModelFromFile(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HierarchicalClustering_printModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HierarchicalClustering *arg1 = (GRT::HierarchicalClustering *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HierarchicalClustering_printModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HierarchicalClustering, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HierarchicalClustering_printModel" "', argument " "1"" of type '" "GRT::HierarchicalClustering *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HierarchicalClustering * >(argp1);
  result = (bool)(arg1)->printModel();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HierarchicalClustering_getClusters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HierarchicalClustering *arg1 = (GRT::HierarchicalClustering *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Vector< GRT::ClusterLevel > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HierarchicalClustering_getClusters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HierarchicalClustering, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HierarchicalClustering_getClusters" "', argument " "1"" of type '" "GRT::HierarchicalClustering *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HierarchicalClustering * >(argp1);
  result = (arg1)->getClusters();
  resultobj = SWIG_NewPointerObj((new GRT::Vector< GRT::ClusterLevel >(static_cast< const GRT::Vector< GRT::ClusterLevel >& >(result))), SWIGTYPE_p_GRT__VectorT_GRT__ClusterLevel_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HierarchicalClustering_saveModelToFile__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HierarchicalClustering *arg1 = (GRT::HierarchicalClustering *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HierarchicalClustering_saveModelToFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HierarchicalClustering, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HierarchicalClustering_saveModelToFile" "', argument " "1"" of type '" "GRT::HierarchicalClustering const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HierarchicalClustering * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HierarchicalClustering_saveModelToFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HierarchicalClustering_saveModelToFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::HierarchicalClustering const *)arg1)->saveModelToFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HierarchicalClustering_saveModelToFile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HierarchicalClustering, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HierarchicalClustering_saveModelToFile__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HierarchicalClustering, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HierarchicalClustering_saveModelToFile__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'HierarchicalClustering_saveModelToFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::HierarchicalClustering::saveModelToFile(std::fstream &) const\n"
    "    saveModelToFile(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HierarchicalClustering_loadModelFromFile__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::HierarchicalClustering *arg1 = (GRT::HierarchicalClustering *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HierarchicalClustering_loadModelFromFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__HierarchicalClustering, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HierarchicalClustering_loadModelFromFile" "', argument " "1"" of type '" "GRT::HierarchicalClustering *""'"); 
  }
  arg1 = reinterpret_cast< GRT::HierarchicalClustering * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HierarchicalClustering_loadModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HierarchicalClustering_loadModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadModelFromFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HierarchicalClustering_loadModelFromFile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HierarchicalClustering, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HierarchicalClustering_loadModelFromFile__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__HierarchicalClustering, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HierarchicalClustering_loadModelFromFile__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'HierarchicalClustering_loadModelFromFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::HierarchicalClustering::loadModelFromFile(std::fstream &)\n"
    "    loadModelFromFile(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HierarchicalClustering_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":HierarchicalClustering_getId")) SWIG_fail;
  result = GRT::HierarchicalClustering::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HierarchicalClustering_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__HierarchicalClustering, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_KMeans__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  GRT::Float arg4 ;
  bool arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::KMeans *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_KMeans",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KMeans" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_KMeans" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_KMeans" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_KMeans" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_KMeans" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (GRT::KMeans *)new GRT::KMeans(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__KMeans, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KMeans__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  GRT::Float arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::KMeans *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_KMeans",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KMeans" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_KMeans" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_KMeans" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_KMeans" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = (GRT::KMeans *)new GRT::KMeans(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__KMeans, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KMeans__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::KMeans *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_KMeans",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KMeans" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_KMeans" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_KMeans" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (GRT::KMeans *)new GRT::KMeans(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__KMeans, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KMeans__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::KMeans *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_KMeans",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KMeans" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_KMeans" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (GRT::KMeans *)new GRT::KMeans(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__KMeans, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KMeans__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::KMeans *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KMeans",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KMeans" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  result = (GRT::KMeans *)new GRT::KMeans(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__KMeans, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KMeans__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_KMeans")) SWIG_fail;
  result = (GRT::KMeans *)new GRT::KMeans();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__KMeans, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KMeans__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::KMeans *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KMeans",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__KMeans,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KMeans" "', argument " "1"" of type '" "GRT::KMeans const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KMeans" "', argument " "1"" of type '" "GRT::KMeans const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  result = (GRT::KMeans *)new GRT::KMeans((GRT::KMeans const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__KMeans, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KMeans(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_KMeans__SWIG_5(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_KMeans__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_KMeans__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_KMeans__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_KMeans__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_KMeans__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_KMeans__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_KMeans'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::KMeans::KMeans(UINT const,UINT const,UINT const,GRT::Float const,bool const)\n"
    "    GRT::KMeans::KMeans(UINT const,UINT const,UINT const,GRT::Float const)\n"
    "    GRT::KMeans::KMeans(UINT const,UINT const,UINT const)\n"
    "    GRT::KMeans::KMeans(UINT const,UINT const)\n"
    "    GRT::KMeans::KMeans(UINT const)\n"
    "    GRT::KMeans::KMeans()\n"
    "    GRT::KMeans::KMeans(GRT::KMeans const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_KMeans(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_KMeans",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KMeans" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::Clusterer *arg2 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_deepCopyFrom" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_deepCopyFrom" "', argument " "2"" of type '" "GRT::Clusterer const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Clusterer * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Clusterer const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KMeans_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_reset" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  result = (bool)(arg1)->reset();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KMeans_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_clear" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_trainModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_trainModel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_trainModel" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_trainModel" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_trainModel" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->trainModel(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_train_" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_train___SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_train_" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_train___SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_train_" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_predict___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_predict_" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_saveModelToFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_saveModelToFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_saveModelToFile" "', argument " "1"" of type '" "GRT::KMeans const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_saveModelToFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_saveModelToFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::KMeans const *)arg1)->saveModelToFile(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_loadModelFromFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_loadModelFromFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_loadModelFromFile" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_loadModelFromFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_loadModelFromFile" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->loadModelFromFile(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_getTheta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KMeans_getTheta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_getTheta" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  result = (GRT::Float)(arg1)->getTheta();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_getModelTrained(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KMeans_getModelTrained",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_getModelTrained" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  result = (bool)(arg1)->getModelTrained();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_getTrainingThetaLog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KMeans_getTrainingThetaLog",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_getTrainingThetaLog" "', argument " "1"" of type '" "GRT::KMeans const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  result = (GRT::VectorFloat *) &((GRT::KMeans const *)arg1)->getTrainingThetaLog();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_getClusters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KMeans_getClusters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_getClusters" "', argument " "1"" of type '" "GRT::KMeans const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  result = (GRT::MatrixFloat *) &((GRT::KMeans const *)arg1)->getClusters();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_getClassLabelsVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< UINT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KMeans_getClassLabelsVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_getClassLabelsVector" "', argument " "1"" of type '" "GRT::KMeans const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  result = (GRT::Vector< UINT > *) &((GRT::KMeans const *)arg1)->getClassLabelsVector();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorT_UINT_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_getClassCountVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Vector< UINT > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KMeans_getClassCountVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_getClassCountVector" "', argument " "1"" of type '" "GRT::KMeans const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  result = (GRT::Vector< UINT > *) &((GRT::KMeans const *)arg1)->getClassCountVector();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorT_UINT_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_setComputeTheta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_setComputeTheta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_setComputeTheta" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KMeans_setComputeTheta" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->setComputeTheta(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_setClusters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_setClusters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_setClusters" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_setClusters" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_setClusters" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->setClusters((GRT::MatrixFloat const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_saveModelToFile__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_saveModelToFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_saveModelToFile" "', argument " "1"" of type '" "GRT::KMeans const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_saveModelToFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_saveModelToFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::KMeans const *)arg1)->saveModelToFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_saveModelToFile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_saveModelToFile__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_saveModelToFile__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KMeans_saveModelToFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::KMeans::saveModelToFile(std::fstream &) const\n"
    "    saveModelToFile(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KMeans_loadModelFromFile__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_loadModelFromFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_loadModelFromFile" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_loadModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_loadModelFromFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->loadModelFromFile((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_loadModelFromFile(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_loadModelFromFile__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_loadModelFromFile__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KMeans_loadModelFromFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::KMeans::loadModelFromFile(std::fstream &)\n"
    "    loadModelFromFile(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KMeans_train_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::ClassificationData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_train" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_train" "', argument " "2"" of type '" "GRT::ClassificationData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_train" "', argument " "2"" of type '" "GRT::ClassificationData""'");
    } else {
      GRT::ClassificationData * temp = reinterpret_cast< GRT::ClassificationData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_train_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::RegressionData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_train" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_train" "', argument " "2"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_train" "', argument " "2"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_train_SWIG_0_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::RegressionData arg2 ;
  GRT::RegressionData arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:KMeans_train",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_train" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_train" "', argument " "2"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_train" "', argument " "2"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KMeans_train" "', argument " "3"" of type '" "GRT::RegressionData""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_train" "', argument " "3"" of type '" "GRT::RegressionData""'");
    } else {
      GRT::RegressionData * temp = reinterpret_cast< GRT::RegressionData * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_train_SWIG_0_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::TimeSeriesClassificationData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_train" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_train" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData""'");
    } else {
      GRT::TimeSeriesClassificationData * temp = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_train_SWIG_0_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::ClassificationDataStream arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_train" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_train" "', argument " "2"" of type '" "GRT::ClassificationDataStream""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_train" "', argument " "2"" of type '" "GRT::ClassificationDataStream""'");
    } else {
      GRT::ClassificationDataStream * temp = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_train_SWIG_0_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::UnlabelledData arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_train" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_train" "', argument " "2"" of type '" "GRT::UnlabelledData""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_train" "', argument " "2"" of type '" "GRT::UnlabelledData""'");
    } else {
      GRT::UnlabelledData * temp = reinterpret_cast< GRT::UnlabelledData * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_train_SWIG_0_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::MatrixFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_train",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_train" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_train" "', argument " "2"" of type '" "GRT::MatrixFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_train" "', argument " "2"" of type '" "GRT::MatrixFloat""'");
    } else {
      GRT::MatrixFloat * temp = reinterpret_cast< GRT::MatrixFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->train(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_train(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_train_SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_train_SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_train_SWIG_0_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_train_SWIG_0_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_train_SWIG_0_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_train_SWIG_0_6(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_KMeans_train_SWIG_0_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KMeans_train'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    train(GRT::ClassificationData)\n"
    "    train(GRT::RegressionData)\n"
    "    train(GRT::RegressionData,GRT::RegressionData)\n"
    "    train(GRT::TimeSeriesClassificationData)\n"
    "    train(GRT::ClassificationDataStream)\n"
    "    train(GRT::UnlabelledData)\n"
    "    train(GRT::MatrixFloat)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KMeans_train___SWIG_3_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_train_" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_train___SWIG_3_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  GRT::RegressionData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:KMeans_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_train_" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KMeans_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  arg3 = reinterpret_cast< GRT::RegressionData * >(argp3);
  result = (bool)(arg1)->train_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_train___SWIG_3_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_train_" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_train___SWIG_3_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_train_" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_train___SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_train___SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_train___SWIG_3_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_train___SWIG_3_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_train___SWIG_3_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_KMeans_train___SWIG_3_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KMeans_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::KMeans::train_(GRT::MatrixFloat &)\n"
    "    GRT::KMeans::train_(GRT::ClassificationData &)\n"
    "    GRT::KMeans::train_(GRT::UnlabelledData &)\n"
    "    train_(GRT::RegressionData &)\n"
    "    train_(GRT::RegressionData &,GRT::RegressionData &)\n"
    "    train_(GRT::TimeSeriesClassificationData &)\n"
    "    train_(GRT::ClassificationDataStream &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KMeans_predict_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::VectorFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_predict" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_predict" "', argument " "2"" of type '" "GRT::VectorFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_predict" "', argument " "2"" of type '" "GRT::VectorFloat""'");
    } else {
      GRT::VectorFloat * temp = reinterpret_cast< GRT::VectorFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->predict(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_predict_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::MatrixFloat arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_predict" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_predict" "', argument " "2"" of type '" "GRT::MatrixFloat""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_predict" "', argument " "2"" of type '" "GRT::MatrixFloat""'");
    } else {
      GRT::MatrixFloat * temp = reinterpret_cast< GRT::MatrixFloat * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)(arg1)->predict(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_predict(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_predict_SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_predict_SWIG_0_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KMeans_predict'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    predict(GRT::VectorFloat)\n"
    "    predict(GRT::MatrixFloat)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KMeans_predict___SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeans *arg1 = (GRT::KMeans *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeans_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeans, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeans_predict_" "', argument " "1"" of type '" "GRT::KMeans *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeans * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeans_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeans_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeans_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_predict___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeans, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeans_predict___SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KMeans_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::KMeans::predict_(GRT::VectorFloat &)\n"
    "    predict_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KMeans_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":KMeans_getId")) SWIG_fail;
  result = GRT::KMeans::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *KMeans_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__KMeans, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GaussNeuron(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GaussNeuron")) SWIG_fail;
  result = (GRT::GaussNeuron *)new GRT::GaussNeuron();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__GaussNeuron, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GaussNeuron(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GaussNeuron",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GaussNeuron" "', argument " "1"" of type '" "GRT::GaussNeuron *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_init__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  UINT arg2 ;
  GRT::Float arg3 ;
  GRT::Float arg4 ;
  GRT::Float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GaussNeuron_init",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussNeuron_init" "', argument " "1"" of type '" "GRT::GaussNeuron *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussNeuron_init" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GaussNeuron_init" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GaussNeuron_init" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GaussNeuron_init" "', argument " "5"" of type '" "GRT::Float""'");
  } 
  arg5 = static_cast< GRT::Float >(val5);
  result = (bool)(arg1)->init(arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_init__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  UINT arg2 ;
  GRT::Float arg3 ;
  GRT::Float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:GaussNeuron_init",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussNeuron_init" "', argument " "1"" of type '" "GRT::GaussNeuron *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussNeuron_init" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GaussNeuron_init" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GaussNeuron_init" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = (bool)(arg1)->init(arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_init__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  UINT arg2 ;
  GRT::Float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GaussNeuron_init",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussNeuron_init" "', argument " "1"" of type '" "GRT::GaussNeuron *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussNeuron_init" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GaussNeuron_init" "', argument " "3"" of type '" "GRT::Float""'");
  } 
  arg3 = static_cast< GRT::Float >(val3);
  result = (bool)(arg1)->init(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_init__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussNeuron_init",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussNeuron_init" "', argument " "1"" of type '" "GRT::GaussNeuron *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussNeuron_init" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->init(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_init(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GaussNeuron, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GaussNeuron_init__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GaussNeuron, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_GaussNeuron_init__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GaussNeuron, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_GaussNeuron_init__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__GaussNeuron, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_GaussNeuron_init__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'GaussNeuron_init'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::GaussNeuron::init(UINT const,GRT::Float const,GRT::Float const,GRT::Float const)\n"
    "    GRT::GaussNeuron::init(UINT const,GRT::Float const,GRT::Float const)\n"
    "    GRT::GaussNeuron::init(UINT const,GRT::Float const)\n"
    "    GRT::GaussNeuron::init(UINT const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GaussNeuron_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussNeuron_clear" "', argument " "1"" of type '" "GRT::GaussNeuron *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_getInitialized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GaussNeuron_getInitialized",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussNeuron_getInitialized" "', argument " "1"" of type '" "GRT::GaussNeuron const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  result = (bool)((GRT::GaussNeuron const *)arg1)->getInitialized();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_getWeightDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussNeuron_getWeightDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussNeuron_getWeightDistance" "', argument " "1"" of type '" "GRT::GaussNeuron const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussNeuron_getWeightDistance" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussNeuron_getWeightDistance" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (GRT::Float)((GRT::GaussNeuron const *)arg1)->getWeightDistance((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_getSquaredWeightDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussNeuron_getSquaredWeightDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussNeuron_getSquaredWeightDistance" "', argument " "1"" of type '" "GRT::GaussNeuron const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussNeuron_getSquaredWeightDistance" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussNeuron_getSquaredWeightDistance" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (GRT::Float)((GRT::GaussNeuron const *)arg1)->getSquaredWeightDistance((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_fire(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussNeuron_fire",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussNeuron_fire" "', argument " "1"" of type '" "GRT::GaussNeuron const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussNeuron_fire" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussNeuron_fire" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (GRT::Float)((GRT::GaussNeuron const *)arg1)->fire((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_save(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussNeuron_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussNeuron_save" "', argument " "1"" of type '" "GRT::GaussNeuron const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussNeuron_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussNeuron_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::GaussNeuron const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_load(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussNeuron_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussNeuron_load" "', argument " "1"" of type '" "GRT::GaussNeuron *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussNeuron_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussNeuron_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_numInputs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussNeuron_numInputs_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussNeuron_numInputs_set" "', argument " "1"" of type '" "GRT::GaussNeuron *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussNeuron_numInputs_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  if (arg1) (arg1)->numInputs = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_numInputs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GaussNeuron_numInputs_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussNeuron_numInputs_get" "', argument " "1"" of type '" "GRT::GaussNeuron *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  result =  ((arg1)->numInputs);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_weights_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussNeuron_weights_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussNeuron_weights_set" "', argument " "1"" of type '" "GRT::GaussNeuron *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GaussNeuron_weights_set" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GaussNeuron_weights_set" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  if (arg1) (arg1)->weights = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_weights_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GaussNeuron_weights_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussNeuron_weights_get" "', argument " "1"" of type '" "GRT::GaussNeuron *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  result = (GRT::VectorFloat *) & ((arg1)->weights);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_sigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussNeuron_sigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussNeuron_sigma_set" "', argument " "1"" of type '" "GRT::GaussNeuron *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussNeuron_sigma_set" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  if (arg1) (arg1)->sigma = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_sigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GaussNeuron_sigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussNeuron_sigma_get" "', argument " "1"" of type '" "GRT::GaussNeuron *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  result = (GRT::Float) ((arg1)->sigma);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_initialized_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GaussNeuron_initialized_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussNeuron_initialized_set" "', argument " "1"" of type '" "GRT::GaussNeuron *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GaussNeuron_initialized_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->initialized = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GaussNeuron_initialized_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::GaussNeuron *arg1 = (GRT::GaussNeuron *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GaussNeuron_initialized_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__GaussNeuron, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GaussNeuron_initialized_get" "', argument " "1"" of type '" "GRT::GaussNeuron *""'"); 
  }
  arg1 = reinterpret_cast< GRT::GaussNeuron * >(argp1);
  result = (bool) ((arg1)->initialized);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GaussNeuron_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__GaussNeuron, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SelfOrganizingMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  GRT::Float arg4 ;
  GRT::Float arg5 ;
  GRT::Float arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  GRT::SelfOrganizingMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_SelfOrganizingMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SelfOrganizingMap" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SelfOrganizingMap" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SelfOrganizingMap" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SelfOrganizingMap" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SelfOrganizingMap" "', argument " "5"" of type '" "GRT::Float""'");
  } 
  arg5 = static_cast< GRT::Float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_SelfOrganizingMap" "', argument " "6"" of type '" "GRT::Float""'");
  } 
  arg6 = static_cast< GRT::Float >(val6);
  result = (GRT::SelfOrganizingMap *)new GRT::SelfOrganizingMap(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SelfOrganizingMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SelfOrganizingMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  GRT::Float arg4 ;
  GRT::Float arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GRT::SelfOrganizingMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_SelfOrganizingMap",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SelfOrganizingMap" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SelfOrganizingMap" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SelfOrganizingMap" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SelfOrganizingMap" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_SelfOrganizingMap" "', argument " "5"" of type '" "GRT::Float""'");
  } 
  arg5 = static_cast< GRT::Float >(val5);
  result = (GRT::SelfOrganizingMap *)new GRT::SelfOrganizingMap(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SelfOrganizingMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SelfOrganizingMap__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  GRT::Float arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GRT::SelfOrganizingMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_SelfOrganizingMap",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SelfOrganizingMap" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SelfOrganizingMap" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SelfOrganizingMap" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_SelfOrganizingMap" "', argument " "4"" of type '" "GRT::Float""'");
  } 
  arg4 = static_cast< GRT::Float >(val4);
  result = (GRT::SelfOrganizingMap *)new GRT::SelfOrganizingMap(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SelfOrganizingMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SelfOrganizingMap__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GRT::SelfOrganizingMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SelfOrganizingMap",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SelfOrganizingMap" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SelfOrganizingMap" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SelfOrganizingMap" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);
  result = (GRT::SelfOrganizingMap *)new GRT::SelfOrganizingMap(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SelfOrganizingMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SelfOrganizingMap__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  UINT arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::SelfOrganizingMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SelfOrganizingMap",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SelfOrganizingMap" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SelfOrganizingMap" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (GRT::SelfOrganizingMap *)new GRT::SelfOrganizingMap(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SelfOrganizingMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SelfOrganizingMap__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::SelfOrganizingMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SelfOrganizingMap",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SelfOrganizingMap" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  result = (GRT::SelfOrganizingMap *)new GRT::SelfOrganizingMap(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SelfOrganizingMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SelfOrganizingMap__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SelfOrganizingMap")) SWIG_fail;
  result = (GRT::SelfOrganizingMap *)new GRT::SelfOrganizingMap();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SelfOrganizingMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SelfOrganizingMap__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::SelfOrganizingMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SelfOrganizingMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__SelfOrganizingMap,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SelfOrganizingMap" "', argument " "1"" of type '" "GRT::SelfOrganizingMap const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SelfOrganizingMap" "', argument " "1"" of type '" "GRT::SelfOrganizingMap const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  result = (GRT::SelfOrganizingMap *)new GRT::SelfOrganizingMap((GRT::SelfOrganizingMap const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__SelfOrganizingMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SelfOrganizingMap(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SelfOrganizingMap__SWIG_6(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__SelfOrganizingMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SelfOrganizingMap__SWIG_7(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SelfOrganizingMap__SWIG_5(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SelfOrganizingMap__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_SelfOrganizingMap__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_SelfOrganizingMap__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_SelfOrganizingMap__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_float(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_SelfOrganizingMap__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SelfOrganizingMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::SelfOrganizingMap::SelfOrganizingMap(UINT const,UINT const,UINT const,GRT::Float const,GRT::Float const,GRT::Float const)\n"
    "    GRT::SelfOrganizingMap::SelfOrganizingMap(UINT const,UINT const,UINT const,GRT::Float const,GRT::Float const)\n"
    "    GRT::SelfOrganizingMap::SelfOrganizingMap(UINT const,UINT const,UINT const,GRT::Float const)\n"
    "    GRT::SelfOrganizingMap::SelfOrganizingMap(UINT const,UINT const,UINT const)\n"
    "    GRT::SelfOrganizingMap::SelfOrganizingMap(UINT const,UINT const)\n"
    "    GRT::SelfOrganizingMap::SelfOrganizingMap(UINT const)\n"
    "    GRT::SelfOrganizingMap::SelfOrganizingMap()\n"
    "    GRT::SelfOrganizingMap::SelfOrganizingMap(GRT::SelfOrganizingMap const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SelfOrganizingMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SelfOrganizingMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SelfOrganizingMap" "', argument " "1"" of type '" "GRT::SelfOrganizingMap *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  GRT::Clusterer *arg2 = (GRT::Clusterer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelfOrganizingMap_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_deepCopyFrom" "', argument " "1"" of type '" "GRT::SelfOrganizingMap *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__Clusterer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SelfOrganizingMap_deepCopyFrom" "', argument " "2"" of type '" "GRT::Clusterer const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::Clusterer * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::Clusterer const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelfOrganizingMap_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_reset" "', argument " "1"" of type '" "GRT::SelfOrganizingMap *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  result = (bool)(arg1)->reset();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelfOrganizingMap_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_clear" "', argument " "1"" of type '" "GRT::SelfOrganizingMap *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelfOrganizingMap_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_train_" "', argument " "1"" of type '" "GRT::SelfOrganizingMap *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SelfOrganizingMap_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SelfOrganizingMap_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_train___SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelfOrganizingMap_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_train_" "', argument " "1"" of type '" "GRT::SelfOrganizingMap *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SelfOrganizingMap_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SelfOrganizingMap_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_train___SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelfOrganizingMap_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_train_" "', argument " "1"" of type '" "GRT::SelfOrganizingMap *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SelfOrganizingMap_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SelfOrganizingMap_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SelfOrganizingMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SelfOrganizingMap_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SelfOrganizingMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SelfOrganizingMap_train___SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SelfOrganizingMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SelfOrganizingMap_train___SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SelfOrganizingMap_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::SelfOrganizingMap::train_(GRT::MatrixFloat &)\n"
    "    GRT::SelfOrganizingMap::train_(GRT::ClassificationData &)\n"
    "    GRT::SelfOrganizingMap::train_(GRT::UnlabelledData &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_map_(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelfOrganizingMap_map_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_map_" "', argument " "1"" of type '" "GRT::SelfOrganizingMap *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SelfOrganizingMap_map_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SelfOrganizingMap_map_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->map_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelfOrganizingMap_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_save" "', argument " "1"" of type '" "GRT::SelfOrganizingMap const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SelfOrganizingMap_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SelfOrganizingMap_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::SelfOrganizingMap const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelfOrganizingMap_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_load" "', argument " "1"" of type '" "GRT::SelfOrganizingMap *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SelfOrganizingMap_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SelfOrganizingMap_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_validateNetworkTypology(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelfOrganizingMap_validateNetworkTypology",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_validateNetworkTypology" "', argument " "1"" of type '" "GRT::SelfOrganizingMap *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelfOrganizingMap_validateNetworkTypology" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->validateNetworkTypology(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_getNetworkSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelfOrganizingMap_getNetworkSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_getNetworkSize" "', argument " "1"" of type '" "GRT::SelfOrganizingMap const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  result = ((GRT::SelfOrganizingMap const *)arg1)->getNetworkSize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_getAlphaStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelfOrganizingMap_getAlphaStart",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_getAlphaStart" "', argument " "1"" of type '" "GRT::SelfOrganizingMap const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  result = (GRT::Float)((GRT::SelfOrganizingMap const *)arg1)->getAlphaStart();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_getAlphaEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelfOrganizingMap_getAlphaEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_getAlphaEnd" "', argument " "1"" of type '" "GRT::SelfOrganizingMap const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  result = (GRT::Float)((GRT::SelfOrganizingMap const *)arg1)->getAlphaEnd();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_getMappedData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelfOrganizingMap_getMappedData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_getMappedData" "', argument " "1"" of type '" "GRT::SelfOrganizingMap const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  result = ((GRT::SelfOrganizingMap const *)arg1)->getMappedData();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_getNeurons(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Matrix< GRT::GaussNeuron > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelfOrganizingMap_getNeurons",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_getNeurons" "', argument " "1"" of type '" "GRT::SelfOrganizingMap const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  result = ((GRT::SelfOrganizingMap const *)arg1)->getNeurons();
  resultobj = SWIG_NewPointerObj((new GRT::Matrix< GRT::GaussNeuron >(static_cast< const GRT::Matrix< GRT::GaussNeuron >& >(result))), SWIGTYPE_p_GRT__MatrixT_GRT__GaussNeuron_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_getNeuronsRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::Matrix< GRT::GaussNeuron > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelfOrganizingMap_getNeuronsRef",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_getNeuronsRef" "', argument " "1"" of type '" "GRT::SelfOrganizingMap const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  result = (GRT::Matrix< GRT::GaussNeuron > *) &((GRT::SelfOrganizingMap const *)arg1)->getNeuronsRef();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixT_GRT__GaussNeuron_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_getWeightsMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< GRT::Matrix< GRT::VectorFloat > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SelfOrganizingMap_getWeightsMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_getWeightsMatrix" "', argument " "1"" of type '" "GRT::SelfOrganizingMap const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  result = ((GRT::SelfOrganizingMap const *)arg1)->getWeightsMatrix();
  resultobj = SWIG_NewPointerObj((new GRT::Matrix< GRT::VectorFloat >(static_cast< const GRT::Matrix< GRT::VectorFloat >& >(result))), SWIGTYPE_p_GRT__MatrixT_GRT__VectorFloat_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_setNetworkSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelfOrganizingMap_setNetworkSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_setNetworkSize" "', argument " "1"" of type '" "GRT::SelfOrganizingMap *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelfOrganizingMap_setNetworkSize" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNetworkSize(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_setNetworkTypology(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelfOrganizingMap_setNetworkTypology",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_setNetworkTypology" "', argument " "1"" of type '" "GRT::SelfOrganizingMap *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelfOrganizingMap_setNetworkTypology" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNetworkTypology(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_setAlphaStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelfOrganizingMap_setAlphaStart",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_setAlphaStart" "', argument " "1"" of type '" "GRT::SelfOrganizingMap *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelfOrganizingMap_setAlphaStart" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setAlphaStart(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_setAlphaEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelfOrganizingMap_setAlphaEnd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_setAlphaEnd" "', argument " "1"" of type '" "GRT::SelfOrganizingMap *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelfOrganizingMap_setAlphaEnd" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setAlphaEnd(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_setSigmaWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelfOrganizingMap_setSigmaWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_setSigmaWeight" "', argument " "1"" of type '" "GRT::SelfOrganizingMap *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SelfOrganizingMap_setSigmaWeight" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (bool)(arg1)->setSigmaWeight(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_save__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelfOrganizingMap_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_save" "', argument " "1"" of type '" "GRT::SelfOrganizingMap const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SelfOrganizingMap_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SelfOrganizingMap_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::SelfOrganizingMap const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SelfOrganizingMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SelfOrganizingMap_save__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SelfOrganizingMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SelfOrganizingMap_save__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SelfOrganizingMap_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::SelfOrganizingMap::save(std::fstream &) const\n"
    "    save(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_load__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::SelfOrganizingMap *arg1 = (GRT::SelfOrganizingMap *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SelfOrganizingMap_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__SelfOrganizingMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SelfOrganizingMap_load" "', argument " "1"" of type '" "GRT::SelfOrganizingMap *""'"); 
  }
  arg1 = reinterpret_cast< GRT::SelfOrganizingMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SelfOrganizingMap_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SelfOrganizingMap_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SelfOrganizingMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SelfOrganizingMap_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__SelfOrganizingMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SelfOrganizingMap_load__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SelfOrganizingMap_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::SelfOrganizingMap::load(std::fstream &)\n"
    "    load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SelfOrganizingMap_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":SelfOrganizingMap_getId")) SWIG_fail;
  result = GRT::SelfOrganizingMap::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SelfOrganizingMap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__SelfOrganizingMap, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FeatureExtraction__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  bool arg2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GRT::FeatureExtraction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_FeatureExtraction",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FeatureExtraction" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FeatureExtraction" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (GRT::FeatureExtraction *)new GRT::FeatureExtraction(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__FeatureExtraction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FeatureExtraction__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  GRT::FeatureExtraction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FeatureExtraction",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FeatureExtraction" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (GRT::FeatureExtraction *)new GRT::FeatureExtraction(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__FeatureExtraction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FeatureExtraction__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FeatureExtraction")) SWIG_fail;
  result = (GRT::FeatureExtraction *)new GRT::FeatureExtraction();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__FeatureExtraction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FeatureExtraction(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FeatureExtraction__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FeatureExtraction__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FeatureExtraction__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FeatureExtraction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::FeatureExtraction::FeatureExtraction(std::string const,bool const)\n"
    "    GRT::FeatureExtraction::FeatureExtraction(std::string const)\n"
    "    GRT::FeatureExtraction::FeatureExtraction()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_FeatureExtraction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FeatureExtraction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FeatureExtraction" "', argument " "1"" of type '" "GRT::FeatureExtraction *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  GRT::FeatureExtraction *arg2 = (GRT::FeatureExtraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureExtraction_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_deepCopyFrom" "', argument " "1"" of type '" "GRT::FeatureExtraction *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureExtraction_deepCopyFrom" "', argument " "2"" of type '" "GRT::FeatureExtraction const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::FeatureExtraction * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::FeatureExtraction const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_copyBaseVariables(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  GRT::FeatureExtraction *arg2 = (GRT::FeatureExtraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureExtraction_copyBaseVariables",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_copyBaseVariables" "', argument " "1"" of type '" "GRT::FeatureExtraction *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureExtraction_copyBaseVariables" "', argument " "2"" of type '" "GRT::FeatureExtraction const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::FeatureExtraction * >(argp2);
  result = (bool)(arg1)->copyBaseVariables((GRT::FeatureExtraction const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_predict__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureExtraction_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_predict" "', argument " "1"" of type '" "GRT::FeatureExtraction *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureExtraction_predict" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureExtraction_predict" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_predict__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureExtraction_predict",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_predict" "', argument " "1"" of type '" "GRT::FeatureExtraction *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureExtraction_predict" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureExtraction_predict" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict((GRT::MatrixFloat const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_predict(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FeatureExtraction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FeatureExtraction_predict__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FeatureExtraction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FeatureExtraction_predict__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FeatureExtraction_predict'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::FeatureExtraction::predict(GRT::VectorFloat const &)\n"
    "    GRT::FeatureExtraction::predict(GRT::MatrixFloat const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_computeFeatures__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureExtraction_computeFeatures",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_computeFeatures" "', argument " "1"" of type '" "GRT::FeatureExtraction *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureExtraction_computeFeatures" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureExtraction_computeFeatures" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->computeFeatures((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_computeFeatures__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureExtraction_computeFeatures",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_computeFeatures" "', argument " "1"" of type '" "GRT::FeatureExtraction *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureExtraction_computeFeatures" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureExtraction_computeFeatures" "', argument " "2"" of type '" "GRT::MatrixFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->computeFeatures((GRT::MatrixFloat const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_computeFeatures(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FeatureExtraction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FeatureExtraction_computeFeatures__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FeatureExtraction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FeatureExtraction_computeFeatures__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FeatureExtraction_computeFeatures'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::FeatureExtraction::computeFeatures(GRT::VectorFloat const &)\n"
    "    GRT::FeatureExtraction::computeFeatures(GRT::MatrixFloat const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureExtraction_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_clear" "', argument " "1"" of type '" "GRT::FeatureExtraction *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_getInitialized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureExtraction_getInitialized",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_getInitialized" "', argument " "1"" of type '" "GRT::FeatureExtraction const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  result = (bool)((GRT::FeatureExtraction const *)arg1)->getInitialized();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_getFeatureDataReady(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureExtraction_getFeatureDataReady",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_getFeatureDataReady" "', argument " "1"" of type '" "GRT::FeatureExtraction const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  result = (bool)((GRT::FeatureExtraction const *)arg1)->getFeatureDataReady();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_getIsTrainable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureExtraction_getIsTrainable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_getIsTrainable" "', argument " "1"" of type '" "GRT::FeatureExtraction const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  result = (bool)((GRT::FeatureExtraction const *)arg1)->getIsTrainable();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_getFeatureVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureExtraction_getFeatureVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_getFeatureVector" "', argument " "1"" of type '" "GRT::FeatureExtraction const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  result = (GRT::VectorFloat *) &((GRT::FeatureExtraction const *)arg1)->getFeatureVector();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__VectorFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_getFeatureMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureExtraction_getFeatureMatrix",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_getFeatureMatrix" "', argument " "1"" of type '" "GRT::FeatureExtraction const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  result = (GRT::MatrixFloat *) &((GRT::FeatureExtraction const *)arg1)->getFeatureMatrix();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__MatrixFloat, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_create__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  GRT::FeatureExtraction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureExtraction_create",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_create" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureExtraction_create" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (GRT::FeatureExtraction *)GRT::FeatureExtraction::create((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_create__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::FeatureExtraction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureExtraction_create",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_create" "', argument " "1"" of type '" "GRT::FeatureExtraction const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  result = (GRT::FeatureExtraction *)((GRT::FeatureExtraction const *)arg1)->create();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_create(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FeatureExtraction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FeatureExtraction_create__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FeatureExtraction_create__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FeatureExtraction_create'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::FeatureExtraction::create(std::string const &)\n"
    "    GRT::FeatureExtraction::create() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_save_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureExtraction_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_save" "', argument " "1"" of type '" "GRT::FeatureExtraction const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureExtraction_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureExtraction_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::FeatureExtraction const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_save_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureExtraction_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_save" "', argument " "1"" of type '" "GRT::FeatureExtraction const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureExtraction_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureExtraction_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::FeatureExtraction const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FeatureExtraction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FeatureExtraction_save_SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FeatureExtraction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FeatureExtraction_save_SWIG_0_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FeatureExtraction_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    save(std::string const &) const\n"
    "    save(std::fstream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_load_SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureExtraction_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_load" "', argument " "1"" of type '" "GRT::FeatureExtraction *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureExtraction_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureExtraction_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_load_SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FeatureExtraction_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_load" "', argument " "1"" of type '" "GRT::FeatureExtraction *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FeatureExtraction_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureExtraction_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FeatureExtraction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FeatureExtraction_load_SWIG_0_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__FeatureExtraction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FeatureExtraction_load_SWIG_0_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FeatureExtraction_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    load(std::string const &)\n"
    "    load(std::fstream &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_createNewInstance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::FeatureExtraction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureExtraction_createNewInstance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_createNewInstance" "', argument " "1"" of type '" "GRT::FeatureExtraction const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  result = (GRT::FeatureExtraction *)((GRT::FeatureExtraction const *)arg1)->createNewInstance();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_createInstanceFromString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  GRT::FeatureExtraction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureExtraction_createInstanceFromString",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_createInstanceFromString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FeatureExtraction_createInstanceFromString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (GRT::FeatureExtraction *)GRT::FeatureExtraction::createInstanceFromString((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FeatureExtraction_getFeatureExtractionType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::FeatureExtraction *arg1 = (GRT::FeatureExtraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FeatureExtraction_getFeatureExtractionType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FeatureExtraction_getFeatureExtractionType" "', argument " "1"" of type '" "GRT::FeatureExtraction const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::FeatureExtraction * >(argp1);
  result = ((GRT::FeatureExtraction const *)arg1)->getFeatureExtractionType();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FeatureExtraction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__FeatureExtraction, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_KMeansQuantizer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UINT arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::KMeansQuantizer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KMeansQuantizer",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_KMeansQuantizer" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);
  result = (GRT::KMeansQuantizer *)new GRT::KMeansQuantizer(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__KMeansQuantizer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KMeansQuantizer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_KMeansQuantizer")) SWIG_fail;
  result = (GRT::KMeansQuantizer *)new GRT::KMeansQuantizer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__KMeansQuantizer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KMeansQuantizer__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::KMeansQuantizer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_KMeansQuantizer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__KMeansQuantizer,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KMeansQuantizer" "', argument " "1"" of type '" "GRT::KMeansQuantizer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KMeansQuantizer" "', argument " "1"" of type '" "GRT::KMeansQuantizer const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  result = (GRT::KMeansQuantizer *)new GRT::KMeansQuantizer((GRT::KMeansQuantizer const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__KMeansQuantizer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KMeansQuantizer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_KMeansQuantizer__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__KMeansQuantizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_KMeansQuantizer__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_KMeansQuantizer__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_KMeansQuantizer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::KMeansQuantizer::KMeansQuantizer(UINT const)\n"
    "    GRT::KMeansQuantizer::KMeansQuantizer()\n"
    "    GRT::KMeansQuantizer::KMeansQuantizer(GRT::KMeansQuantizer const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_KMeansQuantizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_KMeansQuantizer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KMeansQuantizer" "', argument " "1"" of type '" "GRT::KMeansQuantizer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  GRT::FeatureExtraction *arg2 = (GRT::FeatureExtraction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeansQuantizer_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_deepCopyFrom" "', argument " "1"" of type '" "GRT::KMeansQuantizer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GRT__FeatureExtraction, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeansQuantizer_deepCopyFrom" "', argument " "2"" of type '" "GRT::FeatureExtraction const *""'"); 
  }
  arg2 = reinterpret_cast< GRT::FeatureExtraction * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((GRT::FeatureExtraction const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_computeFeatures(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeansQuantizer_computeFeatures",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_computeFeatures" "', argument " "1"" of type '" "GRT::KMeansQuantizer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeansQuantizer_computeFeatures" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeansQuantizer_computeFeatures" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->computeFeatures((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KMeansQuantizer_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_reset" "', argument " "1"" of type '" "GRT::KMeansQuantizer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  result = (bool)(arg1)->reset();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KMeansQuantizer_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_clear" "', argument " "1"" of type '" "GRT::KMeansQuantizer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  result = (bool)(arg1)->clear();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeansQuantizer_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_save" "', argument " "1"" of type '" "GRT::KMeansQuantizer const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeansQuantizer_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeansQuantizer_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::KMeansQuantizer const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeansQuantizer_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_load" "', argument " "1"" of type '" "GRT::KMeansQuantizer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeansQuantizer_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeansQuantizer_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_train___SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  GRT::ClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeansQuantizer_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_train_" "', argument " "1"" of type '" "GRT::KMeansQuantizer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeansQuantizer_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeansQuantizer_train_" "', argument " "2"" of type '" "GRT::ClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_train___SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  GRT::TimeSeriesClassificationData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeansQuantizer_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_train_" "', argument " "1"" of type '" "GRT::KMeansQuantizer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__TimeSeriesClassificationData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeansQuantizer_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeansQuantizer_train_" "', argument " "2"" of type '" "GRT::TimeSeriesClassificationData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::TimeSeriesClassificationData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_train___SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  GRT::ClassificationDataStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeansQuantizer_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_train_" "', argument " "1"" of type '" "GRT::KMeansQuantizer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__ClassificationDataStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeansQuantizer_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeansQuantizer_train_" "', argument " "2"" of type '" "GRT::ClassificationDataStream &""'"); 
  }
  arg2 = reinterpret_cast< GRT::ClassificationDataStream * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_train___SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  GRT::UnlabelledData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeansQuantizer_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_train_" "', argument " "1"" of type '" "GRT::KMeansQuantizer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__UnlabelledData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeansQuantizer_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeansQuantizer_train_" "', argument " "2"" of type '" "GRT::UnlabelledData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::UnlabelledData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_train___SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeansQuantizer_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_train_" "', argument " "1"" of type '" "GRT::KMeansQuantizer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeansQuantizer_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeansQuantizer_train_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_quantize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  GRT::Float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeansQuantizer_quantize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_quantize" "', argument " "1"" of type '" "GRT::KMeansQuantizer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KMeansQuantizer_quantize" "', argument " "2"" of type '" "GRT::Float""'");
  } 
  arg2 = static_cast< GRT::Float >(val2);
  result = (arg1)->quantize(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_quantize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeansQuantizer_quantize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_quantize" "', argument " "1"" of type '" "GRT::KMeansQuantizer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeansQuantizer_quantize" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeansQuantizer_quantize" "', argument " "2"" of type '" "GRT::VectorFloat const &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (arg1)->quantize((GRT::VectorFloat const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_quantize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeansQuantizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeansQuantizer_quantize__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeansQuantizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_KMeansQuantizer_quantize__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KMeansQuantizer_quantize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::KMeansQuantizer::quantize(GRT::Float const)\n"
    "    GRT::KMeansQuantizer::quantize(GRT::VectorFloat const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_getQuantizerTrained(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KMeansQuantizer_getQuantizerTrained",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_getQuantizerTrained" "', argument " "1"" of type '" "GRT::KMeansQuantizer const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  result = (bool)((GRT::KMeansQuantizer const *)arg1)->getQuantizerTrained();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_getNumClusters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KMeansQuantizer_getNumClusters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_getNumClusters" "', argument " "1"" of type '" "GRT::KMeansQuantizer const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  result = ((GRT::KMeansQuantizer const *)arg1)->getNumClusters();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_getQuantizedValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KMeansQuantizer_getQuantizedValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_getQuantizedValue" "', argument " "1"" of type '" "GRT::KMeansQuantizer const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  result = ((GRT::KMeansQuantizer const *)arg1)->getQuantizedValue();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_getQuantizationDistances(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::VectorFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KMeansQuantizer_getQuantizationDistances",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_getQuantizationDistances" "', argument " "1"" of type '" "GRT::KMeansQuantizer const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  result = ((GRT::KMeansQuantizer const *)arg1)->getQuantizationDistances();
  
  {
    npy_intp dims[1]{
      (npy_intp)((&result)->size())
    };
    resultobj = PyArray_SimpleNew(1, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->size(); ++i) {
      float* d_ptr = static_cast<float*>(PyArray_GETPTR1(arr_ptr, i));
      *d_ptr = result[i];
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_getQuantizationModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::MatrixFloat result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:KMeansQuantizer_getQuantizationModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_getQuantizationModel" "', argument " "1"" of type '" "GRT::KMeansQuantizer const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  result = ((GRT::KMeansQuantizer const *)arg1)->getQuantizationModel();
  
  {
    npy_intp dims[2]{
      (&result)->getNumRows(), (&result)->getNumCols()
    };
    resultobj = PyArray_SimpleNew(2, dims, NPY_FLOAT);
    PyArrayObject* arr_ptr = reinterpret_cast<PyArrayObject*>(resultobj);
    for (size_t i = 0; i < (&result)->getNumRows(); ++i) {
      for (size_t j = 0; j < (&result)->getNumCols(); ++j) {
        float* d_ptr = static_cast<float*>(PyArray_GETPTR2(arr_ptr, i, j));
        *d_ptr = result[i][j];
      }
    }
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_setNumClusters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeansQuantizer_setNumClusters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_setNumClusters" "', argument " "1"" of type '" "GRT::KMeansQuantizer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KMeansQuantizer_setNumClusters" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setNumClusters(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_save__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeansQuantizer_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_save" "', argument " "1"" of type '" "GRT::KMeansQuantizer const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeansQuantizer_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeansQuantizer_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::KMeansQuantizer const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeansQuantizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeansQuantizer_save__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeansQuantizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeansQuantizer_save__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KMeansQuantizer_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::KMeansQuantizer::save(std::fstream &) const\n"
    "    save(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_load__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeansQuantizer_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_load" "', argument " "1"" of type '" "GRT::KMeansQuantizer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeansQuantizer_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeansQuantizer_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeansQuantizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeansQuantizer_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeansQuantizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeansQuantizer_load__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KMeansQuantizer_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::KMeansQuantizer::load(std::fstream &)\n"
    "    load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_train___SWIG_5_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeansQuantizer_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_train_" "', argument " "1"" of type '" "GRT::KMeansQuantizer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeansQuantizer_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeansQuantizer_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_train___SWIG_5_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  GRT::RegressionData *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:KMeansQuantizer_train_",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_train_" "', argument " "1"" of type '" "GRT::KMeansQuantizer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeansQuantizer_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeansQuantizer_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "KMeansQuantizer_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeansQuantizer_train_" "', argument " "3"" of type '" "GRT::RegressionData &""'"); 
  }
  arg3 = reinterpret_cast< GRT::RegressionData * >(argp3);
  result = (bool)(arg1)->train_(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_train_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeansQuantizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeansQuantizer_train___SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeansQuantizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__TimeSeriesClassificationData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeansQuantizer_train___SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeansQuantizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__ClassificationDataStream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeansQuantizer_train___SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeansQuantizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__UnlabelledData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeansQuantizer_train___SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeansQuantizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeansQuantizer_train___SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeansQuantizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeansQuantizer_train___SWIG_5_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeansQuantizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GRT__RegressionData, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_KMeansQuantizer_train___SWIG_5_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KMeansQuantizer_train_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::KMeansQuantizer::train_(GRT::ClassificationData &)\n"
    "    GRT::KMeansQuantizer::train_(GRT::TimeSeriesClassificationData &)\n"
    "    GRT::KMeansQuantizer::train_(GRT::ClassificationDataStream &)\n"
    "    GRT::KMeansQuantizer::train_(GRT::UnlabelledData &)\n"
    "    GRT::KMeansQuantizer::train_(GRT::MatrixFloat &)\n"
    "    train_(GRT::RegressionData &)\n"
    "    train_(GRT::RegressionData &,GRT::RegressionData &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_predict__SWIG_0_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeansQuantizer_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_predict_" "', argument " "1"" of type '" "GRT::KMeansQuantizer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeansQuantizer_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeansQuantizer_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_predict__SWIG_0_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::KMeansQuantizer *arg1 = (GRT::KMeansQuantizer *) 0 ;
  GRT::MatrixFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:KMeansQuantizer_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__KMeansQuantizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KMeansQuantizer_predict_" "', argument " "1"" of type '" "GRT::KMeansQuantizer *""'"); 
  }
  arg1 = reinterpret_cast< GRT::KMeansQuantizer * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__MatrixFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KMeansQuantizer_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KMeansQuantizer_predict_" "', argument " "2"" of type '" "GRT::MatrixFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::MatrixFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_predict_(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeansQuantizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__VectorFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeansQuantizer_predict__SWIG_0_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__KMeansQuantizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GRT__MatrixFloat, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_KMeansQuantizer_predict__SWIG_0_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'KMeansQuantizer_predict_'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    predict_(GRT::VectorFloat &)\n"
    "    predict_(GRT::MatrixFloat &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_KMeansQuantizer_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":KMeansQuantizer_getId")) SWIG_fail;
  result = GRT::KMeansQuantizer::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *KMeansQuantizer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__KMeansQuantizer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LinearRegression__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::LinearRegression *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LinearRegression",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LinearRegression" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (GRT::LinearRegression *)new GRT::LinearRegression(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__LinearRegression, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LinearRegression__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::LinearRegression *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LinearRegression")) SWIG_fail;
  result = (GRT::LinearRegression *)new GRT::LinearRegression();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__LinearRegression, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LinearRegression__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::LinearRegression *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GRT::LinearRegression *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LinearRegression",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GRT__LinearRegression,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LinearRegression" "', argument " "1"" of type '" "GRT::LinearRegression const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LinearRegression" "', argument " "1"" of type '" "GRT::LinearRegression const &""'"); 
  }
  arg1 = reinterpret_cast< GRT::LinearRegression * >(argp1);
  result = (GRT::LinearRegression *)new GRT::LinearRegression((GRT::LinearRegression const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GRT__LinearRegression, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LinearRegression(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_LinearRegression__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GRT__LinearRegression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LinearRegression__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LinearRegression__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LinearRegression'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::LinearRegression::LinearRegression(bool)\n"
    "    GRT::LinearRegression::LinearRegression()\n"
    "    GRT::LinearRegression::LinearRegression(GRT::LinearRegression const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_LinearRegression(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::LinearRegression *arg1 = (GRT::LinearRegression *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LinearRegression",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__LinearRegression, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LinearRegression" "', argument " "1"" of type '" "GRT::LinearRegression *""'"); 
  }
  arg1 = reinterpret_cast< GRT::LinearRegression * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRegression_deepCopyFrom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::LinearRegression *arg1 = (GRT::LinearRegression *) 0 ;
  Regressifier *arg2 = (Regressifier *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LinearRegression_deepCopyFrom",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__LinearRegression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRegression_deepCopyFrom" "', argument " "1"" of type '" "GRT::LinearRegression *""'"); 
  }
  arg1 = reinterpret_cast< GRT::LinearRegression * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Regressifier, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinearRegression_deepCopyFrom" "', argument " "2"" of type '" "Regressifier const *""'"); 
  }
  arg2 = reinterpret_cast< Regressifier * >(argp2);
  result = (bool)(arg1)->deepCopyFrom((Regressifier const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRegression_train_(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::LinearRegression *arg1 = (GRT::LinearRegression *) 0 ;
  GRT::RegressionData *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LinearRegression_train_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__LinearRegression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRegression_train_" "', argument " "1"" of type '" "GRT::LinearRegression *""'"); 
  }
  arg1 = reinterpret_cast< GRT::LinearRegression * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__RegressionData,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinearRegression_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearRegression_train_" "', argument " "2"" of type '" "GRT::RegressionData &""'"); 
  }
  arg2 = reinterpret_cast< GRT::RegressionData * >(argp2);
  result = (bool)(arg1)->train_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRegression_predict_(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::LinearRegression *arg1 = (GRT::LinearRegression *) 0 ;
  GRT::VectorFloat *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LinearRegression_predict_",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__LinearRegression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRegression_predict_" "', argument " "1"" of type '" "GRT::LinearRegression *""'"); 
  }
  arg1 = reinterpret_cast< GRT::LinearRegression * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GRT__VectorFloat,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinearRegression_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearRegression_predict_" "', argument " "2"" of type '" "GRT::VectorFloat &""'"); 
  }
  arg2 = reinterpret_cast< GRT::VectorFloat * >(argp2);
  result = (bool)(arg1)->predict_(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRegression_save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::LinearRegression *arg1 = (GRT::LinearRegression *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LinearRegression_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__LinearRegression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRegression_save" "', argument " "1"" of type '" "GRT::LinearRegression const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::LinearRegression * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinearRegression_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearRegression_save" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)((GRT::LinearRegression const *)arg1)->save(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRegression_load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::LinearRegression *arg1 = (GRT::LinearRegression *) 0 ;
  std::fstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LinearRegression_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__LinearRegression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRegression_load" "', argument " "1"" of type '" "GRT::LinearRegression *""'"); 
  }
  arg1 = reinterpret_cast< GRT::LinearRegression * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__fstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinearRegression_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearRegression_load" "', argument " "2"" of type '" "std::fstream &""'"); 
  }
  arg2 = reinterpret_cast< std::fstream * >(argp2);
  result = (bool)(arg1)->load(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRegression_getMaxNumIterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::LinearRegression *arg1 = (GRT::LinearRegression *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UINT result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LinearRegression_getMaxNumIterations",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__LinearRegression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRegression_getMaxNumIterations" "', argument " "1"" of type '" "GRT::LinearRegression const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::LinearRegression * >(argp1);
  result = ((GRT::LinearRegression const *)arg1)->getMaxNumIterations();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRegression_setMaxNumIterations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::LinearRegression *arg1 = (GRT::LinearRegression *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LinearRegression_setMaxNumIterations",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__LinearRegression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRegression_setMaxNumIterations" "', argument " "1"" of type '" "GRT::LinearRegression *""'"); 
  }
  arg1 = reinterpret_cast< GRT::LinearRegression * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LinearRegression_setMaxNumIterations" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);
  result = (bool)(arg1)->setMaxNumIterations(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRegression_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)":LinearRegression_getId")) SWIG_fail;
  result = GRT::LinearRegression::getId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRegression_save__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::LinearRegression *arg1 = (GRT::LinearRegression *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LinearRegression_save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__LinearRegression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRegression_save" "', argument " "1"" of type '" "GRT::LinearRegression const *""'"); 
  }
  arg1 = reinterpret_cast< GRT::LinearRegression * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinearRegression_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearRegression_save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((GRT::LinearRegression const *)arg1)->save((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRegression_save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__LinearRegression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LinearRegression_save__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__LinearRegression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LinearRegression_save__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LinearRegression_save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::LinearRegression::save(std::fstream &) const\n"
    "    save(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LinearRegression_load__SWIG_1_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GRT::LinearRegression *arg1 = (GRT::LinearRegression *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LinearRegression_load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GRT__LinearRegression, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LinearRegression_load" "', argument " "1"" of type '" "GRT::LinearRegression *""'"); 
  }
  arg1 = reinterpret_cast< GRT::LinearRegression * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LinearRegression_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LinearRegression_load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->load((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LinearRegression_load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__LinearRegression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__fstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LinearRegression_load__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GRT__LinearRegression, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LinearRegression_load__SWIG_1_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LinearRegression_load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GRT::LinearRegression::load(std::fstream &)\n"
    "    load(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *LinearRegression_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GRT__LinearRegression, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"IntVector_iterator", _wrap_IntVector_iterator, METH_VARARGS, NULL},
	 { (char *)"IntVector___nonzero__", _wrap_IntVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"IntVector___bool__", _wrap_IntVector___bool__, METH_VARARGS, NULL},
	 { (char *)"IntVector___len__", _wrap_IntVector___len__, METH_VARARGS, NULL},
	 { (char *)"IntVector___getslice__", _wrap_IntVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"IntVector___setslice__", _wrap_IntVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"IntVector___delslice__", _wrap_IntVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"IntVector___delitem__", _wrap_IntVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"IntVector___getitem__", _wrap_IntVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"IntVector___setitem__", _wrap_IntVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"IntVector_pop", _wrap_IntVector_pop, METH_VARARGS, NULL},
	 { (char *)"IntVector_append", _wrap_IntVector_append, METH_VARARGS, NULL},
	 { (char *)"IntVector_empty", _wrap_IntVector_empty, METH_VARARGS, NULL},
	 { (char *)"IntVector_size", _wrap_IntVector_size, METH_VARARGS, NULL},
	 { (char *)"IntVector_swap", _wrap_IntVector_swap, METH_VARARGS, NULL},
	 { (char *)"IntVector_begin", _wrap_IntVector_begin, METH_VARARGS, NULL},
	 { (char *)"IntVector_end", _wrap_IntVector_end, METH_VARARGS, NULL},
	 { (char *)"IntVector_rbegin", _wrap_IntVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"IntVector_rend", _wrap_IntVector_rend, METH_VARARGS, NULL},
	 { (char *)"IntVector_clear", _wrap_IntVector_clear, METH_VARARGS, NULL},
	 { (char *)"IntVector_get_allocator", _wrap_IntVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"IntVector_pop_back", _wrap_IntVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"IntVector_erase", _wrap_IntVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_IntVector", _wrap_new_IntVector, METH_VARARGS, NULL},
	 { (char *)"IntVector_push_back", _wrap_IntVector_push_back, METH_VARARGS, NULL},
	 { (char *)"IntVector_front", _wrap_IntVector_front, METH_VARARGS, NULL},
	 { (char *)"IntVector_back", _wrap_IntVector_back, METH_VARARGS, NULL},
	 { (char *)"IntVector_assign", _wrap_IntVector_assign, METH_VARARGS, NULL},
	 { (char *)"IntVector_resize", _wrap_IntVector_resize, METH_VARARGS, NULL},
	 { (char *)"IntVector_insert", _wrap_IntVector_insert, METH_VARARGS, NULL},
	 { (char *)"IntVector_reserve", _wrap_IntVector_reserve, METH_VARARGS, NULL},
	 { (char *)"IntVector_capacity", _wrap_IntVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_IntVector", _wrap_delete_IntVector, METH_VARARGS, NULL},
	 { (char *)"IntVector_swigregister", IntVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_iterator", _wrap_DoubleVector_iterator, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___nonzero__", _wrap_DoubleVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___bool__", _wrap_DoubleVector___bool__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___len__", _wrap_DoubleVector___len__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___getslice__", _wrap_DoubleVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___setslice__", _wrap_DoubleVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___delslice__", _wrap_DoubleVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___delitem__", _wrap_DoubleVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___getitem__", _wrap_DoubleVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___setitem__", _wrap_DoubleVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_pop", _wrap_DoubleVector_pop, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_append", _wrap_DoubleVector_append, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_empty", _wrap_DoubleVector_empty, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_size", _wrap_DoubleVector_size, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_swap", _wrap_DoubleVector_swap, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_begin", _wrap_DoubleVector_begin, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_end", _wrap_DoubleVector_end, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_rbegin", _wrap_DoubleVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_rend", _wrap_DoubleVector_rend, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_clear", _wrap_DoubleVector_clear, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_get_allocator", _wrap_DoubleVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_pop_back", _wrap_DoubleVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_erase", _wrap_DoubleVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_DoubleVector", _wrap_new_DoubleVector, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_push_back", _wrap_DoubleVector_push_back, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_front", _wrap_DoubleVector_front, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_back", _wrap_DoubleVector_back, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_assign", _wrap_DoubleVector_assign, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_resize", _wrap_DoubleVector_resize, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_insert", _wrap_DoubleVector_insert, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_reserve", _wrap_DoubleVector_reserve, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_capacity", _wrap_DoubleVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_DoubleVector", _wrap_delete_DoubleVector, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_swigregister", DoubleVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"FloatVector_iterator", _wrap_FloatVector_iterator, METH_VARARGS, NULL},
	 { (char *)"FloatVector___nonzero__", _wrap_FloatVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"FloatVector___bool__", _wrap_FloatVector___bool__, METH_VARARGS, NULL},
	 { (char *)"FloatVector___len__", _wrap_FloatVector___len__, METH_VARARGS, NULL},
	 { (char *)"FloatVector___getslice__", _wrap_FloatVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"FloatVector___setslice__", _wrap_FloatVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"FloatVector___delslice__", _wrap_FloatVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"FloatVector___delitem__", _wrap_FloatVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"FloatVector___getitem__", _wrap_FloatVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"FloatVector___setitem__", _wrap_FloatVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"FloatVector_pop", _wrap_FloatVector_pop, METH_VARARGS, NULL},
	 { (char *)"FloatVector_append", _wrap_FloatVector_append, METH_VARARGS, NULL},
	 { (char *)"FloatVector_empty", _wrap_FloatVector_empty, METH_VARARGS, NULL},
	 { (char *)"FloatVector_size", _wrap_FloatVector_size, METH_VARARGS, NULL},
	 { (char *)"FloatVector_swap", _wrap_FloatVector_swap, METH_VARARGS, NULL},
	 { (char *)"FloatVector_begin", _wrap_FloatVector_begin, METH_VARARGS, NULL},
	 { (char *)"FloatVector_end", _wrap_FloatVector_end, METH_VARARGS, NULL},
	 { (char *)"FloatVector_rbegin", _wrap_FloatVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"FloatVector_rend", _wrap_FloatVector_rend, METH_VARARGS, NULL},
	 { (char *)"FloatVector_clear", _wrap_FloatVector_clear, METH_VARARGS, NULL},
	 { (char *)"FloatVector_get_allocator", _wrap_FloatVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"FloatVector_pop_back", _wrap_FloatVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"FloatVector_erase", _wrap_FloatVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_FloatVector", _wrap_new_FloatVector, METH_VARARGS, NULL},
	 { (char *)"FloatVector_push_back", _wrap_FloatVector_push_back, METH_VARARGS, NULL},
	 { (char *)"FloatVector_front", _wrap_FloatVector_front, METH_VARARGS, NULL},
	 { (char *)"FloatVector_back", _wrap_FloatVector_back, METH_VARARGS, NULL},
	 { (char *)"FloatVector_assign", _wrap_FloatVector_assign, METH_VARARGS, NULL},
	 { (char *)"FloatVector_resize", _wrap_FloatVector_resize, METH_VARARGS, NULL},
	 { (char *)"FloatVector_insert", _wrap_FloatVector_insert, METH_VARARGS, NULL},
	 { (char *)"FloatVector_reserve", _wrap_FloatVector_reserve, METH_VARARGS, NULL},
	 { (char *)"FloatVector_capacity", _wrap_FloatVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_FloatVector", _wrap_delete_FloatVector, METH_VARARGS, NULL},
	 { (char *)"FloatVector_swigregister", FloatVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"grt_sqr", _wrap_grt_sqr, METH_VARARGS, NULL},
	 { (char *)"grt_sqrt", _wrap_grt_sqrt, METH_VARARGS, NULL},
	 { (char *)"grt_antilog", _wrap_grt_antilog, METH_VARARGS, NULL},
	 { (char *)"grt_exp", _wrap_grt_exp, METH_VARARGS, NULL},
	 { (char *)"grt_log", _wrap_grt_log, METH_VARARGS, NULL},
	 { (char *)"grt_sigmoid", _wrap_grt_sigmoid, METH_VARARGS, NULL},
	 { (char *)"new_Util", _wrap_new_Util, METH_VARARGS, NULL},
	 { (char *)"delete_Util", _wrap_delete_Util, METH_VARARGS, NULL},
	 { (char *)"Util_getCxx11Enabled", _wrap_Util_getCxx11Enabled, METH_VARARGS, NULL},
	 { (char *)"Util_sleep", _wrap_Util_sleep, METH_VARARGS, NULL},
	 { (char *)"Util_timeAsString", _wrap_Util_timeAsString, METH_VARARGS, NULL},
	 { (char *)"Util_intToString", _wrap_Util_intToString, METH_VARARGS, NULL},
	 { (char *)"Util_toString", _wrap_Util_toString, METH_VARARGS, NULL},
	 { (char *)"Util_stringToInt", _wrap_Util_stringToInt, METH_VARARGS, NULL},
	 { (char *)"Util_stringToDouble", _wrap_Util_stringToDouble, METH_VARARGS, NULL},
	 { (char *)"Util_stringToFloat", _wrap_Util_stringToFloat, METH_VARARGS, NULL},
	 { (char *)"Util_stringToBool", _wrap_Util_stringToBool, METH_VARARGS, NULL},
	 { (char *)"Util_stringEndsWith", _wrap_Util_stringEndsWith, METH_VARARGS, NULL},
	 { (char *)"Util_sum", _wrap_Util_sum, METH_VARARGS, NULL},
	 { (char *)"Util_dotProduct", _wrap_Util_dotProduct, METH_VARARGS, NULL},
	 { (char *)"Util_euclideanDistance", _wrap_Util_euclideanDistance, METH_VARARGS, NULL},
	 { (char *)"Util_squaredEuclideanDistance", _wrap_Util_squaredEuclideanDistance, METH_VARARGS, NULL},
	 { (char *)"Util_manhattanDistance", _wrap_Util_manhattanDistance, METH_VARARGS, NULL},
	 { (char *)"Util_cosineDistance", _wrap_Util_cosineDistance, METH_VARARGS, NULL},
	 { (char *)"Util_scale", _wrap_Util_scale, METH_VARARGS, NULL},
	 { (char *)"Util_normalize", _wrap_Util_normalize, METH_VARARGS, NULL},
	 { (char *)"Util_limit", _wrap_Util_limit, METH_VARARGS, NULL},
	 { (char *)"Util_getMinIndex", _wrap_Util_getMinIndex, METH_VARARGS, NULL},
	 { (char *)"Util_getMaxIndex", _wrap_Util_getMaxIndex, METH_VARARGS, NULL},
	 { (char *)"Util_getMin", _wrap_Util_getMin, METH_VARARGS, NULL},
	 { (char *)"Util_getMax", _wrap_Util_getMax, METH_VARARGS, NULL},
	 { (char *)"Util_getOS", _wrap_Util_getOS, METH_VARARGS, NULL},
	 { (char *)"Util_cartToPolar", _wrap_Util_cartToPolar, METH_VARARGS, NULL},
	 { (char *)"Util_polarToCart", _wrap_Util_polarToCart, METH_VARARGS, NULL},
	 { (char *)"Util_parseDirectory", _wrap_Util_parseDirectory, METH_VARARGS, NULL},
	 { (char *)"Util_swigregister", Util_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GRTBase", _wrap_new_GRTBase, METH_VARARGS, NULL},
	 { (char *)"delete_GRTBase", _wrap_delete_GRTBase, METH_VARARGS, NULL},
	 { (char *)"GRTBase_copyGRTBaseVariables", _wrap_GRTBase_copyGRTBaseVariables, METH_VARARGS, NULL},
	 { (char *)"GRTBase_getClassType", _wrap_GRTBase_getClassType, METH_VARARGS, NULL},
	 { (char *)"GRTBase_getId", _wrap_GRTBase_getId, METH_VARARGS, NULL},
	 { (char *)"GRTBase_getLastWarningMessage", _wrap_GRTBase_getLastWarningMessage, METH_VARARGS, NULL},
	 { (char *)"GRTBase_getLastErrorMessage", _wrap_GRTBase_getLastErrorMessage, METH_VARARGS, NULL},
	 { (char *)"GRTBase_getLastInfoMessage", _wrap_GRTBase_getLastInfoMessage, METH_VARARGS, NULL},
	 { (char *)"GRTBase_setInfoLoggingEnabled", _wrap_GRTBase_setInfoLoggingEnabled, METH_VARARGS, NULL},
	 { (char *)"GRTBase_setWarningLoggingEnabled", _wrap_GRTBase_setWarningLoggingEnabled, METH_VARARGS, NULL},
	 { (char *)"GRTBase_setErrorLoggingEnabled", _wrap_GRTBase_setErrorLoggingEnabled, METH_VARARGS, NULL},
	 { (char *)"GRTBase_setDebugLoggingEnabled", _wrap_GRTBase_setDebugLoggingEnabled, METH_VARARGS, NULL},
	 { (char *)"GRTBase_getGRTVersion", _wrap_GRTBase_getGRTVersion, METH_VARARGS, NULL},
	 { (char *)"GRTBase_getGRTRevison", _wrap_GRTBase_getGRTRevison, METH_VARARGS, NULL},
	 { (char *)"GRTBase_getGRTBasePointer", _wrap_GRTBase_getGRTBasePointer, METH_VARARGS, NULL},
	 { (char *)"GRTBase_scale", _wrap_GRTBase_scale, METH_VARARGS, NULL},
	 { (char *)"GRTBase_SQR", _wrap_GRTBase_SQR, METH_VARARGS, NULL},
	 { (char *)"GRTBase_swigregister", GRTBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"UINTVector_iterator", _wrap_UINTVector_iterator, METH_VARARGS, NULL},
	 { (char *)"UINTVector___nonzero__", _wrap_UINTVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"UINTVector___bool__", _wrap_UINTVector___bool__, METH_VARARGS, NULL},
	 { (char *)"UINTVector___len__", _wrap_UINTVector___len__, METH_VARARGS, NULL},
	 { (char *)"UINTVector___getslice__", _wrap_UINTVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"UINTVector___setslice__", _wrap_UINTVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"UINTVector___delslice__", _wrap_UINTVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"UINTVector___delitem__", _wrap_UINTVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"UINTVector___getitem__", _wrap_UINTVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"UINTVector___setitem__", _wrap_UINTVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"UINTVector_pop", _wrap_UINTVector_pop, METH_VARARGS, NULL},
	 { (char *)"UINTVector_append", _wrap_UINTVector_append, METH_VARARGS, NULL},
	 { (char *)"UINTVector_empty", _wrap_UINTVector_empty, METH_VARARGS, NULL},
	 { (char *)"UINTVector_size", _wrap_UINTVector_size, METH_VARARGS, NULL},
	 { (char *)"UINTVector_swap", _wrap_UINTVector_swap, METH_VARARGS, NULL},
	 { (char *)"UINTVector_begin", _wrap_UINTVector_begin, METH_VARARGS, NULL},
	 { (char *)"UINTVector_end", _wrap_UINTVector_end, METH_VARARGS, NULL},
	 { (char *)"UINTVector_rbegin", _wrap_UINTVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"UINTVector_rend", _wrap_UINTVector_rend, METH_VARARGS, NULL},
	 { (char *)"UINTVector_clear", _wrap_UINTVector_clear, METH_VARARGS, NULL},
	 { (char *)"UINTVector_get_allocator", _wrap_UINTVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"UINTVector_pop_back", _wrap_UINTVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"UINTVector_erase", _wrap_UINTVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_UINTVector", _wrap_new_UINTVector, METH_VARARGS, NULL},
	 { (char *)"UINTVector_push_back", _wrap_UINTVector_push_back, METH_VARARGS, NULL},
	 { (char *)"UINTVector_front", _wrap_UINTVector_front, METH_VARARGS, NULL},
	 { (char *)"UINTVector_back", _wrap_UINTVector_back, METH_VARARGS, NULL},
	 { (char *)"UINTVector_assign", _wrap_UINTVector_assign, METH_VARARGS, NULL},
	 { (char *)"UINTVector_resize", _wrap_UINTVector_resize, METH_VARARGS, NULL},
	 { (char *)"UINTVector_insert", _wrap_UINTVector_insert, METH_VARARGS, NULL},
	 { (char *)"UINTVector_reserve", _wrap_UINTVector_reserve, METH_VARARGS, NULL},
	 { (char *)"UINTVector_capacity", _wrap_UINTVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_UINTVector", _wrap_delete_UINTVector, METH_VARARGS, NULL},
	 { (char *)"UINTVector_swigregister", UINTVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VectorTUINT", _wrap_new_VectorTUINT, METH_VARARGS, NULL},
	 { (char *)"delete_VectorTUINT", _wrap_delete_VectorTUINT, METH_VARARGS, NULL},
	 { (char *)"VectorTUINT_resize", _wrap_VectorTUINT_resize, METH_VARARGS, NULL},
	 { (char *)"VectorTUINT_copy", _wrap_VectorTUINT_copy, METH_VARARGS, NULL},
	 { (char *)"VectorTUINT_fill", _wrap_VectorTUINT_fill, METH_VARARGS, NULL},
	 { (char *)"VectorTUINT_setAll", _wrap_VectorTUINT_setAll, METH_VARARGS, NULL},
	 { (char *)"VectorTUINT_getSize", _wrap_VectorTUINT_getSize, METH_VARARGS, NULL},
	 { (char *)"VectorTUINT_getData", _wrap_VectorTUINT_getData, METH_VARARGS, NULL},
	 { (char *)"VectorTUINT_swigregister", VectorTUINT_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VectorTFloat", _wrap_new_VectorTFloat, METH_VARARGS, NULL},
	 { (char *)"delete_VectorTFloat", _wrap_delete_VectorTFloat, METH_VARARGS, NULL},
	 { (char *)"VectorTFloat_resize", _wrap_VectorTFloat_resize, METH_VARARGS, NULL},
	 { (char *)"VectorTFloat_copy", _wrap_VectorTFloat_copy, METH_VARARGS, NULL},
	 { (char *)"VectorTFloat_fill", _wrap_VectorTFloat_fill, METH_VARARGS, NULL},
	 { (char *)"VectorTFloat_setAll", _wrap_VectorTFloat_setAll, METH_VARARGS, NULL},
	 { (char *)"VectorTFloat_getSize", _wrap_VectorTFloat_getSize, METH_VARARGS, NULL},
	 { (char *)"VectorTFloat_getData", _wrap_VectorTFloat_getData, METH_VARARGS, NULL},
	 { (char *)"VectorTFloat_swigregister", VectorTFloat_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VectorFloat", _wrap_new_VectorFloat, METH_VARARGS, NULL},
	 { (char *)"delete_VectorFloat", _wrap_delete_VectorFloat, METH_VARARGS, NULL},
	 { (char *)"VectorFloat_save", _wrap_VectorFloat_save, METH_VARARGS, NULL},
	 { (char *)"VectorFloat_load", _wrap_VectorFloat_load, METH_VARARGS, NULL},
	 { (char *)"VectorFloat__print", _wrap_VectorFloat__print, METH_VARARGS, NULL},
	 { (char *)"VectorFloat_scale", _wrap_VectorFloat_scale, METH_VARARGS, NULL},
	 { (char *)"VectorFloat_getMinValue", _wrap_VectorFloat_getMinValue, METH_VARARGS, NULL},
	 { (char *)"VectorFloat_getMaxValue", _wrap_VectorFloat_getMaxValue, METH_VARARGS, NULL},
	 { (char *)"VectorFloat_getMean", _wrap_VectorFloat_getMean, METH_VARARGS, NULL},
	 { (char *)"VectorFloat_getStdDev", _wrap_VectorFloat_getStdDev, METH_VARARGS, NULL},
	 { (char *)"VectorFloat_getMinMax", _wrap_VectorFloat_getMinMax, METH_VARARGS, NULL},
	 { (char *)"VectorFloat_swigregister", VectorFloat_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MatrixTFloat", _wrap_new_MatrixTFloat, METH_VARARGS, NULL},
	 { (char *)"delete_MatrixTFloat", _wrap_delete_MatrixTFloat, METH_VARARGS, NULL},
	 { (char *)"MatrixTFloat_getRowVector", _wrap_MatrixTFloat_getRowVector, METH_VARARGS, NULL},
	 { (char *)"MatrixTFloat_getColVector", _wrap_MatrixTFloat_getColVector, METH_VARARGS, NULL},
	 { (char *)"MatrixTFloat_getConcatenatedVector", _wrap_MatrixTFloat_getConcatenatedVector, METH_VARARGS, NULL},
	 { (char *)"MatrixTFloat_resize", _wrap_MatrixTFloat_resize, METH_VARARGS, NULL},
	 { (char *)"MatrixTFloat_copy", _wrap_MatrixTFloat_copy, METH_VARARGS, NULL},
	 { (char *)"MatrixTFloat_setAllValues", _wrap_MatrixTFloat_setAllValues, METH_VARARGS, NULL},
	 { (char *)"MatrixTFloat_setAll", _wrap_MatrixTFloat_setAll, METH_VARARGS, NULL},
	 { (char *)"MatrixTFloat_setRowVector", _wrap_MatrixTFloat_setRowVector, METH_VARARGS, NULL},
	 { (char *)"MatrixTFloat_setColVector", _wrap_MatrixTFloat_setColVector, METH_VARARGS, NULL},
	 { (char *)"MatrixTFloat_push_back", _wrap_MatrixTFloat_push_back, METH_VARARGS, NULL},
	 { (char *)"MatrixTFloat_reserve", _wrap_MatrixTFloat_reserve, METH_VARARGS, NULL},
	 { (char *)"MatrixTFloat_clear", _wrap_MatrixTFloat_clear, METH_VARARGS, NULL},
	 { (char *)"MatrixTFloat_getNumRows", _wrap_MatrixTFloat_getNumRows, METH_VARARGS, NULL},
	 { (char *)"MatrixTFloat_getNumCols", _wrap_MatrixTFloat_getNumCols, METH_VARARGS, NULL},
	 { (char *)"MatrixTFloat_getCapacity", _wrap_MatrixTFloat_getCapacity, METH_VARARGS, NULL},
	 { (char *)"MatrixTFloat_getSize", _wrap_MatrixTFloat_getSize, METH_VARARGS, NULL},
	 { (char *)"MatrixTFloat_getDataPointer", _wrap_MatrixTFloat_getDataPointer, METH_VARARGS, NULL},
	 { (char *)"MatrixTFloat_getData", _wrap_MatrixTFloat_getData, METH_VARARGS, NULL},
	 { (char *)"MatrixTFloat_swigregister", MatrixTFloat_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MatrixFloat", _wrap_new_MatrixFloat, METH_VARARGS, NULL},
	 { (char *)"delete_MatrixFloat", _wrap_delete_MatrixFloat, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_getRow", _wrap_MatrixFloat_getRow, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_getCol", _wrap_MatrixFloat_getCol, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_save", _wrap_MatrixFloat_save, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_load", _wrap_MatrixFloat_load, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_saveToCSVFile", _wrap_MatrixFloat_saveToCSVFile, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_loadFromCSVFile", _wrap_MatrixFloat_loadFromCSVFile, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat__print", _wrap_MatrixFloat__print, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_transpose", _wrap_MatrixFloat_transpose, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_scale", _wrap_MatrixFloat_scale, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_znorm", _wrap_MatrixFloat_znorm, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_multiple", _wrap_MatrixFloat_multiple, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_add", _wrap_MatrixFloat_add, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_subtract", _wrap_MatrixFloat_subtract, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_getMinValue", _wrap_MatrixFloat_getMinValue, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_getMaxValue", _wrap_MatrixFloat_getMaxValue, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_getMean", _wrap_MatrixFloat_getMean, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_getStdDev", _wrap_MatrixFloat_getStdDev, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_getCovarianceMatrix", _wrap_MatrixFloat_getCovarianceMatrix, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_getRanges", _wrap_MatrixFloat_getRanges, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_getTrace", _wrap_MatrixFloat_getTrace, METH_VARARGS, NULL},
	 { (char *)"MatrixFloat_swigregister", MatrixFloat_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ClassificationData", _wrap_new_ClassificationData, METH_VARARGS, NULL},
	 { (char *)"delete_ClassificationData", _wrap_delete_ClassificationData, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_clear", _wrap_ClassificationData_clear, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_setNumDimensions", _wrap_ClassificationData_setNumDimensions, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_setDatasetName", _wrap_ClassificationData_setDatasetName, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_setInfoText", _wrap_ClassificationData_setInfoText, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_setClassNameForCorrespondingClassLabel", _wrap_ClassificationData_setClassNameForCorrespondingClassLabel, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_setAllowNullGestureClass", _wrap_ClassificationData_setAllowNullGestureClass, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_addSample", _wrap_ClassificationData_addSample, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_removeSample", _wrap_ClassificationData_removeSample, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_removeLastSample", _wrap_ClassificationData_removeLastSample, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_reserve", _wrap_ClassificationData_reserve, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_addClass", _wrap_ClassificationData_addClass, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_removeClass", _wrap_ClassificationData_removeClass, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_eraseAllSamplesWithClassLabel", _wrap_ClassificationData_eraseAllSamplesWithClassLabel, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_relabelAllSamplesWithClassLabel", _wrap_ClassificationData_relabelAllSamplesWithClassLabel, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_setExternalRanges", _wrap_ClassificationData_setExternalRanges, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_enableExternalRangeScaling", _wrap_ClassificationData_enableExternalRangeScaling, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_scale", _wrap_ClassificationData_scale, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_save", _wrap_ClassificationData_save, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_load", _wrap_ClassificationData_load, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_saveDatasetToFile", _wrap_ClassificationData_saveDatasetToFile, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_loadDatasetFromFile", _wrap_ClassificationData_loadDatasetFromFile, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_saveDatasetToCSVFile", _wrap_ClassificationData_saveDatasetToCSVFile, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_loadDatasetFromCSVFile", _wrap_ClassificationData_loadDatasetFromCSVFile, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_printStats", _wrap_ClassificationData_printStats, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_sortClassLabels", _wrap_ClassificationData_sortClassLabels, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_merge", _wrap_ClassificationData_merge, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_partition", _wrap_ClassificationData_partition, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_split", _wrap_ClassificationData_split, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_spiltDataIntoKFolds", _wrap_ClassificationData_spiltDataIntoKFolds, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getTrainingFoldData", _wrap_ClassificationData_getTrainingFoldData, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getTestFoldData", _wrap_ClassificationData_getTestFoldData, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getClassData", _wrap_ClassificationData_getClassData, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getBootstrappedDataset", _wrap_ClassificationData_getBootstrappedDataset, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_reformatAsRegressionData", _wrap_ClassificationData_reformatAsRegressionData, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_reformatAsUnlabelledData", _wrap_ClassificationData_reformatAsUnlabelledData, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getDatasetName", _wrap_ClassificationData_getDatasetName, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getInfoText", _wrap_ClassificationData_getInfoText, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getStatsAsString", _wrap_ClassificationData_getStatsAsString, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getNumDimensions", _wrap_ClassificationData_getNumDimensions, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getNumSamples", _wrap_ClassificationData_getNumSamples, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getNumClasses", _wrap_ClassificationData_getNumClasses, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getMinimumClassLabel", _wrap_ClassificationData_getMinimumClassLabel, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getMaximumClassLabel", _wrap_ClassificationData_getMaximumClassLabel, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getClassLabelIndexValue", _wrap_ClassificationData_getClassLabelIndexValue, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getClassNameForCorrespondingClassLabel", _wrap_ClassificationData_getClassNameForCorrespondingClassLabel, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getRanges", _wrap_ClassificationData_getRanges, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getClassLabels", _wrap_ClassificationData_getClassLabels, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getNumSamplesPerClass", _wrap_ClassificationData_getNumSamplesPerClass, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getClassTracker", _wrap_ClassificationData_getClassTracker, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getClassHistogramData", _wrap_ClassificationData_getClassHistogramData, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getHistogramData", _wrap_ClassificationData_getHistogramData, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getClassificationData", _wrap_ClassificationData_getClassificationData, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getClassProbabilities", _wrap_ClassificationData_getClassProbabilities, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getMean", _wrap_ClassificationData_getMean, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getStdDev", _wrap_ClassificationData_getStdDev, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getClassMean", _wrap_ClassificationData_getClassMean, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getClassStdDev", _wrap_ClassificationData_getClassStdDev, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getCovarianceMatrix", _wrap_ClassificationData_getCovarianceMatrix, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getClassDataIndexes", _wrap_ClassificationData_getClassDataIndexes, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getDataAsMatrixDouble", _wrap_ClassificationData_getDataAsMatrixDouble, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_getDataAsMatrixFloat", _wrap_ClassificationData_getDataAsMatrixFloat, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_generateGaussDataset", _wrap_ClassificationData_generateGaussDataset, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_generateGaussLinearDataset", _wrap_ClassificationData_generateGaussLinearDataset, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_get", _wrap_ClassificationData_get, METH_VARARGS, NULL},
	 { (char *)"ClassificationData_swigregister", ClassificationData_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ClassificationSample", _wrap_new_ClassificationSample, METH_VARARGS, NULL},
	 { (char *)"delete_ClassificationSample", _wrap_delete_ClassificationSample, METH_VARARGS, NULL},
	 { (char *)"ClassificationSample_clear", _wrap_ClassificationSample_clear, METH_VARARGS, NULL},
	 { (char *)"ClassificationSample_getNumDimensions", _wrap_ClassificationSample_getNumDimensions, METH_VARARGS, NULL},
	 { (char *)"ClassificationSample_getClassLabel", _wrap_ClassificationSample_getClassLabel, METH_VARARGS, NULL},
	 { (char *)"ClassificationSample_getSample", _wrap_ClassificationSample_getSample, METH_VARARGS, NULL},
	 { (char *)"ClassificationSample_set", _wrap_ClassificationSample_set, METH_VARARGS, NULL},
	 { (char *)"ClassificationSample_setClassLabel", _wrap_ClassificationSample_setClassLabel, METH_VARARGS, NULL},
	 { (char *)"ClassificationSample_setSample", _wrap_ClassificationSample_setSample, METH_VARARGS, NULL},
	 { (char *)"ClassificationSample_swigregister", ClassificationSample_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TimeSeriesClassificationData", _wrap_new_TimeSeriesClassificationData, METH_VARARGS, NULL},
	 { (char *)"delete_TimeSeriesClassificationData", _wrap_delete_TimeSeriesClassificationData, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_clear", _wrap_TimeSeriesClassificationData_clear, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_setNumDimensions", _wrap_TimeSeriesClassificationData_setNumDimensions, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_setDatasetName", _wrap_TimeSeriesClassificationData_setDatasetName, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_setInfoText", _wrap_TimeSeriesClassificationData_setInfoText, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_setClassNameForCorrespondingClassLabel", _wrap_TimeSeriesClassificationData_setClassNameForCorrespondingClassLabel, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_setAllowNullGestureClass", _wrap_TimeSeriesClassificationData_setAllowNullGestureClass, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_addSample", _wrap_TimeSeriesClassificationData_addSample, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_removeLastSample", _wrap_TimeSeriesClassificationData_removeLastSample, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_eraseAllSamplesWithClassLabel", _wrap_TimeSeriesClassificationData_eraseAllSamplesWithClassLabel, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_relabelAllSamplesWithClassLabel", _wrap_TimeSeriesClassificationData_relabelAllSamplesWithClassLabel, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_setExternalRanges", _wrap_TimeSeriesClassificationData_setExternalRanges, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_enableExternalRangeScaling", _wrap_TimeSeriesClassificationData_enableExternalRangeScaling, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_scale", _wrap_TimeSeriesClassificationData_scale, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_save", _wrap_TimeSeriesClassificationData_save, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_load", _wrap_TimeSeriesClassificationData_load, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_saveDatasetToFile", _wrap_TimeSeriesClassificationData_saveDatasetToFile, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_loadDatasetFromFile", _wrap_TimeSeriesClassificationData_loadDatasetFromFile, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_saveDatasetToCSVFile", _wrap_TimeSeriesClassificationData_saveDatasetToCSVFile, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_loadDatasetFromCSVFile", _wrap_TimeSeriesClassificationData_loadDatasetFromCSVFile, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_printStats", _wrap_TimeSeriesClassificationData_printStats, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_getStatsAsString", _wrap_TimeSeriesClassificationData_getStatsAsString, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_partition", _wrap_TimeSeriesClassificationData_partition, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_split", _wrap_TimeSeriesClassificationData_split, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_merge", _wrap_TimeSeriesClassificationData_merge, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_spiltDataIntoKFolds", _wrap_TimeSeriesClassificationData_spiltDataIntoKFolds, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_getTrainingFoldData", _wrap_TimeSeriesClassificationData_getTrainingFoldData, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_getTestFoldData", _wrap_TimeSeriesClassificationData_getTestFoldData, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_getClassData", _wrap_TimeSeriesClassificationData_getClassData, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_reformatAsUnlabelledData", _wrap_TimeSeriesClassificationData_reformatAsUnlabelledData, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_getDatasetName", _wrap_TimeSeriesClassificationData_getDatasetName, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_getInfoText", _wrap_TimeSeriesClassificationData_getInfoText, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_getNumDimensions", _wrap_TimeSeriesClassificationData_getNumDimensions, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_getNumSamples", _wrap_TimeSeriesClassificationData_getNumSamples, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_getNumClasses", _wrap_TimeSeriesClassificationData_getNumClasses, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_getMinimumClassLabel", _wrap_TimeSeriesClassificationData_getMinimumClassLabel, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_getMaximumClassLabel", _wrap_TimeSeriesClassificationData_getMaximumClassLabel, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_getClassLabelIndexValue", _wrap_TimeSeriesClassificationData_getClassLabelIndexValue, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_getClassNameForCorrespondingClassLabel", _wrap_TimeSeriesClassificationData_getClassNameForCorrespondingClassLabel, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_getRanges", _wrap_TimeSeriesClassificationData_getRanges, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_getClassTracker", _wrap_TimeSeriesClassificationData_getClassTracker, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_getClassificationData", _wrap_TimeSeriesClassificationData_getClassificationData, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_getDataAsMatrixFloat", _wrap_TimeSeriesClassificationData_getDataAsMatrixFloat, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_get", _wrap_TimeSeriesClassificationData_get, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationData_swigregister", TimeSeriesClassificationData_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TimeSeriesClassificationSample", _wrap_new_TimeSeriesClassificationSample, METH_VARARGS, NULL},
	 { (char *)"delete_TimeSeriesClassificationSample", _wrap_delete_TimeSeriesClassificationSample, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationSample_clear", _wrap_TimeSeriesClassificationSample_clear, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationSample_addSample", _wrap_TimeSeriesClassificationSample_addSample, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationSample_setTrainingSample", _wrap_TimeSeriesClassificationSample_setTrainingSample, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationSample_getLength", _wrap_TimeSeriesClassificationSample_getLength, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationSample_getNumDimensions", _wrap_TimeSeriesClassificationSample_getNumDimensions, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationSample_getClassLabel", _wrap_TimeSeriesClassificationSample_getClassLabel, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationSample_getData", _wrap_TimeSeriesClassificationSample_getData, METH_VARARGS, NULL},
	 { (char *)"TimeSeriesClassificationSample_swigregister", TimeSeriesClassificationSample_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TrainingResultsObserverManager", _wrap_new_TrainingResultsObserverManager, METH_VARARGS, NULL},
	 { (char *)"delete_TrainingResultsObserverManager", _wrap_delete_TrainingResultsObserverManager, METH_VARARGS, NULL},
	 { (char *)"TrainingResultsObserverManager_swigregister", TrainingResultsObserverManager_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TestResultsObserverManager", _wrap_new_TestResultsObserverManager, METH_VARARGS, NULL},
	 { (char *)"delete_TestResultsObserverManager", _wrap_delete_TestResultsObserverManager, METH_VARARGS, NULL},
	 { (char *)"TestResultsObserverManager_swigregister", TestResultsObserverManager_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MLBase", _wrap_new_MLBase, METH_VARARGS, NULL},
	 { (char *)"delete_MLBase", _wrap_delete_MLBase, METH_VARARGS, NULL},
	 { (char *)"MLBase_copyMLBaseVariables", _wrap_MLBase_copyMLBaseVariables, METH_VARARGS, NULL},
	 { (char *)"MLBase_train", _wrap_MLBase_train, METH_VARARGS, NULL},
	 { (char *)"MLBase_train_", _wrap_MLBase_train_, METH_VARARGS, NULL},
	 { (char *)"MLBase_predict", _wrap_MLBase_predict, METH_VARARGS, NULL},
	 { (char *)"MLBase_predict_", _wrap_MLBase_predict_, METH_VARARGS, NULL},
	 { (char *)"MLBase_map", _wrap_MLBase_map, METH_VARARGS, NULL},
	 { (char *)"MLBase_map_", _wrap_MLBase_map_, METH_VARARGS, NULL},
	 { (char *)"MLBase_reset", _wrap_MLBase_reset, METH_VARARGS, NULL},
	 { (char *)"MLBase_clear", _wrap_MLBase_clear, METH_VARARGS, NULL},
	 { (char *)"MLBase__print", _wrap_MLBase__print, METH_VARARGS, NULL},
	 { (char *)"MLBase_save", _wrap_MLBase_save, METH_VARARGS, NULL},
	 { (char *)"MLBase_load", _wrap_MLBase_load, METH_VARARGS, NULL},
	 { (char *)"MLBase_saveModelToFile", _wrap_MLBase_saveModelToFile, METH_VARARGS, NULL},
	 { (char *)"MLBase_loadModelFromFile", _wrap_MLBase_loadModelFromFile, METH_VARARGS, NULL},
	 { (char *)"MLBase_getModel", _wrap_MLBase_getModel, METH_VARARGS, NULL},
	 { (char *)"MLBase_getModelAsString", _wrap_MLBase_getModelAsString, METH_VARARGS, NULL},
	 { (char *)"MLBase_getInputType", _wrap_MLBase_getInputType, METH_VARARGS, NULL},
	 { (char *)"MLBase_getOutputType", _wrap_MLBase_getOutputType, METH_VARARGS, NULL},
	 { (char *)"MLBase_getType", _wrap_MLBase_getType, METH_VARARGS, NULL},
	 { (char *)"MLBase_getNumInputFeatures", _wrap_MLBase_getNumInputFeatures, METH_VARARGS, NULL},
	 { (char *)"MLBase_getNumInputDimensions", _wrap_MLBase_getNumInputDimensions, METH_VARARGS, NULL},
	 { (char *)"MLBase_getNumOutputDimensions", _wrap_MLBase_getNumOutputDimensions, METH_VARARGS, NULL},
	 { (char *)"MLBase_getMinNumEpochs", _wrap_MLBase_getMinNumEpochs, METH_VARARGS, NULL},
	 { (char *)"MLBase_getMaxNumEpochs", _wrap_MLBase_getMaxNumEpochs, METH_VARARGS, NULL},
	 { (char *)"MLBase_getBatchSize", _wrap_MLBase_getBatchSize, METH_VARARGS, NULL},
	 { (char *)"MLBase_getNumRestarts", _wrap_MLBase_getNumRestarts, METH_VARARGS, NULL},
	 { (char *)"MLBase_getValidationSetSize", _wrap_MLBase_getValidationSetSize, METH_VARARGS, NULL},
	 { (char *)"MLBase_getNumTrainingIterationsToConverge", _wrap_MLBase_getNumTrainingIterationsToConverge, METH_VARARGS, NULL},
	 { (char *)"MLBase_getLearningRate", _wrap_MLBase_getLearningRate, METH_VARARGS, NULL},
	 { (char *)"MLBase_getRMSTrainingError", _wrap_MLBase_getRMSTrainingError, METH_VARARGS, NULL},
	 { (char *)"MLBase_getRootMeanSquaredTrainingError", _wrap_MLBase_getRootMeanSquaredTrainingError, METH_VARARGS, NULL},
	 { (char *)"MLBase_getTotalSquaredTrainingError", _wrap_MLBase_getTotalSquaredTrainingError, METH_VARARGS, NULL},
	 { (char *)"MLBase_getRMSValidationError", _wrap_MLBase_getRMSValidationError, METH_VARARGS, NULL},
	 { (char *)"MLBase_getValidationSetAccuracy", _wrap_MLBase_getValidationSetAccuracy, METH_VARARGS, NULL},
	 { (char *)"MLBase_getValidationSetPrecision", _wrap_MLBase_getValidationSetPrecision, METH_VARARGS, NULL},
	 { (char *)"MLBase_getValidationSetRecall", _wrap_MLBase_getValidationSetRecall, METH_VARARGS, NULL},
	 { (char *)"MLBase_getUseValidationSet", _wrap_MLBase_getUseValidationSet, METH_VARARGS, NULL},
	 { (char *)"MLBase_getTrained", _wrap_MLBase_getTrained, METH_VARARGS, NULL},
	 { (char *)"MLBase_getModelTrained", _wrap_MLBase_getModelTrained, METH_VARARGS, NULL},
	 { (char *)"MLBase_getConverged", _wrap_MLBase_getConverged, METH_VARARGS, NULL},
	 { (char *)"MLBase_getScalingEnabled", _wrap_MLBase_getScalingEnabled, METH_VARARGS, NULL},
	 { (char *)"MLBase_getIsBaseTypeClassifier", _wrap_MLBase_getIsBaseTypeClassifier, METH_VARARGS, NULL},
	 { (char *)"MLBase_getIsBaseTypeRegressifier", _wrap_MLBase_getIsBaseTypeRegressifier, METH_VARARGS, NULL},
	 { (char *)"MLBase_getIsBaseTypeClusterer", _wrap_MLBase_getIsBaseTypeClusterer, METH_VARARGS, NULL},
	 { (char *)"MLBase_getTrainingLoggingEnabled", _wrap_MLBase_getTrainingLoggingEnabled, METH_VARARGS, NULL},
	 { (char *)"MLBase_getTestingLoggingEnabled", _wrap_MLBase_getTestingLoggingEnabled, METH_VARARGS, NULL},
	 { (char *)"MLBase_enableScaling", _wrap_MLBase_enableScaling, METH_VARARGS, NULL},
	 { (char *)"MLBase_setMaxNumEpochs", _wrap_MLBase_setMaxNumEpochs, METH_VARARGS, NULL},
	 { (char *)"MLBase_setBatchSize", _wrap_MLBase_setBatchSize, METH_VARARGS, NULL},
	 { (char *)"MLBase_setMinNumEpochs", _wrap_MLBase_setMinNumEpochs, METH_VARARGS, NULL},
	 { (char *)"MLBase_setNumRestarts", _wrap_MLBase_setNumRestarts, METH_VARARGS, NULL},
	 { (char *)"MLBase_setMinChange", _wrap_MLBase_setMinChange, METH_VARARGS, NULL},
	 { (char *)"MLBase_setLearningRate", _wrap_MLBase_setLearningRate, METH_VARARGS, NULL},
	 { (char *)"MLBase_setUseValidationSet", _wrap_MLBase_setUseValidationSet, METH_VARARGS, NULL},
	 { (char *)"MLBase_setValidationSetSize", _wrap_MLBase_setValidationSetSize, METH_VARARGS, NULL},
	 { (char *)"MLBase_setRandomiseTrainingOrder", _wrap_MLBase_setRandomiseTrainingOrder, METH_VARARGS, NULL},
	 { (char *)"MLBase_setTrainingLoggingEnabled", _wrap_MLBase_setTrainingLoggingEnabled, METH_VARARGS, NULL},
	 { (char *)"MLBase_setTestingLoggingEnabled", _wrap_MLBase_setTestingLoggingEnabled, METH_VARARGS, NULL},
	 { (char *)"MLBase_registerTrainingResultsObserver", _wrap_MLBase_registerTrainingResultsObserver, METH_VARARGS, NULL},
	 { (char *)"MLBase_registerTestResultsObserver", _wrap_MLBase_registerTestResultsObserver, METH_VARARGS, NULL},
	 { (char *)"MLBase_removeTrainingResultsObserver", _wrap_MLBase_removeTrainingResultsObserver, METH_VARARGS, NULL},
	 { (char *)"MLBase_removeTestResultsObserver", _wrap_MLBase_removeTestResultsObserver, METH_VARARGS, NULL},
	 { (char *)"MLBase_removeAllTrainingObservers", _wrap_MLBase_removeAllTrainingObservers, METH_VARARGS, NULL},
	 { (char *)"MLBase_removeAllTestObservers", _wrap_MLBase_removeAllTestObservers, METH_VARARGS, NULL},
	 { (char *)"MLBase_notifyTrainingResultsObservers", _wrap_MLBase_notifyTrainingResultsObservers, METH_VARARGS, NULL},
	 { (char *)"MLBase_notifyTestResultsObservers", _wrap_MLBase_notifyTestResultsObservers, METH_VARARGS, NULL},
	 { (char *)"MLBase_getMLBasePointer", _wrap_MLBase_getMLBasePointer, METH_VARARGS, NULL},
	 { (char *)"MLBase_getTrainingResults", _wrap_MLBase_getTrainingResults, METH_VARARGS, NULL},
	 { (char *)"MLBase_swigregister", MLBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Classifier", _wrap_new_Classifier, METH_VARARGS, NULL},
	 { (char *)"delete_Classifier", _wrap_delete_Classifier, METH_VARARGS, NULL},
	 { (char *)"Classifier_deepCopyFrom", _wrap_Classifier_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"Classifier_copyBaseVariables", _wrap_Classifier_copyBaseVariables, METH_VARARGS, NULL},
	 { (char *)"Classifier_reset", _wrap_Classifier_reset, METH_VARARGS, NULL},
	 { (char *)"Classifier_clear", _wrap_Classifier_clear, METH_VARARGS, NULL},
	 { (char *)"Classifier_computeAccuracy", _wrap_Classifier_computeAccuracy, METH_VARARGS, NULL},
	 { (char *)"Classifier_getClassifierType", _wrap_Classifier_getClassifierType, METH_VARARGS, NULL},
	 { (char *)"Classifier_getSupportsNullRejection", _wrap_Classifier_getSupportsNullRejection, METH_VARARGS, NULL},
	 { (char *)"Classifier_getNullRejectionEnabled", _wrap_Classifier_getNullRejectionEnabled, METH_VARARGS, NULL},
	 { (char *)"Classifier_getNullRejectionCoeff", _wrap_Classifier_getNullRejectionCoeff, METH_VARARGS, NULL},
	 { (char *)"Classifier_getMaximumLikelihood", _wrap_Classifier_getMaximumLikelihood, METH_VARARGS, NULL},
	 { (char *)"Classifier_getBestDistance", _wrap_Classifier_getBestDistance, METH_VARARGS, NULL},
	 { (char *)"Classifier_getPhase", _wrap_Classifier_getPhase, METH_VARARGS, NULL},
	 { (char *)"Classifier_getTrainingSetAccuracy", _wrap_Classifier_getTrainingSetAccuracy, METH_VARARGS, NULL},
	 { (char *)"Classifier_getNumClasses", _wrap_Classifier_getNumClasses, METH_VARARGS, NULL},
	 { (char *)"Classifier_getClassLabelIndexValue", _wrap_Classifier_getClassLabelIndexValue, METH_VARARGS, NULL},
	 { (char *)"Classifier_getPredictedClassLabel", _wrap_Classifier_getPredictedClassLabel, METH_VARARGS, NULL},
	 { (char *)"Classifier_getClassLikelihoods", _wrap_Classifier_getClassLikelihoods, METH_VARARGS, NULL},
	 { (char *)"Classifier_getClassDistances", _wrap_Classifier_getClassDistances, METH_VARARGS, NULL},
	 { (char *)"Classifier_getNullRejectionThresholds", _wrap_Classifier_getNullRejectionThresholds, METH_VARARGS, NULL},
	 { (char *)"Classifier_getClassLabels", _wrap_Classifier_getClassLabels, METH_VARARGS, NULL},
	 { (char *)"Classifier_getRanges", _wrap_Classifier_getRanges, METH_VARARGS, NULL},
	 { (char *)"Classifier_enableNullRejection", _wrap_Classifier_enableNullRejection, METH_VARARGS, NULL},
	 { (char *)"Classifier_setNullRejectionCoeff", _wrap_Classifier_setNullRejectionCoeff, METH_VARARGS, NULL},
	 { (char *)"Classifier_setNullRejectionThresholds", _wrap_Classifier_setNullRejectionThresholds, METH_VARARGS, NULL},
	 { (char *)"Classifier_recomputeNullRejectionThresholds", _wrap_Classifier_recomputeNullRejectionThresholds, METH_VARARGS, NULL},
	 { (char *)"Classifier_getTimeseriesCompatible", _wrap_Classifier_getTimeseriesCompatible, METH_VARARGS, NULL},
	 { (char *)"Classifier_create", _wrap_Classifier_create, METH_VARARGS, NULL},
	 { (char *)"Classifier_createNewInstance", _wrap_Classifier_createNewInstance, METH_VARARGS, NULL},
	 { (char *)"Classifier_createInstanceFromString", _wrap_Classifier_createInstanceFromString, METH_VARARGS, NULL},
	 { (char *)"Classifier_deepCopy", _wrap_Classifier_deepCopy, METH_VARARGS, NULL},
	 { (char *)"Classifier_getClassifierPointer", _wrap_Classifier_getClassifierPointer, METH_VARARGS, NULL},
	 { (char *)"Classifier_getBaseClassifier", _wrap_Classifier_getBaseClassifier, METH_VARARGS, NULL},
	 { (char *)"Classifier_getRegisteredClassifiers", _wrap_Classifier_getRegisteredClassifiers, METH_VARARGS, NULL},
	 { (char *)"Classifier_swigregister", Classifier_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GestureRecognitionPipeline", _wrap_new_GestureRecognitionPipeline, METH_VARARGS, NULL},
	 { (char *)"delete_GestureRecognitionPipeline", _wrap_delete_GestureRecognitionPipeline, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline___lshift__", _wrap_GestureRecognitionPipeline___lshift__, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_test", _wrap_GestureRecognitionPipeline_test, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_predict_", _wrap_GestureRecognitionPipeline_predict_, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_map_", _wrap_GestureRecognitionPipeline_map_, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_reset", _wrap_GestureRecognitionPipeline_reset, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_clear", _wrap_GestureRecognitionPipeline_clear, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_clearModel", _wrap_GestureRecognitionPipeline_clearModel, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_save", _wrap_GestureRecognitionPipeline_save, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_savePipelineToFile", _wrap_GestureRecognitionPipeline_savePipelineToFile, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_load", _wrap_GestureRecognitionPipeline_load, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_loadPipelineFromFile", _wrap_GestureRecognitionPipeline_loadPipelineFromFile, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_preProcessData", _wrap_GestureRecognitionPipeline_preProcessData, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getIsInitialized", _wrap_GestureRecognitionPipeline_getIsInitialized, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getIsPreProcessingSet", _wrap_GestureRecognitionPipeline_getIsPreProcessingSet, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getIsFeatureExtractionSet", _wrap_GestureRecognitionPipeline_getIsFeatureExtractionSet, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getIsClassifierSet", _wrap_GestureRecognitionPipeline_getIsClassifierSet, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getIsRegressifierSet", _wrap_GestureRecognitionPipeline_getIsRegressifierSet, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getIsClustererSet", _wrap_GestureRecognitionPipeline_getIsClustererSet, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getIsPostProcessingSet", _wrap_GestureRecognitionPipeline_getIsPostProcessingSet, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getIsContextSet", _wrap_GestureRecognitionPipeline_getIsContextSet, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getIsPipelineModeSet", _wrap_GestureRecognitionPipeline_getIsPipelineModeSet, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getIsPipelineInClassificationMode", _wrap_GestureRecognitionPipeline_getIsPipelineInClassificationMode, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getIsPipelineInRegressionMode", _wrap_GestureRecognitionPipeline_getIsPipelineInRegressionMode, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getInputVectorDimensionsSize", _wrap_GestureRecognitionPipeline_getInputVectorDimensionsSize, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getOutputVectorDimensionsSize", _wrap_GestureRecognitionPipeline_getOutputVectorDimensionsSize, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getNumClassesInModel", _wrap_GestureRecognitionPipeline_getNumClassesInModel, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getNumClasses", _wrap_GestureRecognitionPipeline_getNumClasses, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getNumPreProcessingModules", _wrap_GestureRecognitionPipeline_getNumPreProcessingModules, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getNumFeatureExtractionModules", _wrap_GestureRecognitionPipeline_getNumFeatureExtractionModules, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getNumPostProcessingModules", _wrap_GestureRecognitionPipeline_getNumPostProcessingModules, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getPredictionModuleIndexPosition", _wrap_GestureRecognitionPipeline_getPredictionModuleIndexPosition, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getPredictedClassLabel", _wrap_GestureRecognitionPipeline_getPredictedClassLabel, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getUnProcessedPredictedClassLabel", _wrap_GestureRecognitionPipeline_getUnProcessedPredictedClassLabel, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getNumTrainingSamples", _wrap_GestureRecognitionPipeline_getNumTrainingSamples, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getNumTestSamples", _wrap_GestureRecognitionPipeline_getNumTestSamples, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getMaximumLikelihood", _wrap_GestureRecognitionPipeline_getMaximumLikelihood, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getPhase", _wrap_GestureRecognitionPipeline_getPhase, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getTrainingSetAccuracy", _wrap_GestureRecognitionPipeline_getTrainingSetAccuracy, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getCrossValidationAccuracy", _wrap_GestureRecognitionPipeline_getCrossValidationAccuracy, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getTestAccuracy", _wrap_GestureRecognitionPipeline_getTestAccuracy, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getTestRMSError", _wrap_GestureRecognitionPipeline_getTestRMSError, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getTestSSError", _wrap_GestureRecognitionPipeline_getTestSSError, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getTestRejectionPrecision", _wrap_GestureRecognitionPipeline_getTestRejectionPrecision, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getTestRejectionRecall", _wrap_GestureRecognitionPipeline_getTestRejectionRecall, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getTestTime", _wrap_GestureRecognitionPipeline_getTestTime, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getTrainingTime", _wrap_GestureRecognitionPipeline_getTrainingTime, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getTrainingRMSError", _wrap_GestureRecognitionPipeline_getTrainingRMSError, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getTrainingSSError", _wrap_GestureRecognitionPipeline_getTrainingSSError, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getTestConfusionMatrix", _wrap_GestureRecognitionPipeline_getTestConfusionMatrix, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getTrainingResults", _wrap_GestureRecognitionPipeline_getTrainingResults, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getTestResults", _wrap_GestureRecognitionPipeline_getTestResults, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getTestPrecision", _wrap_GestureRecognitionPipeline_getTestPrecision, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getTestRecall", _wrap_GestureRecognitionPipeline_getTestRecall, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getTestFMeasure", _wrap_GestureRecognitionPipeline_getTestFMeasure, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getClassLikelihoods", _wrap_GestureRecognitionPipeline_getClassLikelihoods, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getClassDistances", _wrap_GestureRecognitionPipeline_getClassDistances, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getNullRejectionThresholds", _wrap_GestureRecognitionPipeline_getNullRejectionThresholds, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getRegressionData", _wrap_GestureRecognitionPipeline_getRegressionData, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getUnProcessedRegressionData", _wrap_GestureRecognitionPipeline_getUnProcessedRegressionData, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getPreProcessedData", _wrap_GestureRecognitionPipeline_getPreProcessedData, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getFeatureExtractionData", _wrap_GestureRecognitionPipeline_getFeatureExtractionData, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getClassLabels", _wrap_GestureRecognitionPipeline_getClassLabels, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getTestInstanceResults", _wrap_GestureRecognitionPipeline_getTestInstanceResults, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getCrossValidationResults", _wrap_GestureRecognitionPipeline_getCrossValidationResults, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getPreProcessingModule", _wrap_GestureRecognitionPipeline_getPreProcessingModule, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getFeatureExtractionModule", _wrap_GestureRecognitionPipeline_getFeatureExtractionModule, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getClassifier", _wrap_GestureRecognitionPipeline_getClassifier, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getRegressifier", _wrap_GestureRecognitionPipeline_getRegressifier, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getClusterer", _wrap_GestureRecognitionPipeline_getClusterer, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getPostProcessingModule", _wrap_GestureRecognitionPipeline_getPostProcessingModule, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getContextModule", _wrap_GestureRecognitionPipeline_getContextModule, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getModelAsString", _wrap_GestureRecognitionPipeline_getModelAsString, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getPipelineModeAsString", _wrap_GestureRecognitionPipeline_getPipelineModeAsString, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getInfo", _wrap_GestureRecognitionPipeline_getInfo, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_getPipelineModeFromString", _wrap_GestureRecognitionPipeline_getPipelineModeFromString, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_addPreProcessingModule", _wrap_GestureRecognitionPipeline_addPreProcessingModule, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_setPreProcessingModule", _wrap_GestureRecognitionPipeline_setPreProcessingModule, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_addFeatureExtractionModule", _wrap_GestureRecognitionPipeline_addFeatureExtractionModule, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_setFeatureExtractionModule", _wrap_GestureRecognitionPipeline_setFeatureExtractionModule, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_setClassifier", _wrap_GestureRecognitionPipeline_setClassifier, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_setRegressifier", _wrap_GestureRecognitionPipeline_setRegressifier, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_setClusterer", _wrap_GestureRecognitionPipeline_setClusterer, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_addPostProcessingModule", _wrap_GestureRecognitionPipeline_addPostProcessingModule, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_setPostProcessingModule", _wrap_GestureRecognitionPipeline_setPostProcessingModule, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_addContextModule", _wrap_GestureRecognitionPipeline_addContextModule, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_updateContextModule", _wrap_GestureRecognitionPipeline_updateContextModule, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_removeAllPreProcessingModules", _wrap_GestureRecognitionPipeline_removeAllPreProcessingModules, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_removePreProcessingModule", _wrap_GestureRecognitionPipeline_removePreProcessingModule, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_removeAllFeatureExtractionModules", _wrap_GestureRecognitionPipeline_removeAllFeatureExtractionModules, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_removeFeatureExtractionModule", _wrap_GestureRecognitionPipeline_removeFeatureExtractionModule, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_removeClassifier", _wrap_GestureRecognitionPipeline_removeClassifier, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_removeRegressifier", _wrap_GestureRecognitionPipeline_removeRegressifier, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_removeClusterer", _wrap_GestureRecognitionPipeline_removeClusterer, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_removeAllPostProcessingModules", _wrap_GestureRecognitionPipeline_removeAllPostProcessingModules, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_removePostProcessingModule", _wrap_GestureRecognitionPipeline_removePostProcessingModule, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_removeAllContextModules", _wrap_GestureRecognitionPipeline_removeAllContextModules, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_removeContextModule", _wrap_GestureRecognitionPipeline_removeContextModule, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_clearAll", _wrap_GestureRecognitionPipeline_clearAll, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_clearTestResults", _wrap_GestureRecognitionPipeline_clearTestResults, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_setInfo", _wrap_GestureRecognitionPipeline_setInfo, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_train", _wrap_GestureRecognitionPipeline_train, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_train_", _wrap_GestureRecognitionPipeline_train_, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_predict", _wrap_GestureRecognitionPipeline_predict, METH_VARARGS, NULL},
	 { (char *)"GestureRecognitionPipeline_swigregister", GestureRecognitionPipeline_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KNN", _wrap_new_KNN, METH_VARARGS, NULL},
	 { (char *)"delete_KNN", _wrap_delete_KNN, METH_VARARGS, NULL},
	 { (char *)"KNN_deepCopyFrom", _wrap_KNN_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"KNN_clear", _wrap_KNN_clear, METH_VARARGS, NULL},
	 { (char *)"KNN_recomputeNullRejectionThresholds", _wrap_KNN_recomputeNullRejectionThresholds, METH_VARARGS, NULL},
	 { (char *)"KNN_getK", _wrap_KNN_getK, METH_VARARGS, NULL},
	 { (char *)"KNN_getDistanceMethod", _wrap_KNN_getDistanceMethod, METH_VARARGS, NULL},
	 { (char *)"KNN_setK", _wrap_KNN_setK, METH_VARARGS, NULL},
	 { (char *)"KNN_setMinKSearchValue", _wrap_KNN_setMinKSearchValue, METH_VARARGS, NULL},
	 { (char *)"KNN_setMaxKSearchValue", _wrap_KNN_setMaxKSearchValue, METH_VARARGS, NULL},
	 { (char *)"KNN_enableBestKValueSearch", _wrap_KNN_enableBestKValueSearch, METH_VARARGS, NULL},
	 { (char *)"KNN_setNullRejectionCoeff", _wrap_KNN_setNullRejectionCoeff, METH_VARARGS, NULL},
	 { (char *)"KNN_setDistanceMethod", _wrap_KNN_setDistanceMethod, METH_VARARGS, NULL},
	 { (char *)"KNN_getId", _wrap_KNN_getId, METH_VARARGS, NULL},
	 { (char *)"KNN_save", _wrap_KNN_save, METH_VARARGS, NULL},
	 { (char *)"KNN_load", _wrap_KNN_load, METH_VARARGS, NULL},
	 { (char *)"KNN_train_", _wrap_KNN_train_, METH_VARARGS, NULL},
	 { (char *)"KNN_predict_", _wrap_KNN_predict_, METH_VARARGS, NULL},
	 { (char *)"KNN_predict", _wrap_KNN_predict, METH_VARARGS, NULL},
	 { (char *)"KNN_swigregister", KNN_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_WeakClassifier", _wrap_delete_WeakClassifier, METH_VARARGS, NULL},
	 { (char *)"new_WeakClassifier", _wrap_new_WeakClassifier, METH_VARARGS, NULL},
	 { (char *)"WeakClassifier_copyBaseVariables", _wrap_WeakClassifier_copyBaseVariables, METH_VARARGS, NULL},
	 { (char *)"WeakClassifier_deepCopyFrom", _wrap_WeakClassifier_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"WeakClassifier_train", _wrap_WeakClassifier_train, METH_VARARGS, NULL},
	 { (char *)"WeakClassifier_predict", _wrap_WeakClassifier_predict, METH_VARARGS, NULL},
	 { (char *)"WeakClassifier_saveModelToFile", _wrap_WeakClassifier_saveModelToFile, METH_VARARGS, NULL},
	 { (char *)"WeakClassifier_loadModelFromFile", _wrap_WeakClassifier_loadModelFromFile, METH_VARARGS, NULL},
	 { (char *)"WeakClassifier__print", _wrap_WeakClassifier__print, METH_VARARGS, NULL},
	 { (char *)"WeakClassifier_getPositiveClassLabel", _wrap_WeakClassifier_getPositiveClassLabel, METH_VARARGS, NULL},
	 { (char *)"WeakClassifier_getNegativeClassLabel", _wrap_WeakClassifier_getNegativeClassLabel, METH_VARARGS, NULL},
	 { (char *)"WeakClassifier_getWeakClassifierType", _wrap_WeakClassifier_getWeakClassifierType, METH_VARARGS, NULL},
	 { (char *)"WeakClassifier_getTrained", _wrap_WeakClassifier_getTrained, METH_VARARGS, NULL},
	 { (char *)"WeakClassifier_getNumInputDimensions", _wrap_WeakClassifier_getNumInputDimensions, METH_VARARGS, NULL},
	 { (char *)"WeakClassifier_getTrainingLoggingEnabled", _wrap_WeakClassifier_getTrainingLoggingEnabled, METH_VARARGS, NULL},
	 { (char *)"WeakClassifier_setTrainingLoggingEnabled", _wrap_WeakClassifier_setTrainingLoggingEnabled, METH_VARARGS, NULL},
	 { (char *)"WeakClassifier_createInstanceFromString", _wrap_WeakClassifier_createInstanceFromString, METH_VARARGS, NULL},
	 { (char *)"WeakClassifier_createNewInstance", _wrap_WeakClassifier_createNewInstance, METH_VARARGS, NULL},
	 { (char *)"WeakClassifier_swigregister", WeakClassifier_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_DecisionStump", _wrap_delete_DecisionStump, METH_VARARGS, NULL},
	 { (char *)"new_DecisionStump", _wrap_new_DecisionStump, METH_VARARGS, NULL},
	 { (char *)"DecisionStump_deepCopyFrom", _wrap_DecisionStump_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"DecisionStump_train", _wrap_DecisionStump_train, METH_VARARGS, NULL},
	 { (char *)"DecisionStump_predict", _wrap_DecisionStump_predict, METH_VARARGS, NULL},
	 { (char *)"DecisionStump_saveModelToFile", _wrap_DecisionStump_saveModelToFile, METH_VARARGS, NULL},
	 { (char *)"DecisionStump_loadModelFromFile", _wrap_DecisionStump_loadModelFromFile, METH_VARARGS, NULL},
	 { (char *)"DecisionStump__print", _wrap_DecisionStump__print, METH_VARARGS, NULL},
	 { (char *)"DecisionStump_getDecisionFeatureIndex", _wrap_DecisionStump_getDecisionFeatureIndex, METH_VARARGS, NULL},
	 { (char *)"DecisionStump_getDirection", _wrap_DecisionStump_getDirection, METH_VARARGS, NULL},
	 { (char *)"DecisionStump_getNumRandomSplits", _wrap_DecisionStump_getNumRandomSplits, METH_VARARGS, NULL},
	 { (char *)"DecisionStump_getDecisionValue", _wrap_DecisionStump_getDecisionValue, METH_VARARGS, NULL},
	 { (char *)"DecisionStump_swigregister", DecisionStump_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_RadialBasisFunction", _wrap_delete_RadialBasisFunction, METH_VARARGS, NULL},
	 { (char *)"new_RadialBasisFunction", _wrap_new_RadialBasisFunction, METH_VARARGS, NULL},
	 { (char *)"RadialBasisFunction_deepCopyFrom", _wrap_RadialBasisFunction_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"RadialBasisFunction_train", _wrap_RadialBasisFunction_train, METH_VARARGS, NULL},
	 { (char *)"RadialBasisFunction_predict", _wrap_RadialBasisFunction_predict, METH_VARARGS, NULL},
	 { (char *)"RadialBasisFunction_saveModelToFile", _wrap_RadialBasisFunction_saveModelToFile, METH_VARARGS, NULL},
	 { (char *)"RadialBasisFunction_loadModelFromFile", _wrap_RadialBasisFunction_loadModelFromFile, METH_VARARGS, NULL},
	 { (char *)"RadialBasisFunction__print", _wrap_RadialBasisFunction__print, METH_VARARGS, NULL},
	 { (char *)"RadialBasisFunction_getNumSteps", _wrap_RadialBasisFunction_getNumSteps, METH_VARARGS, NULL},
	 { (char *)"RadialBasisFunction_getPositiveClassificationThreshold", _wrap_RadialBasisFunction_getPositiveClassificationThreshold, METH_VARARGS, NULL},
	 { (char *)"RadialBasisFunction_getAlpha", _wrap_RadialBasisFunction_getAlpha, METH_VARARGS, NULL},
	 { (char *)"RadialBasisFunction_getMinAlphaSearchRange", _wrap_RadialBasisFunction_getMinAlphaSearchRange, METH_VARARGS, NULL},
	 { (char *)"RadialBasisFunction_getMaxAlphaSearchRange", _wrap_RadialBasisFunction_getMaxAlphaSearchRange, METH_VARARGS, NULL},
	 { (char *)"RadialBasisFunction_getRBFCentre", _wrap_RadialBasisFunction_getRBFCentre, METH_VARARGS, NULL},
	 { (char *)"RadialBasisFunction_swigregister", RadialBasisFunction_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AdaBoost", _wrap_new_AdaBoost, METH_VARARGS, NULL},
	 { (char *)"delete_AdaBoost", _wrap_delete_AdaBoost, METH_VARARGS, NULL},
	 { (char *)"AdaBoost_deepCopyFrom", _wrap_AdaBoost_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"AdaBoost_clear", _wrap_AdaBoost_clear, METH_VARARGS, NULL},
	 { (char *)"AdaBoost_recomputeNullRejectionThresholds", _wrap_AdaBoost_recomputeNullRejectionThresholds, METH_VARARGS, NULL},
	 { (char *)"AdaBoost_setNullRejectionCoeff", _wrap_AdaBoost_setNullRejectionCoeff, METH_VARARGS, NULL},
	 { (char *)"AdaBoost_setWeakClassifier", _wrap_AdaBoost_setWeakClassifier, METH_VARARGS, NULL},
	 { (char *)"AdaBoost_addWeakClassifier", _wrap_AdaBoost_addWeakClassifier, METH_VARARGS, NULL},
	 { (char *)"AdaBoost_clearWeakClassifiers", _wrap_AdaBoost_clearWeakClassifiers, METH_VARARGS, NULL},
	 { (char *)"AdaBoost_setNumBoostingIterations", _wrap_AdaBoost_setNumBoostingIterations, METH_VARARGS, NULL},
	 { (char *)"AdaBoost_setPredictionMethod", _wrap_AdaBoost_setPredictionMethod, METH_VARARGS, NULL},
	 { (char *)"AdaBoost_printModel", _wrap_AdaBoost_printModel, METH_VARARGS, NULL},
	 { (char *)"AdaBoost_getModels", _wrap_AdaBoost_getModels, METH_VARARGS, NULL},
	 { (char *)"AdaBoost_getId", _wrap_AdaBoost_getId, METH_VARARGS, NULL},
	 { (char *)"AdaBoost_save", _wrap_AdaBoost_save, METH_VARARGS, NULL},
	 { (char *)"AdaBoost_load", _wrap_AdaBoost_load, METH_VARARGS, NULL},
	 { (char *)"AdaBoost_train", _wrap_AdaBoost_train, METH_VARARGS, NULL},
	 { (char *)"AdaBoost_train_", _wrap_AdaBoost_train_, METH_VARARGS, NULL},
	 { (char *)"AdaBoost_predict", _wrap_AdaBoost_predict, METH_VARARGS, NULL},
	 { (char *)"AdaBoost_predict_", _wrap_AdaBoost_predict_, METH_VARARGS, NULL},
	 { (char *)"AdaBoost_swigregister", AdaBoost_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ANBC_Model", _wrap_new_ANBC_Model, METH_VARARGS, NULL},
	 { (char *)"delete_ANBC_Model", _wrap_delete_ANBC_Model, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_train", _wrap_ANBC_Model_train, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_predict", _wrap_ANBC_Model_predict, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_predictUnnormed", _wrap_ANBC_Model_predictUnnormed, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_gauss", _wrap_ANBC_Model_gauss, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_unnormedGauss", _wrap_ANBC_Model_unnormedGauss, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_recomputeThresholdValue", _wrap_ANBC_Model_recomputeThresholdValue, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_N_set", _wrap_ANBC_Model_N_set, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_N_get", _wrap_ANBC_Model_N_get, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_classLabel_set", _wrap_ANBC_Model_classLabel_set, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_classLabel_get", _wrap_ANBC_Model_classLabel_get, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_threshold_set", _wrap_ANBC_Model_threshold_set, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_threshold_get", _wrap_ANBC_Model_threshold_get, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_gamma_set", _wrap_ANBC_Model_gamma_set, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_gamma_get", _wrap_ANBC_Model_gamma_get, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_trainingMu_set", _wrap_ANBC_Model_trainingMu_set, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_trainingMu_get", _wrap_ANBC_Model_trainingMu_get, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_trainingSigma_set", _wrap_ANBC_Model_trainingSigma_set, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_trainingSigma_get", _wrap_ANBC_Model_trainingSigma_get, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_mu_set", _wrap_ANBC_Model_mu_set, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_mu_get", _wrap_ANBC_Model_mu_get, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_sigma_set", _wrap_ANBC_Model_sigma_set, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_sigma_get", _wrap_ANBC_Model_sigma_get, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_weights_set", _wrap_ANBC_Model_weights_set, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_weights_get", _wrap_ANBC_Model_weights_get, METH_VARARGS, NULL},
	 { (char *)"ANBC_Model_swigregister", ANBC_Model_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ANBC", _wrap_new_ANBC, METH_VARARGS, NULL},
	 { (char *)"delete_ANBC", _wrap_delete_ANBC, METH_VARARGS, NULL},
	 { (char *)"ANBC_deepCopyFrom", _wrap_ANBC_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"ANBC_reset", _wrap_ANBC_reset, METH_VARARGS, NULL},
	 { (char *)"ANBC_clear", _wrap_ANBC_clear, METH_VARARGS, NULL},
	 { (char *)"ANBC_recomputeNullRejectionThresholds", _wrap_ANBC_recomputeNullRejectionThresholds, METH_VARARGS, NULL},
	 { (char *)"ANBC_getNullRejectionThresholds", _wrap_ANBC_getNullRejectionThresholds, METH_VARARGS, NULL},
	 { (char *)"ANBC_getModels", _wrap_ANBC_getModels, METH_VARARGS, NULL},
	 { (char *)"ANBC_setNullRejectionCoeff", _wrap_ANBC_setNullRejectionCoeff, METH_VARARGS, NULL},
	 { (char *)"ANBC_setWeights", _wrap_ANBC_setWeights, METH_VARARGS, NULL},
	 { (char *)"ANBC_clearWeights", _wrap_ANBC_clearWeights, METH_VARARGS, NULL},
	 { (char *)"ANBC_getId", _wrap_ANBC_getId, METH_VARARGS, NULL},
	 { (char *)"ANBC_save", _wrap_ANBC_save, METH_VARARGS, NULL},
	 { (char *)"ANBC_load", _wrap_ANBC_load, METH_VARARGS, NULL},
	 { (char *)"ANBC_train_", _wrap_ANBC_train_, METH_VARARGS, NULL},
	 { (char *)"ANBC_predict_", _wrap_ANBC_predict_, METH_VARARGS, NULL},
	 { (char *)"ANBC_swigregister", ANBC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BAG", _wrap_new_BAG, METH_VARARGS, NULL},
	 { (char *)"delete_BAG", _wrap_delete_BAG, METH_VARARGS, NULL},
	 { (char *)"BAG_deepCopyFrom", _wrap_BAG_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"BAG_reset", _wrap_BAG_reset, METH_VARARGS, NULL},
	 { (char *)"BAG_clear", _wrap_BAG_clear, METH_VARARGS, NULL},
	 { (char *)"BAG_getEnsembleSize", _wrap_BAG_getEnsembleSize, METH_VARARGS, NULL},
	 { (char *)"BAG_getEnsembleWeights", _wrap_BAG_getEnsembleWeights, METH_VARARGS, NULL},
	 { (char *)"BAG_getEnsemble", _wrap_BAG_getEnsemble, METH_VARARGS, NULL},
	 { (char *)"BAG_addClassifierToEnsemble", _wrap_BAG_addClassifierToEnsemble, METH_VARARGS, NULL},
	 { (char *)"BAG_clearEnsemble", _wrap_BAG_clearEnsemble, METH_VARARGS, NULL},
	 { (char *)"BAG_setWeights", _wrap_BAG_setWeights, METH_VARARGS, NULL},
	 { (char *)"BAG_getId", _wrap_BAG_getId, METH_VARARGS, NULL},
	 { (char *)"BAG_save", _wrap_BAG_save, METH_VARARGS, NULL},
	 { (char *)"BAG_load", _wrap_BAG_load, METH_VARARGS, NULL},
	 { (char *)"BAG_train_", _wrap_BAG_train_, METH_VARARGS, NULL},
	 { (char *)"BAG_predict_", _wrap_BAG_predict_, METH_VARARGS, NULL},
	 { (char *)"BAG_swigregister", BAG_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DecisionTreeNode", _wrap_new_DecisionTreeNode, METH_VARARGS, NULL},
	 { (char *)"delete_DecisionTreeNode", _wrap_delete_DecisionTreeNode, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeNode_computeBestSplit", _wrap_DecisionTreeNode_computeBestSplit, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeNode_clear", _wrap_DecisionTreeNode_clear, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeNode_getModel", _wrap_DecisionTreeNode_getModel, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeNode_deepCopy", _wrap_DecisionTreeNode_deepCopy, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeNode_getNodeSize", _wrap_DecisionTreeNode_getNodeSize, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeNode_getNumClasses", _wrap_DecisionTreeNode_getNumClasses, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeNode_getClassProbabilities", _wrap_DecisionTreeNode_getClassProbabilities, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeNode_setLeafNode", _wrap_DecisionTreeNode_setLeafNode, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeNode_setNodeSize", _wrap_DecisionTreeNode_setNodeSize, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeNode_setClassProbabilities", _wrap_DecisionTreeNode_setClassProbabilities, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeNode_getClassLabelIndexValue", _wrap_DecisionTreeNode_getClassLabelIndexValue, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeNode_swigregister", DecisionTreeNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DecisionTreeThresholdNode", _wrap_new_DecisionTreeThresholdNode, METH_VARARGS, NULL},
	 { (char *)"delete_DecisionTreeThresholdNode", _wrap_delete_DecisionTreeThresholdNode, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeThresholdNode_clear", _wrap_DecisionTreeThresholdNode_clear, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeThresholdNode__print", _wrap_DecisionTreeThresholdNode__print, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeThresholdNode_getModel", _wrap_DecisionTreeThresholdNode_getModel, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeThresholdNode_deepCopy", _wrap_DecisionTreeThresholdNode_deepCopy, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeThresholdNode_getFeatureIndex", _wrap_DecisionTreeThresholdNode_getFeatureIndex, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeThresholdNode_getThreshold", _wrap_DecisionTreeThresholdNode_getThreshold, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeThresholdNode_set", _wrap_DecisionTreeThresholdNode_set, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeThresholdNode_predict_", _wrap_DecisionTreeThresholdNode_predict_, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeThresholdNode_swigregister", DecisionTreeThresholdNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DecisionTreeTripleFeatureNode", _wrap_new_DecisionTreeTripleFeatureNode, METH_VARARGS, NULL},
	 { (char *)"delete_DecisionTreeTripleFeatureNode", _wrap_delete_DecisionTreeTripleFeatureNode, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeTripleFeatureNode_clear", _wrap_DecisionTreeTripleFeatureNode_clear, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeTripleFeatureNode__print", _wrap_DecisionTreeTripleFeatureNode__print, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeTripleFeatureNode_getModel", _wrap_DecisionTreeTripleFeatureNode_getModel, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeTripleFeatureNode_deepCopy", _wrap_DecisionTreeTripleFeatureNode_deepCopy, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeTripleFeatureNode_getFeatureIndexA", _wrap_DecisionTreeTripleFeatureNode_getFeatureIndexA, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeTripleFeatureNode_getFeatureIndexB", _wrap_DecisionTreeTripleFeatureNode_getFeatureIndexB, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeTripleFeatureNode_getFeatureIndexC", _wrap_DecisionTreeTripleFeatureNode_getFeatureIndexC, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeTripleFeatureNode_set", _wrap_DecisionTreeTripleFeatureNode_set, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeTripleFeatureNode_predict_", _wrap_DecisionTreeTripleFeatureNode_predict_, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeTripleFeatureNode_swigregister", DecisionTreeTripleFeatureNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DecisionTreeClusterNode", _wrap_new_DecisionTreeClusterNode, METH_VARARGS, NULL},
	 { (char *)"delete_DecisionTreeClusterNode", _wrap_delete_DecisionTreeClusterNode, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeClusterNode_clear", _wrap_DecisionTreeClusterNode_clear, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeClusterNode__print", _wrap_DecisionTreeClusterNode__print, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeClusterNode_computeFeatureWeights", _wrap_DecisionTreeClusterNode_computeFeatureWeights, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeClusterNode_computeLeafNodeWeights", _wrap_DecisionTreeClusterNode_computeLeafNodeWeights, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeClusterNode_getModel", _wrap_DecisionTreeClusterNode_getModel, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeClusterNode_deepCopy", _wrap_DecisionTreeClusterNode_deepCopy, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeClusterNode_getFeatureIndex", _wrap_DecisionTreeClusterNode_getFeatureIndex, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeClusterNode_getThreshold", _wrap_DecisionTreeClusterNode_getThreshold, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeClusterNode_set", _wrap_DecisionTreeClusterNode_set, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeClusterNode_predict_", _wrap_DecisionTreeClusterNode_predict_, METH_VARARGS, NULL},
	 { (char *)"DecisionTreeClusterNode_swigregister", DecisionTreeClusterNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DecisionTree", _wrap_new_DecisionTree, METH_VARARGS, NULL},
	 { (char *)"delete_DecisionTree", _wrap_delete_DecisionTree, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_deepCopyFrom", _wrap_DecisionTree_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_clear", _wrap_DecisionTree_clear, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_recomputeNullRejectionThresholds", _wrap_DecisionTree_recomputeNullRejectionThresholds, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_getModel", _wrap_DecisionTree_getModel, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_deepCopyTree", _wrap_DecisionTree_deepCopyTree, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_deepCopyDecisionTreeNode", _wrap_DecisionTree_deepCopyDecisionTreeNode, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_getTree", _wrap_DecisionTree_getTree, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_getTrainingMode", _wrap_DecisionTree_getTrainingMode, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_getNumSplittingSteps", _wrap_DecisionTree_getNumSplittingSteps, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_getMinNumSamplesPerNode", _wrap_DecisionTree_getMinNumSamplesPerNode, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_getMaxDepth", _wrap_DecisionTree_getMaxDepth, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_getPredictedNodeID", _wrap_DecisionTree_getPredictedNodeID, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_getRemoveFeaturesAtEachSplit", _wrap_DecisionTree_getRemoveFeaturesAtEachSplit, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_setTrainingMode", _wrap_DecisionTree_setTrainingMode, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_setNumSplittingSteps", _wrap_DecisionTree_setNumSplittingSteps, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_setMinNumSamplesPerNode", _wrap_DecisionTree_setMinNumSamplesPerNode, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_setMaxDepth", _wrap_DecisionTree_setMaxDepth, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_setRemoveFeaturesAtEachSplit", _wrap_DecisionTree_setRemoveFeaturesAtEachSplit, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_setRemoveFeaturesAtEachSpilt", _wrap_DecisionTree_setRemoveFeaturesAtEachSpilt, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_setDecisionTreeNode", _wrap_DecisionTree_setDecisionTreeNode, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_getId", _wrap_DecisionTree_getId, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_save", _wrap_DecisionTree_save, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_load", _wrap_DecisionTree_load, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_train_", _wrap_DecisionTree_train_, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_predict_", _wrap_DecisionTree_predict_, METH_VARARGS, NULL},
	 { (char *)"DecisionTree_swigregister", DecisionTree_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IndexDist", _wrap_new_IndexDist, METH_VARARGS, NULL},
	 { (char *)"delete_IndexDist", _wrap_delete_IndexDist, METH_VARARGS, NULL},
	 { (char *)"IndexDist_x_set", _wrap_IndexDist_x_set, METH_VARARGS, NULL},
	 { (char *)"IndexDist_x_get", _wrap_IndexDist_x_get, METH_VARARGS, NULL},
	 { (char *)"IndexDist_y_set", _wrap_IndexDist_y_set, METH_VARARGS, NULL},
	 { (char *)"IndexDist_y_get", _wrap_IndexDist_y_get, METH_VARARGS, NULL},
	 { (char *)"IndexDist_dist_set", _wrap_IndexDist_dist_set, METH_VARARGS, NULL},
	 { (char *)"IndexDist_dist_get", _wrap_IndexDist_dist_get, METH_VARARGS, NULL},
	 { (char *)"IndexDist_swigregister", IndexDist_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DTWTemplate", _wrap_new_DTWTemplate, METH_VARARGS, NULL},
	 { (char *)"delete_DTWTemplate", _wrap_delete_DTWTemplate, METH_VARARGS, NULL},
	 { (char *)"DTWTemplate_classLabel_set", _wrap_DTWTemplate_classLabel_set, METH_VARARGS, NULL},
	 { (char *)"DTWTemplate_classLabel_get", _wrap_DTWTemplate_classLabel_get, METH_VARARGS, NULL},
	 { (char *)"DTWTemplate_timeSeries_set", _wrap_DTWTemplate_timeSeries_set, METH_VARARGS, NULL},
	 { (char *)"DTWTemplate_timeSeries_get", _wrap_DTWTemplate_timeSeries_get, METH_VARARGS, NULL},
	 { (char *)"DTWTemplate_trainingMu_set", _wrap_DTWTemplate_trainingMu_set, METH_VARARGS, NULL},
	 { (char *)"DTWTemplate_trainingMu_get", _wrap_DTWTemplate_trainingMu_get, METH_VARARGS, NULL},
	 { (char *)"DTWTemplate_trainingSigma_set", _wrap_DTWTemplate_trainingSigma_set, METH_VARARGS, NULL},
	 { (char *)"DTWTemplate_trainingSigma_get", _wrap_DTWTemplate_trainingSigma_get, METH_VARARGS, NULL},
	 { (char *)"DTWTemplate_averageTemplateLength_set", _wrap_DTWTemplate_averageTemplateLength_set, METH_VARARGS, NULL},
	 { (char *)"DTWTemplate_averageTemplateLength_get", _wrap_DTWTemplate_averageTemplateLength_get, METH_VARARGS, NULL},
	 { (char *)"DTWTemplate_swigregister", DTWTemplate_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DTW", _wrap_new_DTW, METH_VARARGS, NULL},
	 { (char *)"delete_DTW", _wrap_delete_DTW, METH_VARARGS, NULL},
	 { (char *)"DTW_deepCopyFrom", _wrap_DTW_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"DTW_predict_", _wrap_DTW_predict_, METH_VARARGS, NULL},
	 { (char *)"DTW_reset", _wrap_DTW_reset, METH_VARARGS, NULL},
	 { (char *)"DTW_clear", _wrap_DTW_clear, METH_VARARGS, NULL},
	 { (char *)"DTW_recomputeNullRejectionThresholds", _wrap_DTW_recomputeNullRejectionThresholds, METH_VARARGS, NULL},
	 { (char *)"DTW_getNumTemplates", _wrap_DTW_getNumTemplates, METH_VARARGS, NULL},
	 { (char *)"DTW_setRejectionMode", _wrap_DTW_setRejectionMode, METH_VARARGS, NULL},
	 { (char *)"DTW_setNullRejectionThreshold", _wrap_DTW_setNullRejectionThreshold, METH_VARARGS, NULL},
	 { (char *)"DTW_setOffsetTimeseriesUsingFirstSample", _wrap_DTW_setOffsetTimeseriesUsingFirstSample, METH_VARARGS, NULL},
	 { (char *)"DTW_setContrainWarpingPath", _wrap_DTW_setContrainWarpingPath, METH_VARARGS, NULL},
	 { (char *)"DTW_setWarpingRadius", _wrap_DTW_setWarpingRadius, METH_VARARGS, NULL},
	 { (char *)"DTW_getRejectionMode", _wrap_DTW_getRejectionMode, METH_VARARGS, NULL},
	 { (char *)"DTW_enableZNormalization", _wrap_DTW_enableZNormalization, METH_VARARGS, NULL},
	 { (char *)"DTW_enableTrimTrainingData", _wrap_DTW_enableTrimTrainingData, METH_VARARGS, NULL},
	 { (char *)"DTW_getModels", _wrap_DTW_getModels, METH_VARARGS, NULL},
	 { (char *)"DTW_setModels", _wrap_DTW_setModels, METH_VARARGS, NULL},
	 { (char *)"DTW_getInputDataBuffer", _wrap_DTW_getInputDataBuffer, METH_VARARGS, NULL},
	 { (char *)"DTW_getDistanceMatrices", _wrap_DTW_getDistanceMatrices, METH_VARARGS, NULL},
	 { (char *)"DTW_getWarpingPaths", _wrap_DTW_getWarpingPaths, METH_VARARGS, NULL},
	 { (char *)"DTW_getId", _wrap_DTW_getId, METH_VARARGS, NULL},
	 { (char *)"DTW_save", _wrap_DTW_save, METH_VARARGS, NULL},
	 { (char *)"DTW_load", _wrap_DTW_load, METH_VARARGS, NULL},
	 { (char *)"DTW_train_", _wrap_DTW_train_, METH_VARARGS, NULL},
	 { (char *)"DTW_swigregister", DTW_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FSMParticle", _wrap_new_FSMParticle, METH_VARARGS, NULL},
	 { (char *)"delete_FSMParticle", _wrap_delete_FSMParticle, METH_VARARGS, NULL},
	 { (char *)"FSMParticle_currentState_set", _wrap_FSMParticle_currentState_set, METH_VARARGS, NULL},
	 { (char *)"FSMParticle_currentState_get", _wrap_FSMParticle_currentState_get, METH_VARARGS, NULL},
	 { (char *)"FSMParticle_swigregister", FSMParticle_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FiniteStateMachine", _wrap_new_FiniteStateMachine, METH_VARARGS, NULL},
	 { (char *)"delete_FiniteStateMachine", _wrap_delete_FiniteStateMachine, METH_VARARGS, NULL},
	 { (char *)"FiniteStateMachine_deepCopyFrom", _wrap_FiniteStateMachine_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"FiniteStateMachine_reset", _wrap_FiniteStateMachine_reset, METH_VARARGS, NULL},
	 { (char *)"FiniteStateMachine_clear", _wrap_FiniteStateMachine_clear, METH_VARARGS, NULL},
	 { (char *)"FiniteStateMachine__print", _wrap_FiniteStateMachine__print, METH_VARARGS, NULL},
	 { (char *)"FiniteStateMachine_setNumParticles", _wrap_FiniteStateMachine_setNumParticles, METH_VARARGS, NULL},
	 { (char *)"FiniteStateMachine_setNumClustersPerState", _wrap_FiniteStateMachine_setNumClustersPerState, METH_VARARGS, NULL},
	 { (char *)"FiniteStateMachine_setStateTransitionSmoothingCoeff", _wrap_FiniteStateMachine_setStateTransitionSmoothingCoeff, METH_VARARGS, NULL},
	 { (char *)"FiniteStateMachine_setMeasurementNoise", _wrap_FiniteStateMachine_setMeasurementNoise, METH_VARARGS, NULL},
	 { (char *)"FiniteStateMachine_getId", _wrap_FiniteStateMachine_getId, METH_VARARGS, NULL},
	 { (char *)"FiniteStateMachine_save", _wrap_FiniteStateMachine_save, METH_VARARGS, NULL},
	 { (char *)"FiniteStateMachine_load", _wrap_FiniteStateMachine_load, METH_VARARGS, NULL},
	 { (char *)"FiniteStateMachine_train_", _wrap_FiniteStateMachine_train_, METH_VARARGS, NULL},
	 { (char *)"FiniteStateMachine_predict_", _wrap_FiniteStateMachine_predict_, METH_VARARGS, NULL},
	 { (char *)"FiniteStateMachine_swigregister", FiniteStateMachine_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GuassModel", _wrap_new_GuassModel, METH_VARARGS, NULL},
	 { (char *)"delete_GuassModel", _wrap_delete_GuassModel, METH_VARARGS, NULL},
	 { (char *)"GuassModel_printModelValues", _wrap_GuassModel_printModelValues, METH_VARARGS, NULL},
	 { (char *)"GuassModel_det_set", _wrap_GuassModel_det_set, METH_VARARGS, NULL},
	 { (char *)"GuassModel_det_get", _wrap_GuassModel_det_get, METH_VARARGS, NULL},
	 { (char *)"GuassModel_mu_set", _wrap_GuassModel_mu_set, METH_VARARGS, NULL},
	 { (char *)"GuassModel_mu_get", _wrap_GuassModel_mu_get, METH_VARARGS, NULL},
	 { (char *)"GuassModel_sigma_set", _wrap_GuassModel_sigma_set, METH_VARARGS, NULL},
	 { (char *)"GuassModel_sigma_get", _wrap_GuassModel_sigma_get, METH_VARARGS, NULL},
	 { (char *)"GuassModel_invSigma_set", _wrap_GuassModel_invSigma_set, METH_VARARGS, NULL},
	 { (char *)"GuassModel_invSigma_get", _wrap_GuassModel_invSigma_get, METH_VARARGS, NULL},
	 { (char *)"GuassModel_swigregister", GuassModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MixtureModel", _wrap_new_MixtureModel, METH_VARARGS, NULL},
	 { (char *)"delete_MixtureModel", _wrap_delete_MixtureModel, METH_VARARGS, NULL},
	 { (char *)"MixtureModel_computeMixtureLikelihood", _wrap_MixtureModel_computeMixtureLikelihood, METH_VARARGS, NULL},
	 { (char *)"MixtureModel_resize", _wrap_MixtureModel_resize, METH_VARARGS, NULL},
	 { (char *)"MixtureModel_recomputeNullRejectionThreshold", _wrap_MixtureModel_recomputeNullRejectionThreshold, METH_VARARGS, NULL},
	 { (char *)"MixtureModel_recomputeNormalizationFactor", _wrap_MixtureModel_recomputeNormalizationFactor, METH_VARARGS, NULL},
	 { (char *)"MixtureModel_printModelValues", _wrap_MixtureModel_printModelValues, METH_VARARGS, NULL},
	 { (char *)"MixtureModel_getK", _wrap_MixtureModel_getK, METH_VARARGS, NULL},
	 { (char *)"MixtureModel_getClassLabel", _wrap_MixtureModel_getClassLabel, METH_VARARGS, NULL},
	 { (char *)"MixtureModel_getTrainingMu", _wrap_MixtureModel_getTrainingMu, METH_VARARGS, NULL},
	 { (char *)"MixtureModel_getTrainingSigma", _wrap_MixtureModel_getTrainingSigma, METH_VARARGS, NULL},
	 { (char *)"MixtureModel_getNullRejectionThreshold", _wrap_MixtureModel_getNullRejectionThreshold, METH_VARARGS, NULL},
	 { (char *)"MixtureModel_getNormalizationFactor", _wrap_MixtureModel_getNormalizationFactor, METH_VARARGS, NULL},
	 { (char *)"MixtureModel_setClassLabel", _wrap_MixtureModel_setClassLabel, METH_VARARGS, NULL},
	 { (char *)"MixtureModel_setNormalizationFactor", _wrap_MixtureModel_setNormalizationFactor, METH_VARARGS, NULL},
	 { (char *)"MixtureModel_setTrainingMuAndSigma", _wrap_MixtureModel_setTrainingMuAndSigma, METH_VARARGS, NULL},
	 { (char *)"MixtureModel_setNullRejectionThreshold", _wrap_MixtureModel_setNullRejectionThreshold, METH_VARARGS, NULL},
	 { (char *)"MixtureModel_swigregister", MixtureModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GMM", _wrap_new_GMM, METH_VARARGS, NULL},
	 { (char *)"delete_GMM", _wrap_delete_GMM, METH_VARARGS, NULL},
	 { (char *)"GMM_deepCopyFrom", _wrap_GMM_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"GMM_clear", _wrap_GMM_clear, METH_VARARGS, NULL},
	 { (char *)"GMM_recomputeNullRejectionThresholds", _wrap_GMM_recomputeNullRejectionThresholds, METH_VARARGS, NULL},
	 { (char *)"GMM_getNumMixtureModels", _wrap_GMM_getNumMixtureModels, METH_VARARGS, NULL},
	 { (char *)"GMM_getModels", _wrap_GMM_getModels, METH_VARARGS, NULL},
	 { (char *)"GMM_setNumMixtureModels", _wrap_GMM_setNumMixtureModels, METH_VARARGS, NULL},
	 { (char *)"GMM_setMaxIter", _wrap_GMM_setMaxIter, METH_VARARGS, NULL},
	 { (char *)"GMM_getId", _wrap_GMM_getId, METH_VARARGS, NULL},
	 { (char *)"GMM_save", _wrap_GMM_save, METH_VARARGS, NULL},
	 { (char *)"GMM_load", _wrap_GMM_load, METH_VARARGS, NULL},
	 { (char *)"GMM_train_", _wrap_GMM_train_, METH_VARARGS, NULL},
	 { (char *)"GMM_predict_", _wrap_GMM_predict_, METH_VARARGS, NULL},
	 { (char *)"GMM_swigregister", GMM_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ContinuousHiddenMarkovModel", _wrap_new_ContinuousHiddenMarkovModel, METH_VARARGS, NULL},
	 { (char *)"delete_ContinuousHiddenMarkovModel", _wrap_delete_ContinuousHiddenMarkovModel, METH_VARARGS, NULL},
	 { (char *)"ContinuousHiddenMarkovModel_predict_", _wrap_ContinuousHiddenMarkovModel_predict_, METH_VARARGS, NULL},
	 { (char *)"ContinuousHiddenMarkovModel_reset", _wrap_ContinuousHiddenMarkovModel_reset, METH_VARARGS, NULL},
	 { (char *)"ContinuousHiddenMarkovModel_clear", _wrap_ContinuousHiddenMarkovModel_clear, METH_VARARGS, NULL},
	 { (char *)"ContinuousHiddenMarkovModel__print", _wrap_ContinuousHiddenMarkovModel__print, METH_VARARGS, NULL},
	 { (char *)"ContinuousHiddenMarkovModel_getNumStates", _wrap_ContinuousHiddenMarkovModel_getNumStates, METH_VARARGS, NULL},
	 { (char *)"ContinuousHiddenMarkovModel_getClassLabel", _wrap_ContinuousHiddenMarkovModel_getClassLabel, METH_VARARGS, NULL},
	 { (char *)"ContinuousHiddenMarkovModel_getLoglikelihood", _wrap_ContinuousHiddenMarkovModel_getLoglikelihood, METH_VARARGS, NULL},
	 { (char *)"ContinuousHiddenMarkovModel_getPhase", _wrap_ContinuousHiddenMarkovModel_getPhase, METH_VARARGS, NULL},
	 { (char *)"ContinuousHiddenMarkovModel_getEstimatedStates", _wrap_ContinuousHiddenMarkovModel_getEstimatedStates, METH_VARARGS, NULL},
	 { (char *)"ContinuousHiddenMarkovModel_getAlpha", _wrap_ContinuousHiddenMarkovModel_getAlpha, METH_VARARGS, NULL},
	 { (char *)"ContinuousHiddenMarkovModel_setDownsampleFactor", _wrap_ContinuousHiddenMarkovModel_setDownsampleFactor, METH_VARARGS, NULL},
	 { (char *)"ContinuousHiddenMarkovModel_setModelType", _wrap_ContinuousHiddenMarkovModel_setModelType, METH_VARARGS, NULL},
	 { (char *)"ContinuousHiddenMarkovModel_setDelta", _wrap_ContinuousHiddenMarkovModel_setDelta, METH_VARARGS, NULL},
	 { (char *)"ContinuousHiddenMarkovModel_setSigma", _wrap_ContinuousHiddenMarkovModel_setSigma, METH_VARARGS, NULL},
	 { (char *)"ContinuousHiddenMarkovModel_setAutoEstimateSigma", _wrap_ContinuousHiddenMarkovModel_setAutoEstimateSigma, METH_VARARGS, NULL},
	 { (char *)"ContinuousHiddenMarkovModel_save", _wrap_ContinuousHiddenMarkovModel_save, METH_VARARGS, NULL},
	 { (char *)"ContinuousHiddenMarkovModel_load", _wrap_ContinuousHiddenMarkovModel_load, METH_VARARGS, NULL},
	 { (char *)"ContinuousHiddenMarkovModel_train_", _wrap_ContinuousHiddenMarkovModel_train_, METH_VARARGS, NULL},
	 { (char *)"ContinuousHiddenMarkovModel_swigregister", ContinuousHiddenMarkovModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HMMTrainingObject", _wrap_new_HMMTrainingObject, METH_VARARGS, NULL},
	 { (char *)"delete_HMMTrainingObject", _wrap_delete_HMMTrainingObject, METH_VARARGS, NULL},
	 { (char *)"HMMTrainingObject_alpha_set", _wrap_HMMTrainingObject_alpha_set, METH_VARARGS, NULL},
	 { (char *)"HMMTrainingObject_alpha_get", _wrap_HMMTrainingObject_alpha_get, METH_VARARGS, NULL},
	 { (char *)"HMMTrainingObject_beta_set", _wrap_HMMTrainingObject_beta_set, METH_VARARGS, NULL},
	 { (char *)"HMMTrainingObject_beta_get", _wrap_HMMTrainingObject_beta_get, METH_VARARGS, NULL},
	 { (char *)"HMMTrainingObject_c_set", _wrap_HMMTrainingObject_c_set, METH_VARARGS, NULL},
	 { (char *)"HMMTrainingObject_c_get", _wrap_HMMTrainingObject_c_get, METH_VARARGS, NULL},
	 { (char *)"HMMTrainingObject_pk_set", _wrap_HMMTrainingObject_pk_set, METH_VARARGS, NULL},
	 { (char *)"HMMTrainingObject_pk_get", _wrap_HMMTrainingObject_pk_get, METH_VARARGS, NULL},
	 { (char *)"HMMTrainingObject_swigregister", HMMTrainingObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DiscreteHiddenMarkovModel", _wrap_new_DiscreteHiddenMarkovModel, METH_VARARGS, NULL},
	 { (char *)"delete_DiscreteHiddenMarkovModel", _wrap_delete_DiscreteHiddenMarkovModel, METH_VARARGS, NULL},
	 { (char *)"DiscreteHiddenMarkovModel_resetModel", _wrap_DiscreteHiddenMarkovModel_resetModel, METH_VARARGS, NULL},
	 { (char *)"DiscreteHiddenMarkovModel_reset", _wrap_DiscreteHiddenMarkovModel_reset, METH_VARARGS, NULL},
	 { (char *)"DiscreteHiddenMarkovModel_randomizeMatrices", _wrap_DiscreteHiddenMarkovModel_randomizeMatrices, METH_VARARGS, NULL},
	 { (char *)"DiscreteHiddenMarkovModel_predictLogLikelihood", _wrap_DiscreteHiddenMarkovModel_predictLogLikelihood, METH_VARARGS, NULL},
	 { (char *)"DiscreteHiddenMarkovModel_forwardBackward", _wrap_DiscreteHiddenMarkovModel_forwardBackward, METH_VARARGS, NULL},
	 { (char *)"DiscreteHiddenMarkovModel__print", _wrap_DiscreteHiddenMarkovModel__print, METH_VARARGS, NULL},
	 { (char *)"DiscreteHiddenMarkovModel_getTrainingIterationLog", _wrap_DiscreteHiddenMarkovModel_getTrainingIterationLog, METH_VARARGS, NULL},
	 { (char *)"DiscreteHiddenMarkovModel_save", _wrap_DiscreteHiddenMarkovModel_save, METH_VARARGS, NULL},
	 { (char *)"DiscreteHiddenMarkovModel_load", _wrap_DiscreteHiddenMarkovModel_load, METH_VARARGS, NULL},
	 { (char *)"DiscreteHiddenMarkovModel_train", _wrap_DiscreteHiddenMarkovModel_train, METH_VARARGS, NULL},
	 { (char *)"DiscreteHiddenMarkovModel_train_", _wrap_DiscreteHiddenMarkovModel_train_, METH_VARARGS, NULL},
	 { (char *)"DiscreteHiddenMarkovModel_predict_", _wrap_DiscreteHiddenMarkovModel_predict_, METH_VARARGS, NULL},
	 { (char *)"DiscreteHiddenMarkovModel_predict", _wrap_DiscreteHiddenMarkovModel_predict, METH_VARARGS, NULL},
	 { (char *)"DiscreteHiddenMarkovModel_swigregister", DiscreteHiddenMarkovModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HMM", _wrap_new_HMM, METH_VARARGS, NULL},
	 { (char *)"delete_HMM", _wrap_delete_HMM, METH_VARARGS, NULL},
	 { (char *)"HMM_deepCopyFrom", _wrap_HMM_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"HMM_predict_", _wrap_HMM_predict_, METH_VARARGS, NULL},
	 { (char *)"HMM_reset", _wrap_HMM_reset, METH_VARARGS, NULL},
	 { (char *)"HMM_clear", _wrap_HMM_clear, METH_VARARGS, NULL},
	 { (char *)"HMM__print", _wrap_HMM__print, METH_VARARGS, NULL},
	 { (char *)"HMM_getHMMType", _wrap_HMM_getHMMType, METH_VARARGS, NULL},
	 { (char *)"HMM_getModelType", _wrap_HMM_getModelType, METH_VARARGS, NULL},
	 { (char *)"HMM_getDelta", _wrap_HMM_getDelta, METH_VARARGS, NULL},
	 { (char *)"HMM_getNumStates", _wrap_HMM_getNumStates, METH_VARARGS, NULL},
	 { (char *)"HMM_getNumSymbols", _wrap_HMM_getNumSymbols, METH_VARARGS, NULL},
	 { (char *)"HMM_getNumRandomTrainingIterations", _wrap_HMM_getNumRandomTrainingIterations, METH_VARARGS, NULL},
	 { (char *)"HMM_getDiscreteModels", _wrap_HMM_getDiscreteModels, METH_VARARGS, NULL},
	 { (char *)"HMM_getContinuousModels", _wrap_HMM_getContinuousModels, METH_VARARGS, NULL},
	 { (char *)"HMM_setHMMType", _wrap_HMM_setHMMType, METH_VARARGS, NULL},
	 { (char *)"HMM_setModelType", _wrap_HMM_setModelType, METH_VARARGS, NULL},
	 { (char *)"HMM_setDelta", _wrap_HMM_setDelta, METH_VARARGS, NULL},
	 { (char *)"HMM_setDownsampleFactor", _wrap_HMM_setDownsampleFactor, METH_VARARGS, NULL},
	 { (char *)"HMM_setCommitteeSize", _wrap_HMM_setCommitteeSize, METH_VARARGS, NULL},
	 { (char *)"HMM_setNumStates", _wrap_HMM_setNumStates, METH_VARARGS, NULL},
	 { (char *)"HMM_setNumSymbols", _wrap_HMM_setNumSymbols, METH_VARARGS, NULL},
	 { (char *)"HMM_setNumRandomTrainingIterations", _wrap_HMM_setNumRandomTrainingIterations, METH_VARARGS, NULL},
	 { (char *)"HMM_setSigma", _wrap_HMM_setSigma, METH_VARARGS, NULL},
	 { (char *)"HMM_setAutoEstimateSigma", _wrap_HMM_setAutoEstimateSigma, METH_VARARGS, NULL},
	 { (char *)"HMM_getId", _wrap_HMM_getId, METH_VARARGS, NULL},
	 { (char *)"HMM_save", _wrap_HMM_save, METH_VARARGS, NULL},
	 { (char *)"HMM_load", _wrap_HMM_load, METH_VARARGS, NULL},
	 { (char *)"HMM_train", _wrap_HMM_train, METH_VARARGS, NULL},
	 { (char *)"HMM_train_", _wrap_HMM_train_, METH_VARARGS, NULL},
	 { (char *)"HMM_swigregister", HMM_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MinDistModel", _wrap_new_MinDistModel, METH_VARARGS, NULL},
	 { (char *)"delete_MinDistModel", _wrap_delete_MinDistModel, METH_VARARGS, NULL},
	 { (char *)"MinDistModel_train", _wrap_MinDistModel_train, METH_VARARGS, NULL},
	 { (char *)"MinDistModel_predict", _wrap_MinDistModel_predict, METH_VARARGS, NULL},
	 { (char *)"MinDistModel_recomputeThresholdValue", _wrap_MinDistModel_recomputeThresholdValue, METH_VARARGS, NULL},
	 { (char *)"MinDistModel_getClassLabel", _wrap_MinDistModel_getClassLabel, METH_VARARGS, NULL},
	 { (char *)"MinDistModel_getNumFeatures", _wrap_MinDistModel_getNumFeatures, METH_VARARGS, NULL},
	 { (char *)"MinDistModel_getNumClusters", _wrap_MinDistModel_getNumClusters, METH_VARARGS, NULL},
	 { (char *)"MinDistModel_getRejectionThreshold", _wrap_MinDistModel_getRejectionThreshold, METH_VARARGS, NULL},
	 { (char *)"MinDistModel_getGamma", _wrap_MinDistModel_getGamma, METH_VARARGS, NULL},
	 { (char *)"MinDistModel_getTrainingMu", _wrap_MinDistModel_getTrainingMu, METH_VARARGS, NULL},
	 { (char *)"MinDistModel_getTrainingSigma", _wrap_MinDistModel_getTrainingSigma, METH_VARARGS, NULL},
	 { (char *)"MinDistModel_getClusters", _wrap_MinDistModel_getClusters, METH_VARARGS, NULL},
	 { (char *)"MinDistModel_setClassLabel", _wrap_MinDistModel_setClassLabel, METH_VARARGS, NULL},
	 { (char *)"MinDistModel_setClusters", _wrap_MinDistModel_setClusters, METH_VARARGS, NULL},
	 { (char *)"MinDistModel_setGamma", _wrap_MinDistModel_setGamma, METH_VARARGS, NULL},
	 { (char *)"MinDistModel_setRejectionThreshold", _wrap_MinDistModel_setRejectionThreshold, METH_VARARGS, NULL},
	 { (char *)"MinDistModel_setTrainingSigma", _wrap_MinDistModel_setTrainingSigma, METH_VARARGS, NULL},
	 { (char *)"MinDistModel_setTrainingMu", _wrap_MinDistModel_setTrainingMu, METH_VARARGS, NULL},
	 { (char *)"MinDistModel_setTrainingLoggingEnabled", _wrap_MinDistModel_setTrainingLoggingEnabled, METH_VARARGS, NULL},
	 { (char *)"MinDistModel_swigregister", MinDistModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MinDist", _wrap_new_MinDist, METH_VARARGS, NULL},
	 { (char *)"delete_MinDist", _wrap_delete_MinDist, METH_VARARGS, NULL},
	 { (char *)"MinDist_deepCopyFrom", _wrap_MinDist_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"MinDist_clear", _wrap_MinDist_clear, METH_VARARGS, NULL},
	 { (char *)"MinDist_recomputeNullRejectionThresholds", _wrap_MinDist_recomputeNullRejectionThresholds, METH_VARARGS, NULL},
	 { (char *)"MinDist_getNumClusters", _wrap_MinDist_getNumClusters, METH_VARARGS, NULL},
	 { (char *)"MinDist_getModels", _wrap_MinDist_getModels, METH_VARARGS, NULL},
	 { (char *)"MinDist_setNullRejectionCoeff", _wrap_MinDist_setNullRejectionCoeff, METH_VARARGS, NULL},
	 { (char *)"MinDist_setNumClusters", _wrap_MinDist_setNumClusters, METH_VARARGS, NULL},
	 { (char *)"MinDist_getId", _wrap_MinDist_getId, METH_VARARGS, NULL},
	 { (char *)"MinDist_save", _wrap_MinDist_save, METH_VARARGS, NULL},
	 { (char *)"MinDist_load", _wrap_MinDist_load, METH_VARARGS, NULL},
	 { (char *)"MinDist_train_", _wrap_MinDist_train_, METH_VARARGS, NULL},
	 { (char *)"MinDist_predict_", _wrap_MinDist_predict_, METH_VARARGS, NULL},
	 { (char *)"MinDist_swigregister", MinDist_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ParticleClassifierGestureTemplate", _wrap_new_ParticleClassifierGestureTemplate, METH_VARARGS, NULL},
	 { (char *)"delete_ParticleClassifierGestureTemplate", _wrap_delete_ParticleClassifierGestureTemplate, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierGestureTemplate_getLength", _wrap_ParticleClassifierGestureTemplate_getLength, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierGestureTemplate_classLabel_set", _wrap_ParticleClassifierGestureTemplate_classLabel_set, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierGestureTemplate_classLabel_get", _wrap_ParticleClassifierGestureTemplate_classLabel_get, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierGestureTemplate_timeseries_set", _wrap_ParticleClassifierGestureTemplate_timeseries_set, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierGestureTemplate_timeseries_get", _wrap_ParticleClassifierGestureTemplate_timeseries_get, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierGestureTemplate_swigregister", ParticleClassifierGestureTemplate_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ParticleClassifierParticleFilter", _wrap_new_ParticleClassifierParticleFilter, METH_VARARGS, NULL},
	 { (char *)"delete_ParticleClassifierParticleFilter", _wrap_delete_ParticleClassifierParticleFilter, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierParticleFilter_preFilterUpdate", _wrap_ParticleClassifierParticleFilter_preFilterUpdate, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierParticleFilter_postFilterUpdate", _wrap_ParticleClassifierParticleFilter_postFilterUpdate, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierParticleFilter_predict", _wrap_ParticleClassifierParticleFilter_predict, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierParticleFilter_update", _wrap_ParticleClassifierParticleFilter_update, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierParticleFilter_clear", _wrap_ParticleClassifierParticleFilter_clear, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierParticleFilter_train", _wrap_ParticleClassifierParticleFilter_train, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierParticleFilter_numInputDimensions_set", _wrap_ParticleClassifierParticleFilter_numInputDimensions_set, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierParticleFilter_numInputDimensions_get", _wrap_ParticleClassifierParticleFilter_numInputDimensions_get, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierParticleFilter_numTemplates_set", _wrap_ParticleClassifierParticleFilter_numTemplates_set, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierParticleFilter_numTemplates_get", _wrap_ParticleClassifierParticleFilter_numTemplates_get, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierParticleFilter_numClasses_set", _wrap_ParticleClassifierParticleFilter_numClasses_set, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierParticleFilter_numClasses_get", _wrap_ParticleClassifierParticleFilter_numClasses_get, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierParticleFilter_resampleCounter_set", _wrap_ParticleClassifierParticleFilter_resampleCounter_set, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierParticleFilter_resampleCounter_get", _wrap_ParticleClassifierParticleFilter_resampleCounter_get, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierParticleFilter_gestureTemplates_set", _wrap_ParticleClassifierParticleFilter_gestureTemplates_set, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierParticleFilter_gestureTemplates_get", _wrap_ParticleClassifierParticleFilter_gestureTemplates_get, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifierParticleFilter_swigregister", ParticleClassifierParticleFilter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ParticleClassifier", _wrap_new_ParticleClassifier, METH_VARARGS, NULL},
	 { (char *)"delete_ParticleClassifier", _wrap_delete_ParticleClassifier, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifier_deepCopyFrom", _wrap_ParticleClassifier_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifier_save", _wrap_ParticleClassifier_save, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifier_load", _wrap_ParticleClassifier_load, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifier_clear", _wrap_ParticleClassifier_clear, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifier_reset", _wrap_ParticleClassifier_reset, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifier_getId", _wrap_ParticleClassifier_getId, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifier_getGestureTemplates", _wrap_ParticleClassifier_getGestureTemplates, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifier_getParticleFilter", _wrap_ParticleClassifier_getParticleFilter, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifier_getStateEstimation", _wrap_ParticleClassifier_getStateEstimation, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifier_getPhase", _wrap_ParticleClassifier_getPhase, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifier_getVelocity", _wrap_ParticleClassifier_getVelocity, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifier_setNumParticles", _wrap_ParticleClassifier_setNumParticles, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifier_setSensorNoise", _wrap_ParticleClassifier_setSensorNoise, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifier_setTransitionSigma", _wrap_ParticleClassifier_setTransitionSigma, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifier_setPhaseSigma", _wrap_ParticleClassifier_setPhaseSigma, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifier_setVelocitySigma", _wrap_ParticleClassifier_setVelocitySigma, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifier_predict_", _wrap_ParticleClassifier_predict_, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifier_train_", _wrap_ParticleClassifier_train_, METH_VARARGS, NULL},
	 { (char *)"ParticleClassifier_swigregister", ParticleClassifier_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RandomForests", _wrap_new_RandomForests, METH_VARARGS, NULL},
	 { (char *)"delete_RandomForests", _wrap_delete_RandomForests, METH_VARARGS, NULL},
	 { (char *)"RandomForests_deepCopyFrom", _wrap_RandomForests_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"RandomForests_train_", _wrap_RandomForests_train_, METH_VARARGS, NULL},
	 { (char *)"RandomForests_predict_", _wrap_RandomForests_predict_, METH_VARARGS, NULL},
	 { (char *)"RandomForests_clear", _wrap_RandomForests_clear, METH_VARARGS, NULL},
	 { (char *)"RandomForests__print", _wrap_RandomForests__print, METH_VARARGS, NULL},
	 { (char *)"RandomForests_combineModels", _wrap_RandomForests_combineModels, METH_VARARGS, NULL},
	 { (char *)"RandomForests_getForestSize", _wrap_RandomForests_getForestSize, METH_VARARGS, NULL},
	 { (char *)"RandomForests_getNumRandomSplits", _wrap_RandomForests_getNumRandomSplits, METH_VARARGS, NULL},
	 { (char *)"RandomForests_getMinNumSamplesPerNode", _wrap_RandomForests_getMinNumSamplesPerNode, METH_VARARGS, NULL},
	 { (char *)"RandomForests_getMaxDepth", _wrap_RandomForests_getMaxDepth, METH_VARARGS, NULL},
	 { (char *)"RandomForests_getTrainingMode", _wrap_RandomForests_getTrainingMode, METH_VARARGS, NULL},
	 { (char *)"RandomForests_getForest", _wrap_RandomForests_getForest, METH_VARARGS, NULL},
	 { (char *)"RandomForests_getRemoveFeaturesAtEachSplit", _wrap_RandomForests_getRemoveFeaturesAtEachSplit, METH_VARARGS, NULL},
	 { (char *)"RandomForests_getBootstrappedDatasetWeight", _wrap_RandomForests_getBootstrappedDatasetWeight, METH_VARARGS, NULL},
	 { (char *)"RandomForests_getTree", _wrap_RandomForests_getTree, METH_VARARGS, NULL},
	 { (char *)"RandomForests_deepCopyDecisionTreeNode", _wrap_RandomForests_deepCopyDecisionTreeNode, METH_VARARGS, NULL},
	 { (char *)"RandomForests_getFeatureWeights", _wrap_RandomForests_getFeatureWeights, METH_VARARGS, NULL},
	 { (char *)"RandomForests_getLeafNodeFeatureWeights", _wrap_RandomForests_getLeafNodeFeatureWeights, METH_VARARGS, NULL},
	 { (char *)"RandomForests_setForestSize", _wrap_RandomForests_setForestSize, METH_VARARGS, NULL},
	 { (char *)"RandomForests_setNumRandomSplits", _wrap_RandomForests_setNumRandomSplits, METH_VARARGS, NULL},
	 { (char *)"RandomForests_setMinNumSamplesPerNode", _wrap_RandomForests_setMinNumSamplesPerNode, METH_VARARGS, NULL},
	 { (char *)"RandomForests_setMaxDepth", _wrap_RandomForests_setMaxDepth, METH_VARARGS, NULL},
	 { (char *)"RandomForests_setRemoveFeaturesAtEachSplit", _wrap_RandomForests_setRemoveFeaturesAtEachSplit, METH_VARARGS, NULL},
	 { (char *)"RandomForests_setRemoveFeaturesAtEachSpilt", _wrap_RandomForests_setRemoveFeaturesAtEachSpilt, METH_VARARGS, NULL},
	 { (char *)"RandomForests_setTrainingMode", _wrap_RandomForests_setTrainingMode, METH_VARARGS, NULL},
	 { (char *)"RandomForests_setDecisionTreeNode", _wrap_RandomForests_setDecisionTreeNode, METH_VARARGS, NULL},
	 { (char *)"RandomForests_setBootstrappedDatasetWeight", _wrap_RandomForests_setBootstrappedDatasetWeight, METH_VARARGS, NULL},
	 { (char *)"RandomForests_getId", _wrap_RandomForests_getId, METH_VARARGS, NULL},
	 { (char *)"RandomForests_save", _wrap_RandomForests_save, METH_VARARGS, NULL},
	 { (char *)"RandomForests_load", _wrap_RandomForests_load, METH_VARARGS, NULL},
	 { (char *)"RandomForests_swigregister", RandomForests_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SoftmaxModel", _wrap_new_SoftmaxModel, METH_VARARGS, NULL},
	 { (char *)"delete_SoftmaxModel", _wrap_delete_SoftmaxModel, METH_VARARGS, NULL},
	 { (char *)"SoftmaxModel_init", _wrap_SoftmaxModel_init, METH_VARARGS, NULL},
	 { (char *)"SoftmaxModel_compute", _wrap_SoftmaxModel_compute, METH_VARARGS, NULL},
	 { (char *)"SoftmaxModel_classLabel_set", _wrap_SoftmaxModel_classLabel_set, METH_VARARGS, NULL},
	 { (char *)"SoftmaxModel_classLabel_get", _wrap_SoftmaxModel_classLabel_get, METH_VARARGS, NULL},
	 { (char *)"SoftmaxModel_N_set", _wrap_SoftmaxModel_N_set, METH_VARARGS, NULL},
	 { (char *)"SoftmaxModel_N_get", _wrap_SoftmaxModel_N_get, METH_VARARGS, NULL},
	 { (char *)"SoftmaxModel_w_set", _wrap_SoftmaxModel_w_set, METH_VARARGS, NULL},
	 { (char *)"SoftmaxModel_w_get", _wrap_SoftmaxModel_w_get, METH_VARARGS, NULL},
	 { (char *)"SoftmaxModel_w0_set", _wrap_SoftmaxModel_w0_set, METH_VARARGS, NULL},
	 { (char *)"SoftmaxModel_w0_get", _wrap_SoftmaxModel_w0_get, METH_VARARGS, NULL},
	 { (char *)"SoftmaxModel_swigregister", SoftmaxModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Softmax", _wrap_new_Softmax, METH_VARARGS, NULL},
	 { (char *)"delete_Softmax", _wrap_delete_Softmax, METH_VARARGS, NULL},
	 { (char *)"Softmax_deepCopyFrom", _wrap_Softmax_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"Softmax_train_", _wrap_Softmax_train_, METH_VARARGS, NULL},
	 { (char *)"Softmax_predict_", _wrap_Softmax_predict_, METH_VARARGS, NULL},
	 { (char *)"Softmax_clear", _wrap_Softmax_clear, METH_VARARGS, NULL},
	 { (char *)"Softmax_getModels", _wrap_Softmax_getModels, METH_VARARGS, NULL},
	 { (char *)"Softmax_getId", _wrap_Softmax_getId, METH_VARARGS, NULL},
	 { (char *)"Softmax_save", _wrap_Softmax_save, METH_VARARGS, NULL},
	 { (char *)"Softmax_load", _wrap_Softmax_load, METH_VARARGS, NULL},
	 { (char *)"Softmax_swigregister", Softmax_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SVM", _wrap_new_SVM, METH_VARARGS, NULL},
	 { (char *)"delete_SVM", _wrap_delete_SVM, METH_VARARGS, NULL},
	 { (char *)"SVM_deepCopyFrom", _wrap_SVM_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"SVM_clear", _wrap_SVM_clear, METH_VARARGS, NULL},
	 { (char *)"SVM_init", _wrap_SVM_init, METH_VARARGS, NULL},
	 { (char *)"SVM_initDefaultSVMSettings", _wrap_SVM_initDefaultSVMSettings, METH_VARARGS, NULL},
	 { (char *)"SVM_getIsCrossValidationTrainingEnabled", _wrap_SVM_getIsCrossValidationTrainingEnabled, METH_VARARGS, NULL},
	 { (char *)"SVM_getIsAutoGammaEnabled", _wrap_SVM_getIsAutoGammaEnabled, METH_VARARGS, NULL},
	 { (char *)"SVM_getSVMType", _wrap_SVM_getSVMType, METH_VARARGS, NULL},
	 { (char *)"SVM_getKernelType", _wrap_SVM_getKernelType, METH_VARARGS, NULL},
	 { (char *)"SVM_getDegree", _wrap_SVM_getDegree, METH_VARARGS, NULL},
	 { (char *)"SVM_getNumClasses", _wrap_SVM_getNumClasses, METH_VARARGS, NULL},
	 { (char *)"SVM_getGamma", _wrap_SVM_getGamma, METH_VARARGS, NULL},
	 { (char *)"SVM_getNu", _wrap_SVM_getNu, METH_VARARGS, NULL},
	 { (char *)"SVM_getCoef0", _wrap_SVM_getCoef0, METH_VARARGS, NULL},
	 { (char *)"SVM_getC", _wrap_SVM_getC, METH_VARARGS, NULL},
	 { (char *)"SVM_getCrossValidationResult", _wrap_SVM_getCrossValidationResult, METH_VARARGS, NULL},
	 { (char *)"SVM_getLIBSVMModel", _wrap_SVM_getLIBSVMModel, METH_VARARGS, NULL},
	 { (char *)"SVM_setSVMType", _wrap_SVM_setSVMType, METH_VARARGS, NULL},
	 { (char *)"SVM_setKernelType", _wrap_SVM_setKernelType, METH_VARARGS, NULL},
	 { (char *)"SVM_setGamma", _wrap_SVM_setGamma, METH_VARARGS, NULL},
	 { (char *)"SVM_setDegree", _wrap_SVM_setDegree, METH_VARARGS, NULL},
	 { (char *)"SVM_setNu", _wrap_SVM_setNu, METH_VARARGS, NULL},
	 { (char *)"SVM_setCoef0", _wrap_SVM_setCoef0, METH_VARARGS, NULL},
	 { (char *)"SVM_setC", _wrap_SVM_setC, METH_VARARGS, NULL},
	 { (char *)"SVM_setKFoldCrossValidationValue", _wrap_SVM_setKFoldCrossValidationValue, METH_VARARGS, NULL},
	 { (char *)"SVM_enableAutoGamma", _wrap_SVM_enableAutoGamma, METH_VARARGS, NULL},
	 { (char *)"SVM_enableCrossValidationTraining", _wrap_SVM_enableCrossValidationTraining, METH_VARARGS, NULL},
	 { (char *)"SVM_getId", _wrap_SVM_getId, METH_VARARGS, NULL},
	 { (char *)"SVM_save", _wrap_SVM_save, METH_VARARGS, NULL},
	 { (char *)"SVM_load", _wrap_SVM_load, METH_VARARGS, NULL},
	 { (char *)"SVM_train_", _wrap_SVM_train_, METH_VARARGS, NULL},
	 { (char *)"SVM_predict_", _wrap_SVM_predict_, METH_VARARGS, NULL},
	 { (char *)"SVM_swigregister", SVM_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SwipeDetector", _wrap_new_SwipeDetector, METH_VARARGS, NULL},
	 { (char *)"delete_SwipeDetector", _wrap_delete_SwipeDetector, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_deepCopyFrom", _wrap_SwipeDetector_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_init", _wrap_SwipeDetector_init, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_clear", _wrap_SwipeDetector_clear, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_reset", _wrap_SwipeDetector_reset, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_getSwipeDetected", _wrap_SwipeDetector_getSwipeDetected, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_getSwipeValue", _wrap_SwipeDetector_getSwipeValue, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_getSwipeThreshold", _wrap_SwipeDetector_getSwipeThreshold, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_getHysteresisThreshold", _wrap_SwipeDetector_getHysteresisThreshold, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_getMovementVelocity", _wrap_SwipeDetector_getMovementVelocity, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_getMovementThreshold", _wrap_SwipeDetector_getMovementThreshold, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_getContextValue", _wrap_SwipeDetector_getContextValue, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_getSwipeIntegrationCoeff", _wrap_SwipeDetector_getSwipeIntegrationCoeff, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_setContext", _wrap_SwipeDetector_setContext, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_setSwipeIndex", _wrap_SwipeDetector_setSwipeIndex, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_setSwipeDirection", _wrap_SwipeDetector_setSwipeDirection, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_setSwipeThreshold", _wrap_SwipeDetector_setSwipeThreshold, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_setHysteresisThreshold", _wrap_SwipeDetector_setHysteresisThreshold, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_setMovementThreshold", _wrap_SwipeDetector_setMovementThreshold, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_setSwipeIntegrationCoeff", _wrap_SwipeDetector_setSwipeIntegrationCoeff, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_getId", _wrap_SwipeDetector_getId, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_save", _wrap_SwipeDetector_save, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_load", _wrap_SwipeDetector_load, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_train_", _wrap_SwipeDetector_train_, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_predict_", _wrap_SwipeDetector_predict_, METH_VARARGS, NULL},
	 { (char *)"SwipeDetector_swigregister", SwipeDetector_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Clusterer", _wrap_new_Clusterer, METH_VARARGS, NULL},
	 { (char *)"delete_Clusterer", _wrap_delete_Clusterer, METH_VARARGS, NULL},
	 { (char *)"Clusterer_deepCopyFrom", _wrap_Clusterer_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"Clusterer_copyBaseVariables", _wrap_Clusterer_copyBaseVariables, METH_VARARGS, NULL},
	 { (char *)"Clusterer_train_", _wrap_Clusterer_train_, METH_VARARGS, NULL},
	 { (char *)"Clusterer_reset", _wrap_Clusterer_reset, METH_VARARGS, NULL},
	 { (char *)"Clusterer_clear", _wrap_Clusterer_clear, METH_VARARGS, NULL},
	 { (char *)"Clusterer_getNumClusters", _wrap_Clusterer_getNumClusters, METH_VARARGS, NULL},
	 { (char *)"Clusterer_getPredictedClusterLabel", _wrap_Clusterer_getPredictedClusterLabel, METH_VARARGS, NULL},
	 { (char *)"Clusterer_getMaximumLikelihood", _wrap_Clusterer_getMaximumLikelihood, METH_VARARGS, NULL},
	 { (char *)"Clusterer_getBestDistance", _wrap_Clusterer_getBestDistance, METH_VARARGS, NULL},
	 { (char *)"Clusterer_getClusterLikelihoods", _wrap_Clusterer_getClusterLikelihoods, METH_VARARGS, NULL},
	 { (char *)"Clusterer_getClusterDistances", _wrap_Clusterer_getClusterDistances, METH_VARARGS, NULL},
	 { (char *)"Clusterer_getClusterLabels", _wrap_Clusterer_getClusterLabels, METH_VARARGS, NULL},
	 { (char *)"Clusterer_getClustererType", _wrap_Clusterer_getClustererType, METH_VARARGS, NULL},
	 { (char *)"Clusterer_setNumClusters", _wrap_Clusterer_setNumClusters, METH_VARARGS, NULL},
	 { (char *)"Clusterer_create", _wrap_Clusterer_create, METH_VARARGS, NULL},
	 { (char *)"Clusterer_createNewInstance", _wrap_Clusterer_createNewInstance, METH_VARARGS, NULL},
	 { (char *)"Clusterer_createInstanceFromString", _wrap_Clusterer_createInstanceFromString, METH_VARARGS, NULL},
	 { (char *)"Clusterer_deepCopy", _wrap_Clusterer_deepCopy, METH_VARARGS, NULL},
	 { (char *)"Clusterer_getBaseClusterer", _wrap_Clusterer_getBaseClusterer, METH_VARARGS, NULL},
	 { (char *)"Clusterer_getRegisteredClusterers", _wrap_Clusterer_getRegisteredClusterers, METH_VARARGS, NULL},
	 { (char *)"Clusterer_train", _wrap_Clusterer_train, METH_VARARGS, NULL},
	 { (char *)"Clusterer_swigregister", Clusterer_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ClusterTreeNode", _wrap_new_ClusterTreeNode, METH_VARARGS, NULL},
	 { (char *)"delete_ClusterTreeNode", _wrap_delete_ClusterTreeNode, METH_VARARGS, NULL},
	 { (char *)"ClusterTreeNode_predict_", _wrap_ClusterTreeNode_predict_, METH_VARARGS, NULL},
	 { (char *)"ClusterTreeNode_clear", _wrap_ClusterTreeNode_clear, METH_VARARGS, NULL},
	 { (char *)"ClusterTreeNode__print", _wrap_ClusterTreeNode__print, METH_VARARGS, NULL},
	 { (char *)"ClusterTreeNode_deepCopy", _wrap_ClusterTreeNode_deepCopy, METH_VARARGS, NULL},
	 { (char *)"ClusterTreeNode_deepCopyTree", _wrap_ClusterTreeNode_deepCopyTree, METH_VARARGS, NULL},
	 { (char *)"ClusterTreeNode_getNodeSize", _wrap_ClusterTreeNode_getNodeSize, METH_VARARGS, NULL},
	 { (char *)"ClusterTreeNode_getFeatureIndex", _wrap_ClusterTreeNode_getFeatureIndex, METH_VARARGS, NULL},
	 { (char *)"ClusterTreeNode_getThreshold", _wrap_ClusterTreeNode_getThreshold, METH_VARARGS, NULL},
	 { (char *)"ClusterTreeNode_getClusterLabel", _wrap_ClusterTreeNode_getClusterLabel, METH_VARARGS, NULL},
	 { (char *)"ClusterTreeNode_set", _wrap_ClusterTreeNode_set, METH_VARARGS, NULL},
	 { (char *)"ClusterTreeNode_swigregister", ClusterTreeNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ClusterTree", _wrap_new_ClusterTree, METH_VARARGS, NULL},
	 { (char *)"delete_ClusterTree", _wrap_delete_ClusterTree, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_deepCopyFrom", _wrap_ClusterTree_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_train_", _wrap_ClusterTree_train_, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_predict_", _wrap_ClusterTree_predict_, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_clear", _wrap_ClusterTree_clear, METH_VARARGS, NULL},
	 { (char *)"ClusterTree__print", _wrap_ClusterTree__print, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_deepCopyTree", _wrap_ClusterTree_deepCopyTree, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_getTree", _wrap_ClusterTree_getTree, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_getPredictedClusterLabel", _wrap_ClusterTree_getPredictedClusterLabel, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_getMinRMSErrorPerNode", _wrap_ClusterTree_getMinRMSErrorPerNode, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_getTrainingMode", _wrap_ClusterTree_getTrainingMode, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_getNumSplittingSteps", _wrap_ClusterTree_getNumSplittingSteps, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_getMinNumSamplesPerNode", _wrap_ClusterTree_getMinNumSamplesPerNode, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_getMaxDepth", _wrap_ClusterTree_getMaxDepth, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_getPredictedNodeID", _wrap_ClusterTree_getPredictedNodeID, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_getRemoveFeaturesAtEachSplit", _wrap_ClusterTree_getRemoveFeaturesAtEachSplit, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_setTrainingMode", _wrap_ClusterTree_setTrainingMode, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_setNumSplittingSteps", _wrap_ClusterTree_setNumSplittingSteps, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_setMinNumSamplesPerNode", _wrap_ClusterTree_setMinNumSamplesPerNode, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_setMaxDepth", _wrap_ClusterTree_setMaxDepth, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_setRemoveFeaturesAtEachSplit", _wrap_ClusterTree_setRemoveFeaturesAtEachSplit, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_setMinRMSErrorPerNode", _wrap_ClusterTree_setMinRMSErrorPerNode, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_saveModelToFile", _wrap_ClusterTree_saveModelToFile, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_loadModelFromFile", _wrap_ClusterTree_loadModelFromFile, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_train", _wrap_ClusterTree_train, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_predict", _wrap_ClusterTree_predict, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_getId", _wrap_ClusterTree_getId, METH_VARARGS, NULL},
	 { (char *)"ClusterTree_swigregister", ClusterTree_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GaussianMixtureModels", _wrap_new_GaussianMixtureModels, METH_VARARGS, NULL},
	 { (char *)"delete_GaussianMixtureModels", _wrap_delete_GaussianMixtureModels, METH_VARARGS, NULL},
	 { (char *)"GaussianMixtureModels_deepCopyFrom", _wrap_GaussianMixtureModels_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"GaussianMixtureModels_reset", _wrap_GaussianMixtureModels_reset, METH_VARARGS, NULL},
	 { (char *)"GaussianMixtureModels_clear", _wrap_GaussianMixtureModels_clear, METH_VARARGS, NULL},
	 { (char *)"GaussianMixtureModels_train_", _wrap_GaussianMixtureModels_train_, METH_VARARGS, NULL},
	 { (char *)"GaussianMixtureModels_predict_", _wrap_GaussianMixtureModels_predict_, METH_VARARGS, NULL},
	 { (char *)"GaussianMixtureModels_getMu", _wrap_GaussianMixtureModels_getMu, METH_VARARGS, NULL},
	 { (char *)"GaussianMixtureModels_getSigma", _wrap_GaussianMixtureModels_getSigma, METH_VARARGS, NULL},
	 { (char *)"GaussianMixtureModels_getId", _wrap_GaussianMixtureModels_getId, METH_VARARGS, NULL},
	 { (char *)"GaussianMixtureModels_setNumRestarts", _wrap_GaussianMixtureModels_setNumRestarts, METH_VARARGS, NULL},
	 { (char *)"GaussianMixtureModels_saveModelToFile", _wrap_GaussianMixtureModels_saveModelToFile, METH_VARARGS, NULL},
	 { (char *)"GaussianMixtureModels_loadModelFromFile", _wrap_GaussianMixtureModels_loadModelFromFile, METH_VARARGS, NULL},
	 { (char *)"GaussianMixtureModels_swigregister", GaussianMixtureModels_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ClusterInfo", _wrap_new_ClusterInfo, METH_VARARGS, NULL},
	 { (char *)"delete_ClusterInfo", _wrap_delete_ClusterInfo, METH_VARARGS, NULL},
	 { (char *)"ClusterInfo_addSampleToCluster", _wrap_ClusterInfo_addSampleToCluster, METH_VARARGS, NULL},
	 { (char *)"ClusterInfo_getUniqueClusterID", _wrap_ClusterInfo_getUniqueClusterID, METH_VARARGS, NULL},
	 { (char *)"ClusterInfo_getNumSamplesInCluster", _wrap_ClusterInfo_getNumSamplesInCluster, METH_VARARGS, NULL},
	 { (char *)"ClusterInfo_getClusterVariance", _wrap_ClusterInfo_getClusterVariance, METH_VARARGS, NULL},
	 { (char *)"ClusterInfo_uniqueClusterID_set", _wrap_ClusterInfo_uniqueClusterID_set, METH_VARARGS, NULL},
	 { (char *)"ClusterInfo_uniqueClusterID_get", _wrap_ClusterInfo_uniqueClusterID_get, METH_VARARGS, NULL},
	 { (char *)"ClusterInfo_clusterVariance_set", _wrap_ClusterInfo_clusterVariance_set, METH_VARARGS, NULL},
	 { (char *)"ClusterInfo_clusterVariance_get", _wrap_ClusterInfo_clusterVariance_get, METH_VARARGS, NULL},
	 { (char *)"ClusterInfo_indexs_set", _wrap_ClusterInfo_indexs_set, METH_VARARGS, NULL},
	 { (char *)"ClusterInfo_indexs_get", _wrap_ClusterInfo_indexs_get, METH_VARARGS, NULL},
	 { (char *)"ClusterInfo_swigregister", ClusterInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ClusterLevel", _wrap_new_ClusterLevel, METH_VARARGS, NULL},
	 { (char *)"delete_ClusterLevel", _wrap_delete_ClusterLevel, METH_VARARGS, NULL},
	 { (char *)"ClusterLevel_getLevel", _wrap_ClusterLevel_getLevel, METH_VARARGS, NULL},
	 { (char *)"ClusterLevel_getNumClusters", _wrap_ClusterLevel_getNumClusters, METH_VARARGS, NULL},
	 { (char *)"ClusterLevel_level_set", _wrap_ClusterLevel_level_set, METH_VARARGS, NULL},
	 { (char *)"ClusterLevel_level_get", _wrap_ClusterLevel_level_get, METH_VARARGS, NULL},
	 { (char *)"ClusterLevel_clusters_set", _wrap_ClusterLevel_clusters_set, METH_VARARGS, NULL},
	 { (char *)"ClusterLevel_clusters_get", _wrap_ClusterLevel_clusters_get, METH_VARARGS, NULL},
	 { (char *)"ClusterLevel_swigregister", ClusterLevel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HierarchicalClustering", _wrap_new_HierarchicalClustering, METH_VARARGS, NULL},
	 { (char *)"delete_HierarchicalClustering", _wrap_delete_HierarchicalClustering, METH_VARARGS, NULL},
	 { (char *)"HierarchicalClustering_deepCopyFrom", _wrap_HierarchicalClustering_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"HierarchicalClustering_reset", _wrap_HierarchicalClustering_reset, METH_VARARGS, NULL},
	 { (char *)"HierarchicalClustering_clear", _wrap_HierarchicalClustering_clear, METH_VARARGS, NULL},
	 { (char *)"HierarchicalClustering_train_", _wrap_HierarchicalClustering_train_, METH_VARARGS, NULL},
	 { (char *)"HierarchicalClustering_printModel", _wrap_HierarchicalClustering_printModel, METH_VARARGS, NULL},
	 { (char *)"HierarchicalClustering_getClusters", _wrap_HierarchicalClustering_getClusters, METH_VARARGS, NULL},
	 { (char *)"HierarchicalClustering_saveModelToFile", _wrap_HierarchicalClustering_saveModelToFile, METH_VARARGS, NULL},
	 { (char *)"HierarchicalClustering_loadModelFromFile", _wrap_HierarchicalClustering_loadModelFromFile, METH_VARARGS, NULL},
	 { (char *)"HierarchicalClustering_getId", _wrap_HierarchicalClustering_getId, METH_VARARGS, NULL},
	 { (char *)"HierarchicalClustering_swigregister", HierarchicalClustering_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KMeans", _wrap_new_KMeans, METH_VARARGS, NULL},
	 { (char *)"delete_KMeans", _wrap_delete_KMeans, METH_VARARGS, NULL},
	 { (char *)"KMeans_deepCopyFrom", _wrap_KMeans_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"KMeans_reset", _wrap_KMeans_reset, METH_VARARGS, NULL},
	 { (char *)"KMeans_clear", _wrap_KMeans_clear, METH_VARARGS, NULL},
	 { (char *)"KMeans_trainModel", _wrap_KMeans_trainModel, METH_VARARGS, NULL},
	 { (char *)"KMeans_getTheta", _wrap_KMeans_getTheta, METH_VARARGS, NULL},
	 { (char *)"KMeans_getModelTrained", _wrap_KMeans_getModelTrained, METH_VARARGS, NULL},
	 { (char *)"KMeans_getTrainingThetaLog", _wrap_KMeans_getTrainingThetaLog, METH_VARARGS, NULL},
	 { (char *)"KMeans_getClusters", _wrap_KMeans_getClusters, METH_VARARGS, NULL},
	 { (char *)"KMeans_getClassLabelsVector", _wrap_KMeans_getClassLabelsVector, METH_VARARGS, NULL},
	 { (char *)"KMeans_getClassCountVector", _wrap_KMeans_getClassCountVector, METH_VARARGS, NULL},
	 { (char *)"KMeans_setComputeTheta", _wrap_KMeans_setComputeTheta, METH_VARARGS, NULL},
	 { (char *)"KMeans_setClusters", _wrap_KMeans_setClusters, METH_VARARGS, NULL},
	 { (char *)"KMeans_saveModelToFile", _wrap_KMeans_saveModelToFile, METH_VARARGS, NULL},
	 { (char *)"KMeans_loadModelFromFile", _wrap_KMeans_loadModelFromFile, METH_VARARGS, NULL},
	 { (char *)"KMeans_train", _wrap_KMeans_train, METH_VARARGS, NULL},
	 { (char *)"KMeans_train_", _wrap_KMeans_train_, METH_VARARGS, NULL},
	 { (char *)"KMeans_predict", _wrap_KMeans_predict, METH_VARARGS, NULL},
	 { (char *)"KMeans_predict_", _wrap_KMeans_predict_, METH_VARARGS, NULL},
	 { (char *)"KMeans_getId", _wrap_KMeans_getId, METH_VARARGS, NULL},
	 { (char *)"KMeans_swigregister", KMeans_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GaussNeuron", _wrap_new_GaussNeuron, METH_VARARGS, NULL},
	 { (char *)"delete_GaussNeuron", _wrap_delete_GaussNeuron, METH_VARARGS, NULL},
	 { (char *)"GaussNeuron_init", _wrap_GaussNeuron_init, METH_VARARGS, NULL},
	 { (char *)"GaussNeuron_clear", _wrap_GaussNeuron_clear, METH_VARARGS, NULL},
	 { (char *)"GaussNeuron_getInitialized", _wrap_GaussNeuron_getInitialized, METH_VARARGS, NULL},
	 { (char *)"GaussNeuron_getWeightDistance", _wrap_GaussNeuron_getWeightDistance, METH_VARARGS, NULL},
	 { (char *)"GaussNeuron_getSquaredWeightDistance", _wrap_GaussNeuron_getSquaredWeightDistance, METH_VARARGS, NULL},
	 { (char *)"GaussNeuron_fire", _wrap_GaussNeuron_fire, METH_VARARGS, NULL},
	 { (char *)"GaussNeuron_save", _wrap_GaussNeuron_save, METH_VARARGS, NULL},
	 { (char *)"GaussNeuron_load", _wrap_GaussNeuron_load, METH_VARARGS, NULL},
	 { (char *)"GaussNeuron_numInputs_set", _wrap_GaussNeuron_numInputs_set, METH_VARARGS, NULL},
	 { (char *)"GaussNeuron_numInputs_get", _wrap_GaussNeuron_numInputs_get, METH_VARARGS, NULL},
	 { (char *)"GaussNeuron_weights_set", _wrap_GaussNeuron_weights_set, METH_VARARGS, NULL},
	 { (char *)"GaussNeuron_weights_get", _wrap_GaussNeuron_weights_get, METH_VARARGS, NULL},
	 { (char *)"GaussNeuron_sigma_set", _wrap_GaussNeuron_sigma_set, METH_VARARGS, NULL},
	 { (char *)"GaussNeuron_sigma_get", _wrap_GaussNeuron_sigma_get, METH_VARARGS, NULL},
	 { (char *)"GaussNeuron_initialized_set", _wrap_GaussNeuron_initialized_set, METH_VARARGS, NULL},
	 { (char *)"GaussNeuron_initialized_get", _wrap_GaussNeuron_initialized_get, METH_VARARGS, NULL},
	 { (char *)"GaussNeuron_swigregister", GaussNeuron_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SelfOrganizingMap", _wrap_new_SelfOrganizingMap, METH_VARARGS, NULL},
	 { (char *)"delete_SelfOrganizingMap", _wrap_delete_SelfOrganizingMap, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_deepCopyFrom", _wrap_SelfOrganizingMap_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_reset", _wrap_SelfOrganizingMap_reset, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_clear", _wrap_SelfOrganizingMap_clear, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_train_", _wrap_SelfOrganizingMap_train_, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_map_", _wrap_SelfOrganizingMap_map_, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_validateNetworkTypology", _wrap_SelfOrganizingMap_validateNetworkTypology, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_getNetworkSize", _wrap_SelfOrganizingMap_getNetworkSize, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_getAlphaStart", _wrap_SelfOrganizingMap_getAlphaStart, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_getAlphaEnd", _wrap_SelfOrganizingMap_getAlphaEnd, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_getMappedData", _wrap_SelfOrganizingMap_getMappedData, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_getNeurons", _wrap_SelfOrganizingMap_getNeurons, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_getNeuronsRef", _wrap_SelfOrganizingMap_getNeuronsRef, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_getWeightsMatrix", _wrap_SelfOrganizingMap_getWeightsMatrix, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_setNetworkSize", _wrap_SelfOrganizingMap_setNetworkSize, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_setNetworkTypology", _wrap_SelfOrganizingMap_setNetworkTypology, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_setAlphaStart", _wrap_SelfOrganizingMap_setAlphaStart, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_setAlphaEnd", _wrap_SelfOrganizingMap_setAlphaEnd, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_setSigmaWeight", _wrap_SelfOrganizingMap_setSigmaWeight, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_save", _wrap_SelfOrganizingMap_save, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_load", _wrap_SelfOrganizingMap_load, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_getId", _wrap_SelfOrganizingMap_getId, METH_VARARGS, NULL},
	 { (char *)"SelfOrganizingMap_swigregister", SelfOrganizingMap_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FeatureExtraction", _wrap_new_FeatureExtraction, METH_VARARGS, NULL},
	 { (char *)"delete_FeatureExtraction", _wrap_delete_FeatureExtraction, METH_VARARGS, NULL},
	 { (char *)"FeatureExtraction_deepCopyFrom", _wrap_FeatureExtraction_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"FeatureExtraction_copyBaseVariables", _wrap_FeatureExtraction_copyBaseVariables, METH_VARARGS, NULL},
	 { (char *)"FeatureExtraction_predict", _wrap_FeatureExtraction_predict, METH_VARARGS, NULL},
	 { (char *)"FeatureExtraction_computeFeatures", _wrap_FeatureExtraction_computeFeatures, METH_VARARGS, NULL},
	 { (char *)"FeatureExtraction_clear", _wrap_FeatureExtraction_clear, METH_VARARGS, NULL},
	 { (char *)"FeatureExtraction_getInitialized", _wrap_FeatureExtraction_getInitialized, METH_VARARGS, NULL},
	 { (char *)"FeatureExtraction_getFeatureDataReady", _wrap_FeatureExtraction_getFeatureDataReady, METH_VARARGS, NULL},
	 { (char *)"FeatureExtraction_getIsTrainable", _wrap_FeatureExtraction_getIsTrainable, METH_VARARGS, NULL},
	 { (char *)"FeatureExtraction_getFeatureVector", _wrap_FeatureExtraction_getFeatureVector, METH_VARARGS, NULL},
	 { (char *)"FeatureExtraction_getFeatureMatrix", _wrap_FeatureExtraction_getFeatureMatrix, METH_VARARGS, NULL},
	 { (char *)"FeatureExtraction_create", _wrap_FeatureExtraction_create, METH_VARARGS, NULL},
	 { (char *)"FeatureExtraction_save", _wrap_FeatureExtraction_save, METH_VARARGS, NULL},
	 { (char *)"FeatureExtraction_load", _wrap_FeatureExtraction_load, METH_VARARGS, NULL},
	 { (char *)"FeatureExtraction_createNewInstance", _wrap_FeatureExtraction_createNewInstance, METH_VARARGS, NULL},
	 { (char *)"FeatureExtraction_createInstanceFromString", _wrap_FeatureExtraction_createInstanceFromString, METH_VARARGS, NULL},
	 { (char *)"FeatureExtraction_getFeatureExtractionType", _wrap_FeatureExtraction_getFeatureExtractionType, METH_VARARGS, NULL},
	 { (char *)"FeatureExtraction_swigregister", FeatureExtraction_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KMeansQuantizer", _wrap_new_KMeansQuantizer, METH_VARARGS, NULL},
	 { (char *)"delete_KMeansQuantizer", _wrap_delete_KMeansQuantizer, METH_VARARGS, NULL},
	 { (char *)"KMeansQuantizer_deepCopyFrom", _wrap_KMeansQuantizer_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"KMeansQuantizer_computeFeatures", _wrap_KMeansQuantizer_computeFeatures, METH_VARARGS, NULL},
	 { (char *)"KMeansQuantizer_reset", _wrap_KMeansQuantizer_reset, METH_VARARGS, NULL},
	 { (char *)"KMeansQuantizer_clear", _wrap_KMeansQuantizer_clear, METH_VARARGS, NULL},
	 { (char *)"KMeansQuantizer_quantize", _wrap_KMeansQuantizer_quantize, METH_VARARGS, NULL},
	 { (char *)"KMeansQuantizer_getQuantizerTrained", _wrap_KMeansQuantizer_getQuantizerTrained, METH_VARARGS, NULL},
	 { (char *)"KMeansQuantizer_getNumClusters", _wrap_KMeansQuantizer_getNumClusters, METH_VARARGS, NULL},
	 { (char *)"KMeansQuantizer_getQuantizedValue", _wrap_KMeansQuantizer_getQuantizedValue, METH_VARARGS, NULL},
	 { (char *)"KMeansQuantizer_getQuantizationDistances", _wrap_KMeansQuantizer_getQuantizationDistances, METH_VARARGS, NULL},
	 { (char *)"KMeansQuantizer_getQuantizationModel", _wrap_KMeansQuantizer_getQuantizationModel, METH_VARARGS, NULL},
	 { (char *)"KMeansQuantizer_setNumClusters", _wrap_KMeansQuantizer_setNumClusters, METH_VARARGS, NULL},
	 { (char *)"KMeansQuantizer_save", _wrap_KMeansQuantizer_save, METH_VARARGS, NULL},
	 { (char *)"KMeansQuantizer_load", _wrap_KMeansQuantizer_load, METH_VARARGS, NULL},
	 { (char *)"KMeansQuantizer_train_", _wrap_KMeansQuantizer_train_, METH_VARARGS, NULL},
	 { (char *)"KMeansQuantizer_predict_", _wrap_KMeansQuantizer_predict_, METH_VARARGS, NULL},
	 { (char *)"KMeansQuantizer_getId", _wrap_KMeansQuantizer_getId, METH_VARARGS, NULL},
	 { (char *)"KMeansQuantizer_swigregister", KMeansQuantizer_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LinearRegression", _wrap_new_LinearRegression, METH_VARARGS, NULL},
	 { (char *)"delete_LinearRegression", _wrap_delete_LinearRegression, METH_VARARGS, NULL},
	 { (char *)"LinearRegression_deepCopyFrom", _wrap_LinearRegression_deepCopyFrom, METH_VARARGS, NULL},
	 { (char *)"LinearRegression_train_", _wrap_LinearRegression_train_, METH_VARARGS, NULL},
	 { (char *)"LinearRegression_predict_", _wrap_LinearRegression_predict_, METH_VARARGS, NULL},
	 { (char *)"LinearRegression_getMaxNumIterations", _wrap_LinearRegression_getMaxNumIterations, METH_VARARGS, NULL},
	 { (char *)"LinearRegression_setMaxNumIterations", _wrap_LinearRegression_setMaxNumIterations, METH_VARARGS, NULL},
	 { (char *)"LinearRegression_getId", _wrap_LinearRegression_getId, METH_VARARGS, NULL},
	 { (char *)"LinearRegression_save", _wrap_LinearRegression_save, METH_VARARGS, NULL},
	 { (char *)"LinearRegression_load", _wrap_LinearRegression_load, METH_VARARGS, NULL},
	 { (char *)"LinearRegression_swigregister", LinearRegression_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_GRT__VectorFloatTo_p_GRT__VectorT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Vector< double > *)  ((GRT::VectorFloat *) x));
}
static void *_p_GRT__MatrixFloatTo_p_GRT__MatrixT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Matrix< double > *)  ((GRT::MatrixFloat *) x));
}
static void *_p_GRT__MLBaseTo_p_ObserverT_TestInstanceResult_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Observer< TestInstanceResult > *)  ((GRT::MLBase *) x));
}
static void *_p_GRT__MLBaseTo_p_ObserverT_TrainingResult_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Observer< TrainingResult > *)  ((GRT::MLBase *) x));
}
static void *_p_GRT__RadialBasisFunctionTo_p_GRT__WeakClassifier(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::WeakClassifier *)  ((GRT::RadialBasisFunction *) x));
}
static void *_p_GRT__DecisionStumpTo_p_GRT__WeakClassifier(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::WeakClassifier *)  ((GRT::DecisionStump *) x));
}
static void *_p_GRT__LinearRegressionTo_p_Regressifier(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Regressifier *)  ((GRT::LinearRegression *) x));
}
static void *_p_GRT__HMMTo_p_GRT__Classifier(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Classifier *)  ((GRT::HMM *) x));
}
static void *_p_GRT__FiniteStateMachineTo_p_GRT__Classifier(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Classifier *)  ((GRT::FiniteStateMachine *) x));
}
static void *_p_GRT__AdaBoostTo_p_GRT__Classifier(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Classifier *)  ((GRT::AdaBoost *) x));
}
static void *_p_GRT__ANBCTo_p_GRT__Classifier(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Classifier *)  ((GRT::ANBC *) x));
}
static void *_p_GRT__SoftmaxTo_p_GRT__Classifier(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Classifier *)  ((GRT::Softmax *) x));
}
static void *_p_GRT__RandomForestsTo_p_GRT__Classifier(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Classifier *)  ((GRT::RandomForests *) x));
}
static void *_p_GRT__MinDistTo_p_GRT__Classifier(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Classifier *)  ((GRT::MinDist *) x));
}
static void *_p_GRT__SVMTo_p_GRT__Classifier(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Classifier *)  ((GRT::SVM *) x));
}
static void *_p_GRT__ParticleClassifierTo_p_GRT__Classifier(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Classifier *)  ((GRT::ParticleClassifier *) x));
}
static void *_p_GRT__DecisionTreeTo_p_GRT__Classifier(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Classifier *)  ((GRT::DecisionTree *) x));
}
static void *_p_GRT__BAGTo_p_GRT__Classifier(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Classifier *)  ((GRT::BAG *) x));
}
static void *_p_GRT__KNNTo_p_GRT__Classifier(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Classifier *)  ((GRT::KNN *) x));
}
static void *_p_GRT__SwipeDetectorTo_p_GRT__Classifier(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Classifier *)  ((GRT::SwipeDetector *) x));
}
static void *_p_GRT__GMMTo_p_GRT__Classifier(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Classifier *)  ((GRT::GMM *) x));
}
static void *_p_GRT__DTWTo_p_GRT__Classifier(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Classifier *)  ((GRT::DTW *) x));
}
static void *_p_GRT__FSMParticleTo_p_Particle(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Particle *)  ((GRT::FSMParticle *) x));
}
static void *_p_GRT__DecisionTreeThresholdNodeTo_p_GRT__DecisionTreeNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::DecisionTreeNode *)  ((GRT::DecisionTreeThresholdNode *) x));
}
static void *_p_GRT__DecisionTreeClusterNodeTo_p_GRT__DecisionTreeNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::DecisionTreeNode *)  ((GRT::DecisionTreeClusterNode *) x));
}
static void *_p_GRT__DecisionTreeTripleFeatureNodeTo_p_GRT__DecisionTreeNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::DecisionTreeNode *)  ((GRT::DecisionTreeTripleFeatureNode *) x));
}
static void *_p_GRT__KMeansQuantizerTo_p_GRT__FeatureExtraction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::FeatureExtraction *)  ((GRT::KMeansQuantizer *) x));
}
static void *_p_GRT__VectorFloatTo_p_std__vectorT_double_std__allocatorT_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::vector< double,std::allocator< double > > *) (GRT::Vector< Float > *) ((GRT::VectorFloat *) x));
}
static void *_p_GRT__VectorT_double_tTo_p_std__vectorT_double_std__allocatorT_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::vector< double,std::allocator< double > > *)  ((GRT::Vector< double > *) x));
}
static void *_p_GRT__HierarchicalClusteringTo_p_GRT__Clusterer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Clusterer *)  ((GRT::HierarchicalClustering *) x));
}
static void *_p_GRT__ClusterTreeTo_p_GRT__Clusterer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Clusterer *)  ((GRT::ClusterTree *) x));
}
static void *_p_GRT__GaussianMixtureModelsTo_p_GRT__Clusterer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Clusterer *)  ((GRT::GaussianMixtureModels *) x));
}
static void *_p_GRT__KMeansTo_p_GRT__Clusterer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Clusterer *)  ((GRT::KMeans *) x));
}
static void *_p_GRT__SelfOrganizingMapTo_p_GRT__Clusterer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::Clusterer *)  ((GRT::SelfOrganizingMap *) x));
}
static void *_p_GRT__ClusterTreeTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Clusterer *) ((GRT::ClusterTree *) x));
}
static void *_p_GRT__HMMTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Classifier *) ((GRT::HMM *) x));
}
static void *_p_GRT__FiniteStateMachineTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Classifier *) ((GRT::FiniteStateMachine *) x));
}
static void *_p_GRT__AdaBoostTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Classifier *) ((GRT::AdaBoost *) x));
}
static void *_p_GRT__SelfOrganizingMapTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Clusterer *) ((GRT::SelfOrganizingMap *) x));
}
static void *_p_GRT__ANBCTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Classifier *) ((GRT::ANBC *) x));
}
static void *_p_GRT__RandomForestsTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Classifier *) ((GRT::RandomForests *) x));
}
static void *_p_GRT__SoftmaxTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Classifier *) ((GRT::Softmax *) x));
}
static void *_p_GRT__ClustererTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *)  ((GRT::Clusterer *) x));
}
static void *_p_GRT__GaussianMixtureModelsTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Clusterer *) ((GRT::GaussianMixtureModels *) x));
}
static void *_p_GRT__MinDistTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Classifier *) ((GRT::MinDist *) x));
}
static void *_p_GRT__ClassifierTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *)  ((GRT::Classifier *) x));
}
static void *_p_GRT__ParticleClassifierTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Classifier *) ((GRT::ParticleClassifier *) x));
}
static void *_p_GRT__SVMTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Classifier *) ((GRT::SVM *) x));
}
static void *_p_GRT__HierarchicalClusteringTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Clusterer *) ((GRT::HierarchicalClustering *) x));
}
static void *_p_GRT__FeatureExtractionTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *)  ((GRT::FeatureExtraction *) x));
}
static void *_p_GRT__DecisionTreeTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Classifier *) ((GRT::DecisionTree *) x));
}
static void *_p_GRT__BAGTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Classifier *) ((GRT::BAG *) x));
}
static void *_p_GRT__KNNTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Classifier *) ((GRT::KNN *) x));
}
static void *_p_GRT__SwipeDetectorTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Classifier *) ((GRT::SwipeDetector *) x));
}
static void *_p_GRT__DiscreteHiddenMarkovModelTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *)  ((GRT::DiscreteHiddenMarkovModel *) x));
}
static void *_p_GRT__ContinuousHiddenMarkovModelTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *)  ((GRT::ContinuousHiddenMarkovModel *) x));
}
static void *_p_GRT__GMMTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Classifier *) ((GRT::GMM *) x));
}
static void *_p_GRT__GestureRecognitionPipelineTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *)  ((GRT::GestureRecognitionPipeline *) x));
}
static void *_p_GRT__DTWTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Classifier *) ((GRT::DTW *) x));
}
static void *_p_GRT__KMeansTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::Clusterer *) ((GRT::KMeans *) x));
}
static void *_p_GRT__KMeansQuantizerTo_p_GRT__MLBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::MLBase *) (GRT::FeatureExtraction *) ((GRT::KMeansQuantizer *) x));
}
static void *_p_GRT__VectorT_UINT_tTo_p_std__vectorT_UINT_std__allocatorT_UINT_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::vector< UINT,std::allocator< UINT > > *)  ((GRT::Vector< UINT > *) x));
}
static void *_p_GRT__ClusterTreeTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Clusterer *) ((GRT::ClusterTree *) x));
}
static void *_p_GRT__FiniteStateMachineTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Classifier *) ((GRT::FiniteStateMachine *) x));
}
static void *_p_GRT__HMMTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Classifier *) ((GRT::HMM *) x));
}
static void *_p_GRT__ClassificationDataTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *)  ((GRT::ClassificationData *) x));
}
static void *_p_GRT__AdaBoostTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Classifier *) ((GRT::AdaBoost *) x));
}
static void *_p_GRT__SelfOrganizingMapTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Clusterer *) ((GRT::SelfOrganizingMap *) x));
}
static void *_p_GRT__MLBaseTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *)  ((GRT::MLBase *) x));
}
static void *_p_GRT__ANBCTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Classifier *) ((GRT::ANBC *) x));
}
static void *_p_GRT__RandomForestsTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Classifier *) ((GRT::RandomForests *) x));
}
static void *_p_GRT__SoftmaxTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Classifier *) ((GRT::Softmax *) x));
}
static void *_p_GRT__ClustererTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *) ((GRT::Clusterer *) x));
}
static void *_p_GRT__GaussianMixtureModelsTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Clusterer *) ((GRT::GaussianMixtureModels *) x));
}
static void *_p_GRT__ClassifierTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *) ((GRT::Classifier *) x));
}
static void *_p_GRT__MinDistTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Classifier *) ((GRT::MinDist *) x));
}
static void *_p_GRT__ParticleClassifierTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Classifier *) ((GRT::ParticleClassifier *) x));
}
static void *_p_GRT__SVMTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Classifier *) ((GRT::SVM *) x));
}
static void *_p_GRT__HierarchicalClusteringTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Clusterer *) ((GRT::HierarchicalClustering *) x));
}
static void *_p_GRT__FeatureExtractionTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *) ((GRT::FeatureExtraction *) x));
}
static void *_p_GRT__DecisionTreeTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Classifier *) ((GRT::DecisionTree *) x));
}
static void *_p_GRT__BAGTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Classifier *) ((GRT::BAG *) x));
}
static void *_p_GRT__KNNTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Classifier *) ((GRT::KNN *) x));
}
static void *_p_GRT__SwipeDetectorTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Classifier *) ((GRT::SwipeDetector *) x));
}
static void *_p_GRT__DiscreteHiddenMarkovModelTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *) ((GRT::DiscreteHiddenMarkovModel *) x));
}
static void *_p_GRT__ContinuousHiddenMarkovModelTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *) ((GRT::ContinuousHiddenMarkovModel *) x));
}
static void *_p_GRT__GMMTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Classifier *) ((GRT::GMM *) x));
}
static void *_p_GRT__GestureRecognitionPipelineTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *) ((GRT::GestureRecognitionPipeline *) x));
}
static void *_p_GRT__DTWTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Classifier *) ((GRT::DTW *) x));
}
static void *_p_GRT__KMeansTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::Clusterer *) ((GRT::KMeans *) x));
}
static void *_p_GRT__KMeansQuantizerTo_p_GRT__GRTBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GRT::GRTBase *) (GRT::MLBase *)(GRT::FeatureExtraction *) ((GRT::KMeansQuantizer *) x));
}
static void *_p_GRT__DecisionTreeThresholdNodeTo_p_Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Node *) (GRT::DecisionTreeNode *) ((GRT::DecisionTreeThresholdNode *) x));
}
static void *_p_GRT__DecisionTreeClusterNodeTo_p_Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Node *) (GRT::DecisionTreeNode *) ((GRT::DecisionTreeClusterNode *) x));
}
static void *_p_GRT__DecisionTreeTripleFeatureNodeTo_p_Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Node *) (GRT::DecisionTreeNode *) ((GRT::DecisionTreeTripleFeatureNode *) x));
}
static void *_p_GRT__DecisionTreeNodeTo_p_Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Node *)  ((GRT::DecisionTreeNode *) x));
}
static void *_p_GRT__ClusterTreeNodeTo_p_Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Node *)  ((GRT::ClusterTreeNode *) x));
}
static swig_type_info _swigt__p_Clusterer = {"_p_Clusterer", "Clusterer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Context = {"_p_Context", "Context *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DataType = {"_p_DataType", "DataType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FeatureExtraction = {"_p_FeatureExtraction", "FeatureExtraction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__ANBC = {"_p_GRT__ANBC", "GRT::ANBC *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__ANBC_Model = {"_p_GRT__ANBC_Model", "GRT::ANBC_Model *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__AdaBoost = {"_p_GRT__AdaBoost", "GRT::AdaBoost *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__BAG = {"_p_GRT__BAG", "GRT::BAG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__ClassificationData = {"_p_GRT__ClassificationData", "GRT::ClassificationData *|GRT::LabelledClassificationData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__ClassificationDataStream = {"_p_GRT__ClassificationDataStream", "GRT::ClassificationDataStream *|GRT::TimeSeriesClassificationDataStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__ClassificationSample = {"_p_GRT__ClassificationSample", "GRT::ClassificationSample *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__Classifier = {"_p_GRT__Classifier", "GRT::Classifier *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__ClusterInfo = {"_p_GRT__ClusterInfo", "GRT::ClusterInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__ClusterLevel = {"_p_GRT__ClusterLevel", "GRT::ClusterLevel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__ClusterTree = {"_p_GRT__ClusterTree", "GRT::ClusterTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__ClusterTreeNode = {"_p_GRT__ClusterTreeNode", "GRT::ClusterTreeNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__Clusterer = {"_p_GRT__Clusterer", "GRT::Clusterer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__ContinuousHiddenMarkovModel = {"_p_GRT__ContinuousHiddenMarkovModel", "GRT::ContinuousHiddenMarkovModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__DTW = {"_p_GRT__DTW", "GRT::DTW *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__DTWTemplate = {"_p_GRT__DTWTemplate", "GRT::DTWTemplate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__DecisionStump = {"_p_GRT__DecisionStump", "GRT::DecisionStump *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__DecisionTree = {"_p_GRT__DecisionTree", "GRT::DecisionTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__DecisionTreeClusterNode = {"_p_GRT__DecisionTreeClusterNode", "GRT::DecisionTreeClusterNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__DecisionTreeNode = {"_p_GRT__DecisionTreeNode", "GRT::DecisionTreeNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__DecisionTreeThresholdNode = {"_p_GRT__DecisionTreeThresholdNode", "GRT::DecisionTreeThresholdNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__DecisionTreeTripleFeatureNode = {"_p_GRT__DecisionTreeTripleFeatureNode", "GRT::DecisionTreeTripleFeatureNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__DiscreteHiddenMarkovModel = {"_p_GRT__DiscreteHiddenMarkovModel", "GRT::DiscreteHiddenMarkovModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__FSMParticle = {"_p_GRT__FSMParticle", "GRT::FSMParticle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__FeatureExtraction = {"_p_GRT__FeatureExtraction", "GRT::FeatureExtraction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__FiniteStateMachine = {"_p_GRT__FiniteStateMachine", "GRT::FiniteStateMachine *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__GMM = {"_p_GRT__GMM", "GRT::GMM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__GRTBase = {"_p_GRT__GRTBase", "GRT::GRTBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__GaussNeuron = {"_p_GRT__GaussNeuron", "GRT::GaussNeuron *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__GaussianMixtureModels = {"_p_GRT__GaussianMixtureModels", "GRT::GaussianMixtureModels *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__GestureRecognitionPipeline = {"_p_GRT__GestureRecognitionPipeline", "GRT::GestureRecognitionPipeline *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__GuassModel = {"_p_GRT__GuassModel", "GRT::GuassModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__HMM = {"_p_GRT__HMM", "GRT::HMM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__HMMTrainingObject = {"_p_GRT__HMMTrainingObject", "GRT::HMMTrainingObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__HierarchicalClustering = {"_p_GRT__HierarchicalClustering", "GRT::HierarchicalClustering *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__IndexDist = {"_p_GRT__IndexDist", "GRT::IndexDist *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__KMeans = {"_p_GRT__KMeans", "GRT::KMeans *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__KMeansQuantizer = {"_p_GRT__KMeansQuantizer", "GRT::KMeansQuantizer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__KNN = {"_p_GRT__KNN", "GRT::KNN *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__LinearRegression = {"_p_GRT__LinearRegression", "GRT::LinearRegression *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__MLBase = {"_p_GRT__MLBase", "GRT::MLBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__MatrixFloat = {"_p_GRT__MatrixFloat", "GRT::MatrixFloat *|GRT::MatrixDouble *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__MatrixT_GRT__Float_t = {"_p_GRT__MatrixT_GRT__Float_t", "GRT::Matrix< Float > *|GRT::Matrix< GRT::Float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__MatrixT_GRT__GaussNeuron_t = {"_p_GRT__MatrixT_GRT__GaussNeuron_t", "GRT::Matrix< GRT::GaussNeuron > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__MatrixT_GRT__VectorFloat_t = {"_p_GRT__MatrixT_GRT__VectorFloat_t", "GRT::Matrix< GRT::VectorFloat > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__MatrixT_double_t = {"_p_GRT__MatrixT_double_t", "GRT::Matrix< Float > *|GRT::Matrix< GRT::Float > *|GRT::Matrix< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__MinDist = {"_p_GRT__MinDist", "GRT::MinDist *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__MinDistModel = {"_p_GRT__MinDistModel", "GRT::MinDistModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__MixtureModel = {"_p_GRT__MixtureModel", "GRT::MixtureModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__ParticleClassifier = {"_p_GRT__ParticleClassifier", "GRT::ParticleClassifier *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__ParticleClassifierGestureTemplate = {"_p_GRT__ParticleClassifierGestureTemplate", "GRT::ParticleClassifierGestureTemplate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__ParticleClassifierParticleFilter = {"_p_GRT__ParticleClassifierParticleFilter", "GRT::ParticleClassifierParticleFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__RadialBasisFunction = {"_p_GRT__RadialBasisFunction", "GRT::RadialBasisFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__RandomForests = {"_p_GRT__RandomForests", "GRT::RandomForests *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__RegressionData = {"_p_GRT__RegressionData", "GRT::RegressionData *|GRT::LabelledRegressionData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__SVM = {"_p_GRT__SVM", "GRT::SVM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__SelfOrganizingMap = {"_p_GRT__SelfOrganizingMap", "GRT::SelfOrganizingMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__Softmax = {"_p_GRT__Softmax", "GRT::Softmax *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__SoftmaxModel = {"_p_GRT__SoftmaxModel", "GRT::SoftmaxModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__SwipeDetector = {"_p_GRT__SwipeDetector", "GRT::SwipeDetector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__TestResultsObserverManager = {"_p_GRT__TestResultsObserverManager", "GRT::TestResultsObserverManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__TimeSeriesClassificationData = {"_p_GRT__TimeSeriesClassificationData", "GRT::TimeSeriesClassificationData *|GRT::LabelledTimeSeriesClassificationData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__TimeSeriesClassificationSample = {"_p_GRT__TimeSeriesClassificationSample", "GRT::TimeSeriesClassificationSample *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__TrainingResultsObserverManager = {"_p_GRT__TrainingResultsObserverManager", "GRT::TrainingResultsObserverManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__UnlabelledData = {"_p_GRT__UnlabelledData", "GRT::UnlabelledData *|GRT::UnlabelledClassificationData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__Util = {"_p_GRT__Util", "GRT::Util *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorFloat = {"_p_GRT__VectorFloat", "GRT::VectorFloat *|GRT::VectorDouble *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_AdaBoostClassModel_t = {"_p_GRT__VectorT_AdaBoostClassModel_t", "GRT::Vector< AdaBoostClassModel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_ClassTracker_t = {"_p_GRT__VectorT_ClassTracker_t", "GRT::Vector< ClassTracker > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__ANBC_Model_t = {"_p_GRT__VectorT_GRT__ANBC_Model_t", "GRT::Vector< GRT::ANBC_Model > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__ClassificationSample_t = {"_p_GRT__VectorT_GRT__ClassificationSample_t", "GRT::Vector< ClassificationSample > *|GRT::Vector< GRT::ClassificationSample > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__Classifier_p_t = {"_p_GRT__VectorT_GRT__Classifier_p_t", "GRT::Vector< GRT::Classifier * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__ClusterInfo_t = {"_p_GRT__VectorT_GRT__ClusterInfo_t", "GRT::Vector< GRT::ClusterInfo > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__ClusterLevel_t = {"_p_GRT__VectorT_GRT__ClusterLevel_t", "GRT::Vector< GRT::ClusterLevel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__ContinuousHiddenMarkovModel_t = {"_p_GRT__VectorT_GRT__ContinuousHiddenMarkovModel_t", "GRT::Vector< GRT::ContinuousHiddenMarkovModel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__DTWTemplate_t = {"_p_GRT__VectorT_GRT__DTWTemplate_t", "GRT::Vector< GRT::DTWTemplate > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__DecisionTreeNode_p_t = {"_p_GRT__VectorT_GRT__DecisionTreeNode_p_t", "GRT::Vector< GRT::DecisionTreeNode * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__DiscreteHiddenMarkovModel_t = {"_p_GRT__VectorT_GRT__DiscreteHiddenMarkovModel_t", "GRT::Vector< GRT::DiscreteHiddenMarkovModel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__Float_t = {"_p_GRT__VectorT_GRT__Float_t", "GRT::Vector< Float > *|GRT::Vector< GRT::Float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__MatrixFloat_t = {"_p_GRT__VectorT_GRT__MatrixFloat_t", "GRT::Vector< GRT::MatrixFloat > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__MinDistModel_t = {"_p_GRT__VectorT_GRT__MinDistModel_t", "GRT::Vector< GRT::MinDistModel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__MixtureModel_t = {"_p_GRT__VectorT_GRT__MixtureModel_t", "GRT::Vector< GRT::MixtureModel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__ParticleClassifierGestureTemplate_t = {"_p_GRT__VectorT_GRT__ParticleClassifierGestureTemplate_t", "GRT::Vector< GRT::ParticleClassifierGestureTemplate > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__SoftmaxModel_t = {"_p_GRT__VectorT_GRT__SoftmaxModel_t", "GRT::Vector< GRT::SoftmaxModel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__TimeSeriesClassificationSample_t = {"_p_GRT__VectorT_GRT__TimeSeriesClassificationSample_t", "GRT::Vector< GRT::TimeSeriesClassificationSample > *|GRT::Vector< TimeSeriesClassificationSample > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__VectorFloat_t = {"_p_GRT__VectorT_GRT__VectorFloat_t", "GRT::Vector< GRT::VectorFloat > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__VectorT_GRT__Float_t_t = {"_p_GRT__VectorT_GRT__VectorT_GRT__Float_t_t", "GRT::Vector< GRT::Vector< double > > *|GRT::Vector< GRT::Vector< GRT::Float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__VectorT_GRT__IndexDist_t_t = {"_p_GRT__VectorT_GRT__VectorT_GRT__IndexDist_t_t", "GRT::Vector< GRT::Vector< GRT::IndexDist > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_GRT__VectorT_UINT_t_t = {"_p_GRT__VectorT_GRT__VectorT_UINT_t_t", "GRT::Vector< GRT::Vector< UINT > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_MinMax_t = {"_p_GRT__VectorT_MinMax_t", "GRT::Vector< MinMax > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_TestInstanceResult_t = {"_p_GRT__VectorT_TestInstanceResult_t", "GRT::Vector< TestInstanceResult > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_TestResult_t = {"_p_GRT__VectorT_TestResult_t", "GRT::Vector< TestResult > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_TrainingResult_t = {"_p_GRT__VectorT_TrainingResult_t", "GRT::Vector< TrainingResult > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_UINT_t = {"_p_GRT__VectorT_UINT_t", "GRT::Vector< UINT > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_double_t = {"_p_GRT__VectorT_double_t", "GRT::Vector< Float > *|GRT::Vector< GRT::Float > *|GRT::Vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__VectorT_std__string_t = {"_p_GRT__VectorT_std__string_t", "GRT::Vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GRT__WeakClassifier = {"_p_GRT__WeakClassifier", "GRT::WeakClassifier *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LIBSVM__svm_model = {"_p_LIBSVM__svm_model", "LIBSVM::svm_model *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MinMax = {"_p_MinMax", "MinMax *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Node = {"_p_Node", "Node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ObserverT_TestInstanceResult_t = {"_p_ObserverT_TestInstanceResult_t", "Observer< TestInstanceResult > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ObserverT_TrainingResult_t = {"_p_ObserverT_TrainingResult_t", "Observer< TrainingResult > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Particle = {"_p_Particle", "Particle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PostProcessing = {"_p_PostProcessing", "PostProcessing *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PreProcessing = {"_p_PreProcessing", "PreProcessing *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Regressifier = {"_p_Regressifier", "Regressifier *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StringClassifierMap = {"_p_StringClassifierMap", "StringClassifierMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StringClustererMap = {"_p_StringClustererMap", "StringClustererMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StringFeatureExtractionMap = {"_p_StringFeatureExtractionMap", "StringFeatureExtractionMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StringWeakClassifierMap = {"_p_StringWeakClassifierMap", "StringWeakClassifierMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TestInstanceResult = {"_p_TestInstanceResult", "TestInstanceResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TestResult = {"_p_TestResult", "TestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TrainingResult = {"_p_TrainingResult", "TrainingResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Tree__TrainingMode = {"_p_Tree__TrainingMode", "Tree::TrainingMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UINT = {"_p_UINT", "std::vector< UINT >::value_type *|UINT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "GRT::Float *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "GRT::LongFloat *|long double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_UINT_t = {"_p_std__allocatorT_UINT_t", "std::vector< UINT >::allocator_type *|std::allocator< UINT > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_float_t = {"_p_std__allocatorT_float_t", "std::vector< float >::allocator_type *|std::allocator< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_int_t = {"_p_std__allocatorT_int_t", "std::vector< int >::allocator_type *|std::allocator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__fstream = {"_p_std__fstream", "std::fstream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_UINT_std__allocatorT_UINT_t_t = {"_p_std__vectorT_UINT_std__allocatorT_UINT_t_t", "std::vector< UINT,std::allocator< UINT > > *|std::vector< UINT > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_std__allocatorT_float_t_t = {"_p_std__vectorT_float_std__allocatorT_float_t_t", "std::vector< float > *|std::vector< float,std::allocator< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t = {"_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t", "std::vector< unsigned int,std::allocator< unsigned int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Clusterer,
  &_swigt__p_Context,
  &_swigt__p_DataType,
  &_swigt__p_FeatureExtraction,
  &_swigt__p_GRT__ANBC,
  &_swigt__p_GRT__ANBC_Model,
  &_swigt__p_GRT__AdaBoost,
  &_swigt__p_GRT__BAG,
  &_swigt__p_GRT__ClassificationData,
  &_swigt__p_GRT__ClassificationDataStream,
  &_swigt__p_GRT__ClassificationSample,
  &_swigt__p_GRT__Classifier,
  &_swigt__p_GRT__ClusterInfo,
  &_swigt__p_GRT__ClusterLevel,
  &_swigt__p_GRT__ClusterTree,
  &_swigt__p_GRT__ClusterTreeNode,
  &_swigt__p_GRT__Clusterer,
  &_swigt__p_GRT__ContinuousHiddenMarkovModel,
  &_swigt__p_GRT__DTW,
  &_swigt__p_GRT__DTWTemplate,
  &_swigt__p_GRT__DecisionStump,
  &_swigt__p_GRT__DecisionTree,
  &_swigt__p_GRT__DecisionTreeClusterNode,
  &_swigt__p_GRT__DecisionTreeNode,
  &_swigt__p_GRT__DecisionTreeThresholdNode,
  &_swigt__p_GRT__DecisionTreeTripleFeatureNode,
  &_swigt__p_GRT__DiscreteHiddenMarkovModel,
  &_swigt__p_GRT__FSMParticle,
  &_swigt__p_GRT__FeatureExtraction,
  &_swigt__p_GRT__FiniteStateMachine,
  &_swigt__p_GRT__GMM,
  &_swigt__p_GRT__GRTBase,
  &_swigt__p_GRT__GaussNeuron,
  &_swigt__p_GRT__GaussianMixtureModels,
  &_swigt__p_GRT__GestureRecognitionPipeline,
  &_swigt__p_GRT__GuassModel,
  &_swigt__p_GRT__HMM,
  &_swigt__p_GRT__HMMTrainingObject,
  &_swigt__p_GRT__HierarchicalClustering,
  &_swigt__p_GRT__IndexDist,
  &_swigt__p_GRT__KMeans,
  &_swigt__p_GRT__KMeansQuantizer,
  &_swigt__p_GRT__KNN,
  &_swigt__p_GRT__LinearRegression,
  &_swigt__p_GRT__MLBase,
  &_swigt__p_GRT__MatrixFloat,
  &_swigt__p_GRT__MatrixT_GRT__Float_t,
  &_swigt__p_GRT__MatrixT_GRT__GaussNeuron_t,
  &_swigt__p_GRT__MatrixT_GRT__VectorFloat_t,
  &_swigt__p_GRT__MatrixT_double_t,
  &_swigt__p_GRT__MinDist,
  &_swigt__p_GRT__MinDistModel,
  &_swigt__p_GRT__MixtureModel,
  &_swigt__p_GRT__ParticleClassifier,
  &_swigt__p_GRT__ParticleClassifierGestureTemplate,
  &_swigt__p_GRT__ParticleClassifierParticleFilter,
  &_swigt__p_GRT__RadialBasisFunction,
  &_swigt__p_GRT__RandomForests,
  &_swigt__p_GRT__RegressionData,
  &_swigt__p_GRT__SVM,
  &_swigt__p_GRT__SelfOrganizingMap,
  &_swigt__p_GRT__Softmax,
  &_swigt__p_GRT__SoftmaxModel,
  &_swigt__p_GRT__SwipeDetector,
  &_swigt__p_GRT__TestResultsObserverManager,
  &_swigt__p_GRT__TimeSeriesClassificationData,
  &_swigt__p_GRT__TimeSeriesClassificationSample,
  &_swigt__p_GRT__TrainingResultsObserverManager,
  &_swigt__p_GRT__UnlabelledData,
  &_swigt__p_GRT__Util,
  &_swigt__p_GRT__VectorFloat,
  &_swigt__p_GRT__VectorT_AdaBoostClassModel_t,
  &_swigt__p_GRT__VectorT_ClassTracker_t,
  &_swigt__p_GRT__VectorT_GRT__ANBC_Model_t,
  &_swigt__p_GRT__VectorT_GRT__ClassificationSample_t,
  &_swigt__p_GRT__VectorT_GRT__Classifier_p_t,
  &_swigt__p_GRT__VectorT_GRT__ClusterInfo_t,
  &_swigt__p_GRT__VectorT_GRT__ClusterLevel_t,
  &_swigt__p_GRT__VectorT_GRT__ContinuousHiddenMarkovModel_t,
  &_swigt__p_GRT__VectorT_GRT__DTWTemplate_t,
  &_swigt__p_GRT__VectorT_GRT__DecisionTreeNode_p_t,
  &_swigt__p_GRT__VectorT_GRT__DiscreteHiddenMarkovModel_t,
  &_swigt__p_GRT__VectorT_GRT__Float_t,
  &_swigt__p_GRT__VectorT_GRT__MatrixFloat_t,
  &_swigt__p_GRT__VectorT_GRT__MinDistModel_t,
  &_swigt__p_GRT__VectorT_GRT__MixtureModel_t,
  &_swigt__p_GRT__VectorT_GRT__ParticleClassifierGestureTemplate_t,
  &_swigt__p_GRT__VectorT_GRT__SoftmaxModel_t,
  &_swigt__p_GRT__VectorT_GRT__TimeSeriesClassificationSample_t,
  &_swigt__p_GRT__VectorT_GRT__VectorFloat_t,
  &_swigt__p_GRT__VectorT_GRT__VectorT_GRT__Float_t_t,
  &_swigt__p_GRT__VectorT_GRT__VectorT_GRT__IndexDist_t_t,
  &_swigt__p_GRT__VectorT_GRT__VectorT_UINT_t_t,
  &_swigt__p_GRT__VectorT_MinMax_t,
  &_swigt__p_GRT__VectorT_TestInstanceResult_t,
  &_swigt__p_GRT__VectorT_TestResult_t,
  &_swigt__p_GRT__VectorT_TrainingResult_t,
  &_swigt__p_GRT__VectorT_UINT_t,
  &_swigt__p_GRT__VectorT_double_t,
  &_swigt__p_GRT__VectorT_std__string_t,
  &_swigt__p_GRT__WeakClassifier,
  &_swigt__p_LIBSVM__svm_model,
  &_swigt__p_MinMax,
  &_swigt__p_Node,
  &_swigt__p_ObserverT_TestInstanceResult_t,
  &_swigt__p_ObserverT_TrainingResult_t,
  &_swigt__p_Particle,
  &_swigt__p_PostProcessing,
  &_swigt__p_PreProcessing,
  &_swigt__p_Regressifier,
  &_swigt__p_StringClassifierMap,
  &_swigt__p_StringClustererMap,
  &_swigt__p_StringFeatureExtractionMap,
  &_swigt__p_StringWeakClassifierMap,
  &_swigt__p_TestInstanceResult,
  &_swigt__p_TestResult,
  &_swigt__p_TrainingResult,
  &_swigt__p_Tree__TrainingMode,
  &_swigt__p_UINT,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_long_double,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_double,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_UINT_t,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__allocatorT_float_t,
  &_swigt__p_std__allocatorT_int_t,
  &_swigt__p_std__fstream,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__ostream,
  &_swigt__p_std__vectorT_UINT_std__allocatorT_UINT_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_float_std__allocatorT_float_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_Clusterer[] = {  {&_swigt__p_Clusterer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Context[] = {  {&_swigt__p_Context, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DataType[] = {  {&_swigt__p_DataType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FeatureExtraction[] = {  {&_swigt__p_FeatureExtraction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__ANBC[] = {  {&_swigt__p_GRT__ANBC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__ANBC_Model[] = {  {&_swigt__p_GRT__ANBC_Model, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__AdaBoost[] = {  {&_swigt__p_GRT__AdaBoost, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__BAG[] = {  {&_swigt__p_GRT__BAG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__ClassificationData[] = {  {&_swigt__p_GRT__ClassificationData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__ClassificationDataStream[] = {  {&_swigt__p_GRT__ClassificationDataStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__ClassificationSample[] = {  {&_swigt__p_GRT__ClassificationSample, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__Classifier[] = {  {&_swigt__p_GRT__SVM, _p_GRT__SVMTo_p_GRT__Classifier, 0, 0},  {&_swigt__p_GRT__ANBC, _p_GRT__ANBCTo_p_GRT__Classifier, 0, 0},  {&_swigt__p_GRT__FiniteStateMachine, _p_GRT__FiniteStateMachineTo_p_GRT__Classifier, 0, 0},  {&_swigt__p_GRT__BAG, _p_GRT__BAGTo_p_GRT__Classifier, 0, 0},  {&_swigt__p_GRT__KNN, _p_GRT__KNNTo_p_GRT__Classifier, 0, 0},  {&_swigt__p_GRT__AdaBoost, _p_GRT__AdaBoostTo_p_GRT__Classifier, 0, 0},  {&_swigt__p_GRT__GMM, _p_GRT__GMMTo_p_GRT__Classifier, 0, 0},  {&_swigt__p_GRT__DTW, _p_GRT__DTWTo_p_GRT__Classifier, 0, 0},  {&_swigt__p_GRT__Softmax, _p_GRT__SoftmaxTo_p_GRT__Classifier, 0, 0},  {&_swigt__p_GRT__RandomForests, _p_GRT__RandomForestsTo_p_GRT__Classifier, 0, 0},  {&_swigt__p_GRT__HMM, _p_GRT__HMMTo_p_GRT__Classifier, 0, 0},  {&_swigt__p_GRT__MinDist, _p_GRT__MinDistTo_p_GRT__Classifier, 0, 0},  {&_swigt__p_GRT__ParticleClassifier, _p_GRT__ParticleClassifierTo_p_GRT__Classifier, 0, 0},  {&_swigt__p_GRT__Classifier, 0, 0, 0},  {&_swigt__p_GRT__DecisionTree, _p_GRT__DecisionTreeTo_p_GRT__Classifier, 0, 0},  {&_swigt__p_GRT__SwipeDetector, _p_GRT__SwipeDetectorTo_p_GRT__Classifier, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__ClusterInfo[] = {  {&_swigt__p_GRT__ClusterInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__ClusterLevel[] = {  {&_swigt__p_GRT__ClusterLevel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__ClusterTree[] = {  {&_swigt__p_GRT__ClusterTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__ClusterTreeNode[] = {  {&_swigt__p_GRT__ClusterTreeNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__Clusterer[] = {  {&_swigt__p_GRT__HierarchicalClustering, _p_GRT__HierarchicalClusteringTo_p_GRT__Clusterer, 0, 0},  {&_swigt__p_GRT__ClusterTree, _p_GRT__ClusterTreeTo_p_GRT__Clusterer, 0, 0},  {&_swigt__p_GRT__GaussianMixtureModels, _p_GRT__GaussianMixtureModelsTo_p_GRT__Clusterer, 0, 0},  {&_swigt__p_GRT__Clusterer, 0, 0, 0},  {&_swigt__p_GRT__KMeans, _p_GRT__KMeansTo_p_GRT__Clusterer, 0, 0},  {&_swigt__p_GRT__SelfOrganizingMap, _p_GRT__SelfOrganizingMapTo_p_GRT__Clusterer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__ContinuousHiddenMarkovModel[] = {  {&_swigt__p_GRT__ContinuousHiddenMarkovModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__DTW[] = {  {&_swigt__p_GRT__DTW, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__DTWTemplate[] = {  {&_swigt__p_GRT__DTWTemplate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__DecisionStump[] = {  {&_swigt__p_GRT__DecisionStump, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__DecisionTree[] = {  {&_swigt__p_GRT__DecisionTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__DecisionTreeClusterNode[] = {  {&_swigt__p_GRT__DecisionTreeClusterNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__DecisionTreeNode[] = {  {&_swigt__p_GRT__DecisionTreeThresholdNode, _p_GRT__DecisionTreeThresholdNodeTo_p_GRT__DecisionTreeNode, 0, 0},  {&_swigt__p_GRT__DecisionTreeClusterNode, _p_GRT__DecisionTreeClusterNodeTo_p_GRT__DecisionTreeNode, 0, 0},  {&_swigt__p_GRT__DecisionTreeTripleFeatureNode, _p_GRT__DecisionTreeTripleFeatureNodeTo_p_GRT__DecisionTreeNode, 0, 0},  {&_swigt__p_GRT__DecisionTreeNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__DecisionTreeThresholdNode[] = {  {&_swigt__p_GRT__DecisionTreeThresholdNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__DecisionTreeTripleFeatureNode[] = {  {&_swigt__p_GRT__DecisionTreeTripleFeatureNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__DiscreteHiddenMarkovModel[] = {  {&_swigt__p_GRT__DiscreteHiddenMarkovModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__FSMParticle[] = {  {&_swigt__p_GRT__FSMParticle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__FeatureExtraction[] = {  {&_swigt__p_GRT__KMeansQuantizer, _p_GRT__KMeansQuantizerTo_p_GRT__FeatureExtraction, 0, 0},  {&_swigt__p_GRT__FeatureExtraction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__FiniteStateMachine[] = {  {&_swigt__p_GRT__FiniteStateMachine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__GMM[] = {  {&_swigt__p_GRT__GMM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__GRTBase[] = {  {&_swigt__p_GRT__MLBase, _p_GRT__MLBaseTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__SVM, _p_GRT__SVMTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__ClusterTree, _p_GRT__ClusterTreeTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__ANBC, _p_GRT__ANBCTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__FiniteStateMachine, _p_GRT__FiniteStateMachineTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__KNN, _p_GRT__KNNTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__BAG, _p_GRT__BAGTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__GRTBase, 0, 0, 0},  {&_swigt__p_GRT__SelfOrganizingMap, _p_GRT__SelfOrganizingMapTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__AdaBoost, _p_GRT__AdaBoostTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__ClassificationData, _p_GRT__ClassificationDataTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__GMM, _p_GRT__GMMTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__DTW, _p_GRT__DTWTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__Softmax, _p_GRT__SoftmaxTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__RandomForests, _p_GRT__RandomForestsTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__HMM, _p_GRT__HMMTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__Clusterer, _p_GRT__ClustererTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__GaussianMixtureModels, _p_GRT__GaussianMixtureModelsTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__HierarchicalClustering, _p_GRT__HierarchicalClusteringTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__MinDist, _p_GRT__MinDistTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__ParticleClassifier, _p_GRT__ParticleClassifierTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__Classifier, _p_GRT__ClassifierTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__FeatureExtraction, _p_GRT__FeatureExtractionTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__KMeans, _p_GRT__KMeansTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__DecisionTree, _p_GRT__DecisionTreeTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__SwipeDetector, _p_GRT__SwipeDetectorTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__DiscreteHiddenMarkovModel, _p_GRT__DiscreteHiddenMarkovModelTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__ContinuousHiddenMarkovModel, _p_GRT__ContinuousHiddenMarkovModelTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__GestureRecognitionPipeline, _p_GRT__GestureRecognitionPipelineTo_p_GRT__GRTBase, 0, 0},  {&_swigt__p_GRT__KMeansQuantizer, _p_GRT__KMeansQuantizerTo_p_GRT__GRTBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__GaussNeuron[] = {  {&_swigt__p_GRT__GaussNeuron, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__GaussianMixtureModels[] = {  {&_swigt__p_GRT__GaussianMixtureModels, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__GestureRecognitionPipeline[] = {  {&_swigt__p_GRT__GestureRecognitionPipeline, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__GuassModel[] = {  {&_swigt__p_GRT__GuassModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__HMM[] = {  {&_swigt__p_GRT__HMM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__HMMTrainingObject[] = {  {&_swigt__p_GRT__HMMTrainingObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__HierarchicalClustering[] = {  {&_swigt__p_GRT__HierarchicalClustering, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__IndexDist[] = {  {&_swigt__p_GRT__IndexDist, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__KMeans[] = {  {&_swigt__p_GRT__KMeans, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__KMeansQuantizer[] = {  {&_swigt__p_GRT__KMeansQuantizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__KNN[] = {  {&_swigt__p_GRT__KNN, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__LinearRegression[] = {  {&_swigt__p_GRT__LinearRegression, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__MLBase[] = {  {&_swigt__p_GRT__MLBase, 0, 0, 0},  {&_swigt__p_GRT__SVM, _p_GRT__SVMTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__ClusterTree, _p_GRT__ClusterTreeTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__ANBC, _p_GRT__ANBCTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__FiniteStateMachine, _p_GRT__FiniteStateMachineTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__KNN, _p_GRT__KNNTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__BAG, _p_GRT__BAGTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__SelfOrganizingMap, _p_GRT__SelfOrganizingMapTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__AdaBoost, _p_GRT__AdaBoostTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__GMM, _p_GRT__GMMTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__DTW, _p_GRT__DTWTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__Softmax, _p_GRT__SoftmaxTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__RandomForests, _p_GRT__RandomForestsTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__HMM, _p_GRT__HMMTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__Clusterer, _p_GRT__ClustererTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__GaussianMixtureModels, _p_GRT__GaussianMixtureModelsTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__HierarchicalClustering, _p_GRT__HierarchicalClusteringTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__MinDist, _p_GRT__MinDistTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__ParticleClassifier, _p_GRT__ParticleClassifierTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__Classifier, _p_GRT__ClassifierTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__FeatureExtraction, _p_GRT__FeatureExtractionTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__KMeans, _p_GRT__KMeansTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__DecisionTree, _p_GRT__DecisionTreeTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__SwipeDetector, _p_GRT__SwipeDetectorTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__DiscreteHiddenMarkovModel, _p_GRT__DiscreteHiddenMarkovModelTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__ContinuousHiddenMarkovModel, _p_GRT__ContinuousHiddenMarkovModelTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__GestureRecognitionPipeline, _p_GRT__GestureRecognitionPipelineTo_p_GRT__MLBase, 0, 0},  {&_swigt__p_GRT__KMeansQuantizer, _p_GRT__KMeansQuantizerTo_p_GRT__MLBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__MatrixFloat[] = {  {&_swigt__p_GRT__MatrixFloat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__MatrixT_GRT__Float_t[] = {  {&_swigt__p_GRT__MatrixT_GRT__Float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__MatrixT_GRT__GaussNeuron_t[] = {  {&_swigt__p_GRT__MatrixT_GRT__GaussNeuron_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__MatrixT_GRT__VectorFloat_t[] = {  {&_swigt__p_GRT__MatrixT_GRT__VectorFloat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__MatrixT_double_t[] = {  {&_swigt__p_GRT__MatrixFloat, _p_GRT__MatrixFloatTo_p_GRT__MatrixT_double_t, 0, 0},  {&_swigt__p_GRT__MatrixT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__MinDist[] = {  {&_swigt__p_GRT__MinDist, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__MinDistModel[] = {  {&_swigt__p_GRT__MinDistModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__MixtureModel[] = {  {&_swigt__p_GRT__MixtureModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__ParticleClassifier[] = {  {&_swigt__p_GRT__ParticleClassifier, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__ParticleClassifierGestureTemplate[] = {  {&_swigt__p_GRT__ParticleClassifierGestureTemplate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__ParticleClassifierParticleFilter[] = {  {&_swigt__p_GRT__ParticleClassifierParticleFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__RadialBasisFunction[] = {  {&_swigt__p_GRT__RadialBasisFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__RandomForests[] = {  {&_swigt__p_GRT__RandomForests, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__RegressionData[] = {  {&_swigt__p_GRT__RegressionData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__SVM[] = {  {&_swigt__p_GRT__SVM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__SelfOrganizingMap[] = {  {&_swigt__p_GRT__SelfOrganizingMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__Softmax[] = {  {&_swigt__p_GRT__Softmax, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__SoftmaxModel[] = {  {&_swigt__p_GRT__SoftmaxModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__SwipeDetector[] = {  {&_swigt__p_GRT__SwipeDetector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__TestResultsObserverManager[] = {  {&_swigt__p_GRT__TestResultsObserverManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__TimeSeriesClassificationData[] = {  {&_swigt__p_GRT__TimeSeriesClassificationData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__TimeSeriesClassificationSample[] = {  {&_swigt__p_GRT__TimeSeriesClassificationSample, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__TrainingResultsObserverManager[] = {  {&_swigt__p_GRT__TrainingResultsObserverManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__UnlabelledData[] = {  {&_swigt__p_GRT__UnlabelledData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__Util[] = {  {&_swigt__p_GRT__Util, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorFloat[] = {  {&_swigt__p_GRT__VectorFloat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_AdaBoostClassModel_t[] = {  {&_swigt__p_GRT__VectorT_AdaBoostClassModel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_ClassTracker_t[] = {  {&_swigt__p_GRT__VectorT_ClassTracker_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__ANBC_Model_t[] = {  {&_swigt__p_GRT__VectorT_GRT__ANBC_Model_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__ClassificationSample_t[] = {  {&_swigt__p_GRT__VectorT_GRT__ClassificationSample_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__Classifier_p_t[] = {  {&_swigt__p_GRT__VectorT_GRT__Classifier_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__ClusterInfo_t[] = {  {&_swigt__p_GRT__VectorT_GRT__ClusterInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__ClusterLevel_t[] = {  {&_swigt__p_GRT__VectorT_GRT__ClusterLevel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__ContinuousHiddenMarkovModel_t[] = {  {&_swigt__p_GRT__VectorT_GRT__ContinuousHiddenMarkovModel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__DTWTemplate_t[] = {  {&_swigt__p_GRT__VectorT_GRT__DTWTemplate_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__DecisionTreeNode_p_t[] = {  {&_swigt__p_GRT__VectorT_GRT__DecisionTreeNode_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__DiscreteHiddenMarkovModel_t[] = {  {&_swigt__p_GRT__VectorT_GRT__DiscreteHiddenMarkovModel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__Float_t[] = {  {&_swigt__p_GRT__VectorT_GRT__Float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__MatrixFloat_t[] = {  {&_swigt__p_GRT__VectorT_GRT__MatrixFloat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__MinDistModel_t[] = {  {&_swigt__p_GRT__VectorT_GRT__MinDistModel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__MixtureModel_t[] = {  {&_swigt__p_GRT__VectorT_GRT__MixtureModel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__ParticleClassifierGestureTemplate_t[] = {  {&_swigt__p_GRT__VectorT_GRT__ParticleClassifierGestureTemplate_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__SoftmaxModel_t[] = {  {&_swigt__p_GRT__VectorT_GRT__SoftmaxModel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__TimeSeriesClassificationSample_t[] = {  {&_swigt__p_GRT__VectorT_GRT__TimeSeriesClassificationSample_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__VectorFloat_t[] = {  {&_swigt__p_GRT__VectorT_GRT__VectorFloat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__VectorT_GRT__Float_t_t[] = {  {&_swigt__p_GRT__VectorT_GRT__VectorT_GRT__Float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__VectorT_GRT__IndexDist_t_t[] = {  {&_swigt__p_GRT__VectorT_GRT__VectorT_GRT__IndexDist_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_GRT__VectorT_UINT_t_t[] = {  {&_swigt__p_GRT__VectorT_GRT__VectorT_UINT_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_MinMax_t[] = {  {&_swigt__p_GRT__VectorT_MinMax_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_TestInstanceResult_t[] = {  {&_swigt__p_GRT__VectorT_TestInstanceResult_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_TestResult_t[] = {  {&_swigt__p_GRT__VectorT_TestResult_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_TrainingResult_t[] = {  {&_swigt__p_GRT__VectorT_TrainingResult_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_UINT_t[] = {  {&_swigt__p_GRT__VectorT_UINT_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_double_t[] = {  {&_swigt__p_GRT__VectorT_double_t, 0, 0, 0},  {&_swigt__p_GRT__VectorFloat, _p_GRT__VectorFloatTo_p_GRT__VectorT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__VectorT_std__string_t[] = {  {&_swigt__p_GRT__VectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GRT__WeakClassifier[] = {  {&_swigt__p_GRT__WeakClassifier, 0, 0, 0},  {&_swigt__p_GRT__RadialBasisFunction, _p_GRT__RadialBasisFunctionTo_p_GRT__WeakClassifier, 0, 0},  {&_swigt__p_GRT__DecisionStump, _p_GRT__DecisionStumpTo_p_GRT__WeakClassifier, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LIBSVM__svm_model[] = {  {&_swigt__p_LIBSVM__svm_model, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MinMax[] = {  {&_swigt__p_MinMax, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Node[] = {  {&_swigt__p_GRT__DecisionTreeThresholdNode, _p_GRT__DecisionTreeThresholdNodeTo_p_Node, 0, 0},  {&_swigt__p_GRT__DecisionTreeClusterNode, _p_GRT__DecisionTreeClusterNodeTo_p_Node, 0, 0},  {&_swigt__p_Node, 0, 0, 0},  {&_swigt__p_GRT__DecisionTreeTripleFeatureNode, _p_GRT__DecisionTreeTripleFeatureNodeTo_p_Node, 0, 0},  {&_swigt__p_GRT__DecisionTreeNode, _p_GRT__DecisionTreeNodeTo_p_Node, 0, 0},  {&_swigt__p_GRT__ClusterTreeNode, _p_GRT__ClusterTreeNodeTo_p_Node, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ObserverT_TestInstanceResult_t[] = {  {&_swigt__p_GRT__MLBase, _p_GRT__MLBaseTo_p_ObserverT_TestInstanceResult_t, 0, 0},  {&_swigt__p_GRT__SVM, 0, 0, 0},  {&_swigt__p_GRT__ClusterTree, 0, 0, 0},  {&_swigt__p_GRT__ANBC, 0, 0, 0},  {&_swigt__p_GRT__FiniteStateMachine, 0, 0, 0},  {&_swigt__p_GRT__KNN, 0, 0, 0},  {&_swigt__p_GRT__BAG, 0, 0, 0},  {&_swigt__p_GRT__SelfOrganizingMap, 0, 0, 0},  {&_swigt__p_GRT__AdaBoost, 0, 0, 0},  {&_swigt__p_GRT__GMM, 0, 0, 0},  {&_swigt__p_GRT__DTW, 0, 0, 0},  {&_swigt__p_GRT__Softmax, 0, 0, 0},  {&_swigt__p_ObserverT_TestInstanceResult_t, 0, 0, 0},  {&_swigt__p_GRT__RandomForests, 0, 0, 0},  {&_swigt__p_GRT__HMM, 0, 0, 0},  {&_swigt__p_GRT__Clusterer, 0, 0, 0},  {&_swigt__p_GRT__GaussianMixtureModels, 0, 0, 0},  {&_swigt__p_GRT__HierarchicalClustering, 0, 0, 0},  {&_swigt__p_GRT__MinDist, 0, 0, 0},  {&_swigt__p_GRT__ParticleClassifier, 0, 0, 0},  {&_swigt__p_GRT__Classifier, 0, 0, 0},  {&_swigt__p_GRT__FeatureExtraction, 0, 0, 0},  {&_swigt__p_GRT__KMeans, 0, 0, 0},  {&_swigt__p_GRT__DecisionTree, 0, 0, 0},  {&_swigt__p_GRT__SwipeDetector, 0, 0, 0},  {&_swigt__p_GRT__DiscreteHiddenMarkovModel, 0, 0, 0},  {&_swigt__p_GRT__ContinuousHiddenMarkovModel, 0, 0, 0},  {&_swigt__p_GRT__GestureRecognitionPipeline, 0, 0, 0},  {&_swigt__p_GRT__KMeansQuantizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ObserverT_TrainingResult_t[] = {  {&_swigt__p_GRT__MLBase, _p_GRT__MLBaseTo_p_ObserverT_TrainingResult_t, 0, 0},  {&_swigt__p_GRT__SVM, 0, 0, 0},  {&_swigt__p_GRT__ClusterTree, 0, 0, 0},  {&_swigt__p_GRT__ANBC, 0, 0, 0},  {&_swigt__p_GRT__FiniteStateMachine, 0, 0, 0},  {&_swigt__p_GRT__KNN, 0, 0, 0},  {&_swigt__p_GRT__BAG, 0, 0, 0},  {&_swigt__p_GRT__SelfOrganizingMap, 0, 0, 0},  {&_swigt__p_GRT__AdaBoost, 0, 0, 0},  {&_swigt__p_GRT__GMM, 0, 0, 0},  {&_swigt__p_GRT__DTW, 0, 0, 0},  {&_swigt__p_GRT__Softmax, 0, 0, 0},  {&_swigt__p_ObserverT_TrainingResult_t, 0, 0, 0},  {&_swigt__p_GRT__RandomForests, 0, 0, 0},  {&_swigt__p_GRT__HMM, 0, 0, 0},  {&_swigt__p_GRT__Clusterer, 0, 0, 0},  {&_swigt__p_GRT__GaussianMixtureModels, 0, 0, 0},  {&_swigt__p_GRT__HierarchicalClustering, 0, 0, 0},  {&_swigt__p_GRT__MinDist, 0, 0, 0},  {&_swigt__p_GRT__ParticleClassifier, 0, 0, 0},  {&_swigt__p_GRT__Classifier, 0, 0, 0},  {&_swigt__p_GRT__FeatureExtraction, 0, 0, 0},  {&_swigt__p_GRT__KMeans, 0, 0, 0},  {&_swigt__p_GRT__DecisionTree, 0, 0, 0},  {&_swigt__p_GRT__SwipeDetector, 0, 0, 0},  {&_swigt__p_GRT__DiscreteHiddenMarkovModel, 0, 0, 0},  {&_swigt__p_GRT__ContinuousHiddenMarkovModel, 0, 0, 0},  {&_swigt__p_GRT__GestureRecognitionPipeline, 0, 0, 0},  {&_swigt__p_GRT__KMeansQuantizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Particle[] = {  {&_swigt__p_Particle, 0, 0, 0},  {&_swigt__p_GRT__FSMParticle, _p_GRT__FSMParticleTo_p_Particle, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PostProcessing[] = {  {&_swigt__p_PostProcessing, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PreProcessing[] = {  {&_swigt__p_PreProcessing, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Regressifier[] = {  {&_swigt__p_Regressifier, 0, 0, 0},  {&_swigt__p_GRT__LinearRegression, _p_GRT__LinearRegressionTo_p_Regressifier, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StringClassifierMap[] = {  {&_swigt__p_StringClassifierMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StringClustererMap[] = {  {&_swigt__p_StringClustererMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StringFeatureExtractionMap[] = {  {&_swigt__p_StringFeatureExtractionMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StringWeakClassifierMap[] = {  {&_swigt__p_StringWeakClassifierMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TestInstanceResult[] = {  {&_swigt__p_TestInstanceResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TestResult[] = {  {&_swigt__p_TestResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TrainingResult[] = {  {&_swigt__p_TrainingResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Tree__TrainingMode[] = {  {&_swigt__p_Tree__TrainingMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UINT[] = {  {&_swigt__p_UINT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_UINT_t[] = {  {&_swigt__p_std__allocatorT_UINT_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_float_t[] = {  {&_swigt__p_std__allocatorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_int_t[] = {  {&_swigt__p_std__allocatorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__fstream[] = {  {&_swigt__p_std__fstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_UINT_std__allocatorT_UINT_t_t[] = {  {&_swigt__p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0, 0, 0},  {&_swigt__p_GRT__VectorT_UINT_t, _p_GRT__VectorT_UINT_tTo_p_std__vectorT_UINT_std__allocatorT_UINT_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_GRT__VectorT_double_t, _p_GRT__VectorT_double_tTo_p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0},  {&_swigt__p_GRT__VectorFloat, _p_GRT__VectorFloatTo_p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0},  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_std__allocatorT_float_t_t[] = {  {&_swigt__p_std__vectorT_float_std__allocatorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Clusterer,
  _swigc__p_Context,
  _swigc__p_DataType,
  _swigc__p_FeatureExtraction,
  _swigc__p_GRT__ANBC,
  _swigc__p_GRT__ANBC_Model,
  _swigc__p_GRT__AdaBoost,
  _swigc__p_GRT__BAG,
  _swigc__p_GRT__ClassificationData,
  _swigc__p_GRT__ClassificationDataStream,
  _swigc__p_GRT__ClassificationSample,
  _swigc__p_GRT__Classifier,
  _swigc__p_GRT__ClusterInfo,
  _swigc__p_GRT__ClusterLevel,
  _swigc__p_GRT__ClusterTree,
  _swigc__p_GRT__ClusterTreeNode,
  _swigc__p_GRT__Clusterer,
  _swigc__p_GRT__ContinuousHiddenMarkovModel,
  _swigc__p_GRT__DTW,
  _swigc__p_GRT__DTWTemplate,
  _swigc__p_GRT__DecisionStump,
  _swigc__p_GRT__DecisionTree,
  _swigc__p_GRT__DecisionTreeClusterNode,
  _swigc__p_GRT__DecisionTreeNode,
  _swigc__p_GRT__DecisionTreeThresholdNode,
  _swigc__p_GRT__DecisionTreeTripleFeatureNode,
  _swigc__p_GRT__DiscreteHiddenMarkovModel,
  _swigc__p_GRT__FSMParticle,
  _swigc__p_GRT__FeatureExtraction,
  _swigc__p_GRT__FiniteStateMachine,
  _swigc__p_GRT__GMM,
  _swigc__p_GRT__GRTBase,
  _swigc__p_GRT__GaussNeuron,
  _swigc__p_GRT__GaussianMixtureModels,
  _swigc__p_GRT__GestureRecognitionPipeline,
  _swigc__p_GRT__GuassModel,
  _swigc__p_GRT__HMM,
  _swigc__p_GRT__HMMTrainingObject,
  _swigc__p_GRT__HierarchicalClustering,
  _swigc__p_GRT__IndexDist,
  _swigc__p_GRT__KMeans,
  _swigc__p_GRT__KMeansQuantizer,
  _swigc__p_GRT__KNN,
  _swigc__p_GRT__LinearRegression,
  _swigc__p_GRT__MLBase,
  _swigc__p_GRT__MatrixFloat,
  _swigc__p_GRT__MatrixT_GRT__Float_t,
  _swigc__p_GRT__MatrixT_GRT__GaussNeuron_t,
  _swigc__p_GRT__MatrixT_GRT__VectorFloat_t,
  _swigc__p_GRT__MatrixT_double_t,
  _swigc__p_GRT__MinDist,
  _swigc__p_GRT__MinDistModel,
  _swigc__p_GRT__MixtureModel,
  _swigc__p_GRT__ParticleClassifier,
  _swigc__p_GRT__ParticleClassifierGestureTemplate,
  _swigc__p_GRT__ParticleClassifierParticleFilter,
  _swigc__p_GRT__RadialBasisFunction,
  _swigc__p_GRT__RandomForests,
  _swigc__p_GRT__RegressionData,
  _swigc__p_GRT__SVM,
  _swigc__p_GRT__SelfOrganizingMap,
  _swigc__p_GRT__Softmax,
  _swigc__p_GRT__SoftmaxModel,
  _swigc__p_GRT__SwipeDetector,
  _swigc__p_GRT__TestResultsObserverManager,
  _swigc__p_GRT__TimeSeriesClassificationData,
  _swigc__p_GRT__TimeSeriesClassificationSample,
  _swigc__p_GRT__TrainingResultsObserverManager,
  _swigc__p_GRT__UnlabelledData,
  _swigc__p_GRT__Util,
  _swigc__p_GRT__VectorFloat,
  _swigc__p_GRT__VectorT_AdaBoostClassModel_t,
  _swigc__p_GRT__VectorT_ClassTracker_t,
  _swigc__p_GRT__VectorT_GRT__ANBC_Model_t,
  _swigc__p_GRT__VectorT_GRT__ClassificationSample_t,
  _swigc__p_GRT__VectorT_GRT__Classifier_p_t,
  _swigc__p_GRT__VectorT_GRT__ClusterInfo_t,
  _swigc__p_GRT__VectorT_GRT__ClusterLevel_t,
  _swigc__p_GRT__VectorT_GRT__ContinuousHiddenMarkovModel_t,
  _swigc__p_GRT__VectorT_GRT__DTWTemplate_t,
  _swigc__p_GRT__VectorT_GRT__DecisionTreeNode_p_t,
  _swigc__p_GRT__VectorT_GRT__DiscreteHiddenMarkovModel_t,
  _swigc__p_GRT__VectorT_GRT__Float_t,
  _swigc__p_GRT__VectorT_GRT__MatrixFloat_t,
  _swigc__p_GRT__VectorT_GRT__MinDistModel_t,
  _swigc__p_GRT__VectorT_GRT__MixtureModel_t,
  _swigc__p_GRT__VectorT_GRT__ParticleClassifierGestureTemplate_t,
  _swigc__p_GRT__VectorT_GRT__SoftmaxModel_t,
  _swigc__p_GRT__VectorT_GRT__TimeSeriesClassificationSample_t,
  _swigc__p_GRT__VectorT_GRT__VectorFloat_t,
  _swigc__p_GRT__VectorT_GRT__VectorT_GRT__Float_t_t,
  _swigc__p_GRT__VectorT_GRT__VectorT_GRT__IndexDist_t_t,
  _swigc__p_GRT__VectorT_GRT__VectorT_UINT_t_t,
  _swigc__p_GRT__VectorT_MinMax_t,
  _swigc__p_GRT__VectorT_TestInstanceResult_t,
  _swigc__p_GRT__VectorT_TestResult_t,
  _swigc__p_GRT__VectorT_TrainingResult_t,
  _swigc__p_GRT__VectorT_UINT_t,
  _swigc__p_GRT__VectorT_double_t,
  _swigc__p_GRT__VectorT_std__string_t,
  _swigc__p_GRT__WeakClassifier,
  _swigc__p_LIBSVM__svm_model,
  _swigc__p_MinMax,
  _swigc__p_Node,
  _swigc__p_ObserverT_TestInstanceResult_t,
  _swigc__p_ObserverT_TrainingResult_t,
  _swigc__p_Particle,
  _swigc__p_PostProcessing,
  _swigc__p_PreProcessing,
  _swigc__p_Regressifier,
  _swigc__p_StringClassifierMap,
  _swigc__p_StringClustererMap,
  _swigc__p_StringFeatureExtractionMap,
  _swigc__p_StringWeakClassifierMap,
  _swigc__p_TestInstanceResult,
  _swigc__p_TestResult,
  _swigc__p_TrainingResult,
  _swigc__p_Tree__TrainingMode,
  _swigc__p_UINT,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_long_double,
  _swigc__p_p_PyObject,
  _swigc__p_p_double,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_UINT_t,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__allocatorT_float_t,
  _swigc__p_std__allocatorT_int_t,
  _swigc__p_std__fstream,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__ostream,
  _swigc__p_std__vectorT_UINT_std__allocatorT_UINT_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_float_std__allocatorT_float_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
        0,                                  /* tp_prev */
#endif
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  import_array();
  
  SWIG_Python_SetConstant(d, "PI",SWIG_From_double(static_cast< double >(3.14159265358979323846264338327950288)));
  SWIG_Python_SetConstant(d, "TWO_PI",SWIG_From_double(static_cast< double >(6.28318530718)));
  SWIG_Python_SetConstant(d, "ONE_OVER_TWO_PI",SWIG_From_double(static_cast< double >((1.0/6.28318530718))));
  SWIG_Python_SetConstant(d, "SQRT_TWO_PI",SWIG_From_double(static_cast< double >(2.506628274631)));
  SWIG_Python_SetConstant(d, "GRT_DEFAULT_NULL_CLASS_LABEL",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "GRT_SAFE_CHECKING",SWIG_From_bool(static_cast< bool >(true)));
  SWIG_Python_SetConstant(d, "GRT_VERSION_MAJOR",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "GRT_VERSION_MINOR",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "GRT_VERSION_PATCH",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "GRT_VERSION",SWIG_FromCharPtr("0.2.5"));
  SWIG_Python_SetConstant(d, "GRT_REVISION",SWIG_FromCharPtr("2-Jan-2017"));
  SWIG_Python_SetConstant(d, "Util_OS_UNKNOWN",SWIG_From_int(static_cast< int >(GRT::Util::OS_UNKNOWN)));
  SWIG_Python_SetConstant(d, "Util_OS_OSX",SWIG_From_int(static_cast< int >(GRT::Util::OS_OSX)));
  SWIG_Python_SetConstant(d, "Util_OS_LINUX",SWIG_From_int(static_cast< int >(GRT::Util::OS_LINUX)));
  SWIG_Python_SetConstant(d, "Util_OS_WINDOWS",SWIG_From_int(static_cast< int >(GRT::Util::OS_WINDOWS)));
  SWIG_Python_SetConstant(d, "DEFAULT_NULL_LIKELIHOOD_VALUE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "DEFAULT_NULL_DISTANCE_VALUE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "MLBase_BASE_TYPE_NOT_SET",SWIG_From_int(static_cast< int >(GRT::MLBase::BASE_TYPE_NOT_SET)));
  SWIG_Python_SetConstant(d, "MLBase_CLASSIFIER",SWIG_From_int(static_cast< int >(GRT::MLBase::CLASSIFIER)));
  SWIG_Python_SetConstant(d, "MLBase_REGRESSIFIER",SWIG_From_int(static_cast< int >(GRT::MLBase::REGRESSIFIER)));
  SWIG_Python_SetConstant(d, "MLBase_CLUSTERER",SWIG_From_int(static_cast< int >(GRT::MLBase::CLUSTERER)));
  SWIG_Python_SetConstant(d, "MLBase_PRE_PROCSSING",SWIG_From_int(static_cast< int >(GRT::MLBase::PRE_PROCSSING)));
  SWIG_Python_SetConstant(d, "MLBase_POST_PROCESSING",SWIG_From_int(static_cast< int >(GRT::MLBase::POST_PROCESSING)));
  SWIG_Python_SetConstant(d, "MLBase_FEATURE_EXTRACTION",SWIG_From_int(static_cast< int >(GRT::MLBase::FEATURE_EXTRACTION)));
  SWIG_Python_SetConstant(d, "MLBase_CONTEXT",SWIG_From_int(static_cast< int >(GRT::MLBase::CONTEXT)));
  SWIG_Python_SetConstant(d, "Classifier_STANDARD_CLASSIFIER_MODE",SWIG_From_int(static_cast< int >(GRT::Classifier::STANDARD_CLASSIFIER_MODE)));
  SWIG_Python_SetConstant(d, "Classifier_TIMESERIES_CLASSIFIER_MODE",SWIG_From_int(static_cast< int >(GRT::Classifier::TIMESERIES_CLASSIFIER_MODE)));
  SWIG_Python_SetConstant(d, "INSERT_AT_END_INDEX",SWIG_From_int(static_cast< int >(99999)));
  SWIG_Python_SetConstant(d, "GestureRecognitionPipeline_START_OF_PIPELINE",SWIG_From_int(static_cast< int >(GRT::GestureRecognitionPipeline::START_OF_PIPELINE)));
  SWIG_Python_SetConstant(d, "GestureRecognitionPipeline_AFTER_PREPROCESSING",SWIG_From_int(static_cast< int >(GRT::GestureRecognitionPipeline::AFTER_PREPROCESSING)));
  SWIG_Python_SetConstant(d, "GestureRecognitionPipeline_AFTER_FEATURE_EXTRACTION",SWIG_From_int(static_cast< int >(GRT::GestureRecognitionPipeline::AFTER_FEATURE_EXTRACTION)));
  SWIG_Python_SetConstant(d, "GestureRecognitionPipeline_AFTER_CLASSIFIER",SWIG_From_int(static_cast< int >(GRT::GestureRecognitionPipeline::AFTER_CLASSIFIER)));
  SWIG_Python_SetConstant(d, "GestureRecognitionPipeline_END_OF_PIPELINE",SWIG_From_int(static_cast< int >(GRT::GestureRecognitionPipeline::END_OF_PIPELINE)));
  SWIG_Python_SetConstant(d, "GestureRecognitionPipeline_NUM_CONTEXT_LEVELS",SWIG_From_int(static_cast< int >(GRT::GestureRecognitionPipeline::NUM_CONTEXT_LEVELS)));
  SWIG_Python_SetConstant(d, "BIG_DISTANCE",SWIG_From_double(static_cast< double >(99e+99)));
  SWIG_Python_SetConstant(d, "KNN_EUCLIDEAN_DISTANCE",SWIG_From_int(static_cast< int >(GRT::KNN::EUCLIDEAN_DISTANCE)));
  SWIG_Python_SetConstant(d, "KNN_COSINE_DISTANCE",SWIG_From_int(static_cast< int >(GRT::KNN::COSINE_DISTANCE)));
  SWIG_Python_SetConstant(d, "KNN_MANHATTAN_DISTANCE",SWIG_From_int(static_cast< int >(GRT::KNN::MANHATTAN_DISTANCE)));
  SWIG_Python_SetConstant(d, "WEAK_CLASSIFIER_POSITIVE_CLASS_LABEL",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "WEAK_CLASSIFIER_NEGATIVE_CLASS_LABEL",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "AdaBoost_MAX_POSITIVE_VALUE",SWIG_From_int(static_cast< int >(GRT::AdaBoost::MAX_POSITIVE_VALUE)));
  SWIG_Python_SetConstant(d, "AdaBoost_MAX_VALUE",SWIG_From_int(static_cast< int >(GRT::AdaBoost::MAX_VALUE)));
  SWIG_Python_SetConstant(d, "MIN_SCALE_VALUE",SWIG_From_double(static_cast< double >(1.0e-10)));
  SWIG_Python_SetConstant(d, "MAX_SCALE_VALUE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "DTW_ABSOLUTE_DIST",SWIG_From_int(static_cast< int >(GRT::DTW::ABSOLUTE_DIST)));
  SWIG_Python_SetConstant(d, "DTW_EUCLIDEAN_DIST",SWIG_From_int(static_cast< int >(GRT::DTW::EUCLIDEAN_DIST)));
  SWIG_Python_SetConstant(d, "DTW_NORM_ABSOLUTE_DIST",SWIG_From_int(static_cast< int >(GRT::DTW::NORM_ABSOLUTE_DIST)));
  SWIG_Python_SetConstant(d, "DTW_TEMPLATE_THRESHOLDS",SWIG_From_int(static_cast< int >(GRT::DTW::TEMPLATE_THRESHOLDS)));
  SWIG_Python_SetConstant(d, "DTW_CLASS_LIKELIHOODS",SWIG_From_int(static_cast< int >(GRT::DTW::CLASS_LIKELIHOODS)));
  SWIG_Python_SetConstant(d, "DTW_THRESHOLDS_AND_LIKELIHOODS",SWIG_From_int(static_cast< int >(GRT::DTW::THRESHOLDS_AND_LIKELIHOODS)));
  SWIG_Python_SetConstant(d, "GMM_MIN_SCALE_VALUE",SWIG_From_double(static_cast< double >(0.0001)));
  SWIG_Python_SetConstant(d, "GMM_MAX_SCALE_VALUE",SWIG_From_double(static_cast< double >(1.0)));
  SWIG_Python_SetConstant(d, "HMM_ERGODIC",SWIG_From_int(static_cast< int >(HMM_ERGODIC)));
  SWIG_Python_SetConstant(d, "HMM_LEFTRIGHT",SWIG_From_int(static_cast< int >(HMM_LEFTRIGHT)));
  SWIG_Python_SetConstant(d, "HMM_DISCRETE",SWIG_From_int(static_cast< int >(HMM_DISCRETE)));
  SWIG_Python_SetConstant(d, "HMM_CONTINUOUS",SWIG_From_int(static_cast< int >(HMM_CONTINUOUS)));
  SWIG_Python_SetConstant(d, "SVM_MIN_SCALE_RANGE",SWIG_From_double(static_cast< double >(-1.0)));
  SWIG_Python_SetConstant(d, "SVM_MAX_SCALE_RANGE",SWIG_From_double(static_cast< double >(1.0)));
  SWIG_Python_SetConstant(d, "SVM_C_SVC",SWIG_From_int(static_cast< int >(GRT::SVM::C_SVC)));
  SWIG_Python_SetConstant(d, "SVM_NU_SVC",SWIG_From_int(static_cast< int >(GRT::SVM::NU_SVC)));
  SWIG_Python_SetConstant(d, "SVM_ONE_CLASS",SWIG_From_int(static_cast< int >(GRT::SVM::ONE_CLASS)));
  SWIG_Python_SetConstant(d, "SVM_EPSILON_SVR",SWIG_From_int(static_cast< int >(GRT::SVM::EPSILON_SVR)));
  SWIG_Python_SetConstant(d, "SVM_NU_SVR",SWIG_From_int(static_cast< int >(GRT::SVM::NU_SVR)));
  SWIG_Python_SetConstant(d, "SVM_NUM_SVM_TYPES",SWIG_From_int(static_cast< int >(GRT::SVM::NUM_SVM_TYPES)));
  SWIG_Python_SetConstant(d, "SVM_LINEAR_KERNEL",SWIG_From_int(static_cast< int >(GRT::SVM::LINEAR_KERNEL)));
  SWIG_Python_SetConstant(d, "SVM_POLY_KERNEL",SWIG_From_int(static_cast< int >(GRT::SVM::POLY_KERNEL)));
  SWIG_Python_SetConstant(d, "SVM_RBF_KERNEL",SWIG_From_int(static_cast< int >(GRT::SVM::RBF_KERNEL)));
  SWIG_Python_SetConstant(d, "SVM_SIGMOID_KERNEL",SWIG_From_int(static_cast< int >(GRT::SVM::SIGMOID_KERNEL)));
  SWIG_Python_SetConstant(d, "SVM_PRECOMPUTED_KERNEL",SWIG_From_int(static_cast< int >(GRT::SVM::PRECOMPUTED_KERNEL)));
  SWIG_Python_SetConstant(d, "SVM_NUM_KERNEL_TYPES",SWIG_From_int(static_cast< int >(GRT::SVM::NUM_KERNEL_TYPES)));
  SWIG_Python_SetConstant(d, "SwipeDetector_POSITIVE_SWIPE",SWIG_From_int(static_cast< int >(GRT::SwipeDetector::POSITIVE_SWIPE)));
  SWIG_Python_SetConstant(d, "SwipeDetector_NEGATIVE_SWIPE",SWIG_From_int(static_cast< int >(GRT::SwipeDetector::NEGATIVE_SWIPE)));
  SWIG_Python_SetConstant(d, "SelfOrganizingMap_RANDOM_NETWORK",SWIG_From_int(static_cast< int >(GRT::SelfOrganizingMap::RANDOM_NETWORK)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

